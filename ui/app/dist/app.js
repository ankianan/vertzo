/*
 * ATTENTION: The "eval" devtool has been used (maybe by default in mode: "development").
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
/******/ (() => { // webpackBootstrap
/******/ 	"use strict";
/******/ 	var __webpack_modules__ = ({

/***/ "./src/main/index.css":
/*!****************************!*\
  !*** ./src/main/index.css ***!
  \****************************/
/***/ ((module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\n/* harmony import */ var _node_modules_css_loader_dist_runtime_noSourceMaps_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../../../node_modules/css-loader/dist/runtime/noSourceMaps.js */ \"../../node_modules/css-loader/dist/runtime/noSourceMaps.js\");\n/* harmony import */ var _node_modules_css_loader_dist_runtime_noSourceMaps_js__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(_node_modules_css_loader_dist_runtime_noSourceMaps_js__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var _node_modules_css_loader_dist_runtime_api_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../../../node_modules/css-loader/dist/runtime/api.js */ \"../../node_modules/css-loader/dist/runtime/api.js\");\n/* harmony import */ var _node_modules_css_loader_dist_runtime_api_js__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(_node_modules_css_loader_dist_runtime_api_js__WEBPACK_IMPORTED_MODULE_1__);\n// Imports\n\n\nvar ___CSS_LOADER_EXPORT___ = _node_modules_css_loader_dist_runtime_api_js__WEBPACK_IMPORTED_MODULE_1___default()((_node_modules_css_loader_dist_runtime_noSourceMaps_js__WEBPACK_IMPORTED_MODULE_0___default()));\n// Module\n___CSS_LOADER_EXPORT___.push([module.id, \":host {\\n  display: block;\\n  height: 100%;\\n  --list-item-hoz-paddig: 1rem ;\\n}\\n\\nheader {\\n  padding: 0.67em 1rem;\\n  font-size: 2rem;\\n}\\n\\nheader h1 {\\n  font-size: inherit;\\n  padding: 0;\\n  margin: 0;\\n}\\n\\n.flex-row {\\n  display: flex;\\n  align-items: baseline;\\n}\\n\\n.flex-col {\\n  display: flex;\\n  flex-direction: column;\\n}\\n\\nmain .list {\\n  max-height: calc(100% - 2.5rem);\\n  overflow-y: scroll;\\n  overflow-x: hidden;\\n  padding: 0;\\n  margin: 0;\\n  list-style-type: none;\\n}\\nmain .list-item {\\n  padding: 0rem var(--list-item-hoz-paddig) 1.5rem;\\n  margin: 0 0 1.5rem 0;\\n  border-bottom: 1px solid;\\n  line-height: 1.5rem;\\n}\\nmain .time-hm {\\n  font-size: 1.25rem;\\n}\\nmain .time-zone {\\n  font-size: 1rem;\\n  overflow: hidden;\\n  text-overflow: ellipsis;\\n}\\naside {\\n  position: fixed;\\n  right: 1rem;\\n  bottom: 2rem;\\n}\\n\\nbutton {\\n  height: 40px;\\n  padding: 0 1rem;\\n  -webkit-user-select: none;\\n  -moz-user-select: none;\\n  -ms-user-select: none;\\n  user-select: none;\\n}\\n\\n[contenteditable=true].single-line {\\n  white-space: nowrap;\\n  overflow: hidden;\\n  text-overflow: ellipsis;\\n}\\n\\n[contenteditable=true].single-line br {\\n  display: none;\\n}\\n\\n[contenteditable=true].single-line * {\\n  display: inline;\\n  white-space: nowrap;\\n}\", \"\"]);\n// Exports\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (___CSS_LOADER_EXPORT___);\n\n\n//# sourceURL=webpack://@vertzo/app/./src/main/index.css?");

/***/ }),

/***/ "../../node_modules/css-loader/dist/runtime/api.js":
/*!*********************************************************!*\
  !*** ../../node_modules/css-loader/dist/runtime/api.js ***!
  \*********************************************************/
/***/ ((module) => {

eval("\n\n/*\n  MIT License http://www.opensource.org/licenses/mit-license.php\n  Author Tobias Koppers @sokra\n*/\nmodule.exports = function (cssWithMappingToString) {\n  var list = []; // return the list of modules as css string\n\n  list.toString = function toString() {\n    return this.map(function (item) {\n      var content = \"\";\n      var needLayer = typeof item[5] !== \"undefined\";\n\n      if (item[4]) {\n        content += \"@supports (\".concat(item[4], \") {\");\n      }\n\n      if (item[2]) {\n        content += \"@media \".concat(item[2], \" {\");\n      }\n\n      if (needLayer) {\n        content += \"@layer\".concat(item[5].length > 0 ? \" \".concat(item[5]) : \"\", \" {\");\n      }\n\n      content += cssWithMappingToString(item);\n\n      if (needLayer) {\n        content += \"}\";\n      }\n\n      if (item[2]) {\n        content += \"}\";\n      }\n\n      if (item[4]) {\n        content += \"}\";\n      }\n\n      return content;\n    }).join(\"\");\n  }; // import a list of modules into the list\n\n\n  list.i = function i(modules, media, dedupe, supports, layer) {\n    if (typeof modules === \"string\") {\n      modules = [[null, modules, undefined]];\n    }\n\n    var alreadyImportedModules = {};\n\n    if (dedupe) {\n      for (var _i = 0; _i < this.length; _i++) {\n        var id = this[_i][0];\n\n        if (id != null) {\n          alreadyImportedModules[id] = true;\n        }\n      }\n    }\n\n    for (var _i2 = 0; _i2 < modules.length; _i2++) {\n      var item = [].concat(modules[_i2]);\n\n      if (dedupe && alreadyImportedModules[item[0]]) {\n        continue;\n      }\n\n      if (typeof layer !== \"undefined\") {\n        if (typeof item[5] === \"undefined\") {\n          item[5] = layer;\n        } else {\n          item[1] = \"@layer\".concat(item[5].length > 0 ? \" \".concat(item[5]) : \"\", \" {\").concat(item[1], \"}\");\n          item[5] = layer;\n        }\n      }\n\n      if (media) {\n        if (!item[2]) {\n          item[2] = media;\n        } else {\n          item[1] = \"@media \".concat(item[2], \" {\").concat(item[1], \"}\");\n          item[2] = media;\n        }\n      }\n\n      if (supports) {\n        if (!item[4]) {\n          item[4] = \"\".concat(supports);\n        } else {\n          item[1] = \"@supports (\".concat(item[4], \") {\").concat(item[1], \"}\");\n          item[4] = supports;\n        }\n      }\n\n      list.push(item);\n    }\n  };\n\n  return list;\n};\n\n//# sourceURL=webpack://@vertzo/app/../../node_modules/css-loader/dist/runtime/api.js?");

/***/ }),

/***/ "../../node_modules/css-loader/dist/runtime/noSourceMaps.js":
/*!******************************************************************!*\
  !*** ../../node_modules/css-loader/dist/runtime/noSourceMaps.js ***!
  \******************************************************************/
/***/ ((module) => {

eval("\n\nmodule.exports = function (i) {\n  return i[1];\n};\n\n//# sourceURL=webpack://@vertzo/app/../../node_modules/css-loader/dist/runtime/noSourceMaps.js?");

/***/ }),

/***/ "../../node_modules/timezones-list/dist/index.js":
/*!*******************************************************!*\
  !*** ../../node_modules/timezones-list/dist/index.js ***!
  \*******************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

eval("\r\nvar __importDefault = (this && this.__importDefault) || function (mod) {\r\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\r\n};\r\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\r\nconst timezones_json_1 = __importDefault(__webpack_require__(/*! ./timezones.json */ \"../../node_modules/timezones-list/dist/timezones.json\"));\r\nexports.default = timezones_json_1.default;\r\n\n\n//# sourceURL=webpack://@vertzo/app/../../node_modules/timezones-list/dist/index.js?");

/***/ }),

/***/ "./src/main/components/vertzo-timezone-selector/TimezoneSelector.js":
/*!**************************************************************************!*\
  !*** ./src/main/components/vertzo-timezone-selector/TimezoneSelector.js ***!
  \**************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"TimezoneSelector\": () => (/* binding */ TimezoneSelector)\n/* harmony export */ });\n/* harmony import */ var lit__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! lit */ \"../../node_modules/lit/index.js\");\n/* harmony import */ var _data_TimezoneMap__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../data/TimezoneMap */ \"./src/main/data/TimezoneMap.js\");\n\n\n\n\nclass TimezoneSelector extends lit__WEBPACK_IMPORTED_MODULE_0__.LitElement {\n    static get styles() {\n        return lit__WEBPACK_IMPORTED_MODULE_0__.css`\n        \n        `;\n    }\n\n    static get properties() {\n        return {\n            value: {type: String}\n        }\n    }\n\n    constructor() {\n        super();\n\n        this.value = new Date().getTimezoneOffset();\n    }\n\n    render() {\n        return lit__WEBPACK_IMPORTED_MODULE_0__.html`\n            <select>\n                ${Object.keys(_data_TimezoneMap__WEBPACK_IMPORTED_MODULE_1__.TimezoneMap)\n                .map(offset=>_data_TimezoneMap__WEBPACK_IMPORTED_MODULE_1__.TimezoneMap[offset])\n                .map(timezone=>\n                    lit__WEBPACK_IMPORTED_MODULE_0__.html`\n                        <option value=\"${timezone.offset}\" ?selected=\"${timezone.offset == this.value}\">\n                            ${timezone.name}\n                        </option>\n                    `\n                )}\n            </select>\n        `;\n    }\n}\n\ncustomElements.define('vertzo-timezone-selector', TimezoneSelector);\n\n\n//# sourceURL=webpack://@vertzo/app/./src/main/components/vertzo-timezone-selector/TimezoneSelector.js?");

/***/ }),

/***/ "./src/main/data/TimezoneMap.js":
/*!**************************************!*\
  !*** ./src/main/data/TimezoneMap.js ***!
  \**************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"Timezones\": () => (/* binding */ Timezones),\n/* harmony export */   \"TimezoneMap\": () => (/* binding */ TimezoneMap),\n/* harmony export */   \"createTimezone\": () => (/* binding */ createTimezone),\n/* harmony export */   \"getTimezoneOffset\": () => (/* binding */ getTimezoneOffset)\n/* harmony export */ });\n/* harmony import */ var timezones_list__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! timezones-list */ \"../../node_modules/timezones-list/dist/index.js\");\n/* harmony import */ var timezones_list__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(timezones_list__WEBPACK_IMPORTED_MODULE_0__);\n\n\n/**\n @typedef {{label: String, name: String, tzCode: String, utc: String}} timezone\n */\n\n/**\n * @typedef {number} TimezoneOffset\n */\n\n/**\n * @typedef {{offset:TimezoneOffset, name: String, utc: String}} Timezone\n */\n\n/**\n *\n * @type {Timezone[]}\n */\nconst Timezones = [];\n\nconst TimezoneMap = {};\n\ntimezones_list__WEBPACK_IMPORTED_MODULE_0___default().forEach(\n/**\n * Reduces timezone to Timezone\n * @param acc\n * @param {timezone} timezone\n * @return {{}}\n */\nfunction (timezone){\n    const Timezone = createTimezone(timezone);\n    if(!(Timezone.offset in TimezoneMap)){\n        TimezoneMap[Timezone.offset] = Timezone;\n        Timezones.push(Timezone);\n    }\n\n\n});\n\n\n/**\n *\n * @param {timezone} timezone\n * @return {Timezone}\n */\nfunction createTimezone(timezone) {\n    return Object.create(timezone, {\n        'offset': {\n            value: getTimezoneOffset(timezone),\n        }\n    });\n}\n\n/**\n * @param {timezone} timezone\n * @return {TimezoneOffset}\n */\nfunction getTimezoneOffset(timezone) {\n    const utc = timezone.utc;\n    const [hh, mm] = utc.split(\":\");\n\n    return -(parseInt(hh)*60 + parseInt(mm));\n}\n\n//# sourceURL=webpack://@vertzo/app/./src/main/data/TimezoneMap.js?");

/***/ }),

/***/ "./src/main/index.js":
/*!***************************!*\
  !*** ./src/main/index.js ***!
  \***************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"Vertzo\": () => (/* binding */ Vertzo)\n/* harmony export */ });\n/* harmony import */ var lit__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! lit */ \"../../node_modules/lit/index.js\");\n/* harmony import */ var _data_TimezoneMap__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./data/TimezoneMap */ \"./src/main/data/TimezoneMap.js\");\n/* harmony import */ var _components_vertzo_timezone_selector_TimezoneSelector__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./components/vertzo-timezone-selector/TimezoneSelector */ \"./src/main/components/vertzo-timezone-selector/TimezoneSelector.js\");\n/* harmony import */ var _index_css__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./index.css */ \"./src/main/index.css\");\n/* harmony import */ var lit_directives_live_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! lit/directives/live.js */ \"../../node_modules/lit/directives/live.js\");\n\n\n\n\n\n\nclass Vertzo extends lit__WEBPACK_IMPORTED_MODULE_0__.LitElement {\n    static get styles() {\n        return (0,lit__WEBPACK_IMPORTED_MODULE_0__.unsafeCSS)(_index_css__WEBPACK_IMPORTED_MODULE_3__.default)\n    }\n\n    static get properties() {\n        return {\n            _list: {type: Array, state: true},\n            _time: {type: Number, state: true},\n            _hideSelectTimezone : {type: Boolean, state: true},\n            _renames :{type: Object, state: true}\n        }\n    }\n\n    constructor() {\n        super();\n\n        this._timezoneOffset = new Date().getTimezoneOffset();\n\n        /**\n         *\n         * @type {Timezone[]}\n         * @private\n         */\n        this._list = [];\n\n        const now = new Date();\n        now.setSeconds(0);\n        now.setMinutes(0);\n        this.setTime(now.getTime());\n\n        this._hideSelectTimezone = true;\n        this._renames = {}\n    }\n\n    /**\n     * @param {Number} time\n     */\n    setTime(time) {\n        this._time = time;\n    }\n\n    /**\n     * @return {Number}\n     */\n    getTime() {\n        return this._time;\n    }\n\n    render() {\n        let currentTimezone = _data_TimezoneMap__WEBPACK_IMPORTED_MODULE_1__.TimezoneMap[this._timezoneOffset];\n        return lit__WEBPACK_IMPORTED_MODULE_0__.html`\n            <header>\n                <h1>Vertzo</h1>\n            </header>\n            <main>\n            <ul class=\"list\">\n                ${this._list.map((timezone, index)=>{\n                    return lit__WEBPACK_IMPORTED_MODULE_0__.html`<li class=\"list-item\">\n                                ${this.renderRow(this.renderTimeString(timezone), timezone, index)}\n                            </li>`\n                })}\n            </ul>\n            <button @click=\"${(this.addNewTimezoneToList())}\">Add more</button>\n                \n            </main>\n                \n            <aside>\n                <button @click=\"${this.changeDate(-30)}\">‹</button>\n                <button @click=\"${this.changeDate(30)}\">›</button>\n                \n            </aside>\n        `;\n    }\n\n    addNewTimezoneToList() {\n        return ()=>{\n            this._list = [...this._list, _data_TimezoneMap__WEBPACK_IMPORTED_MODULE_1__.TimezoneMap[this._timezoneOffset]]\n        }\n    }\n\n    /**\n     *\n     * @param timeSlot\n     * @param {Timezone} timezone\n     * @return {*}\n     */\n    renderRow(timeSlot, timezone, index) {\n        return lit__WEBPACK_IMPORTED_MODULE_0__.html`\n            <div class=\"flex-row\" style=\"justify-content: space-between; flex-wrap: nowrap; gap: 1rem\">\n                <div class=\"flex-col\">\n                    <span class=\"time-hm\" style=\"white-space: nowrap\">${timeSlot}</span>\n                    <span class=\"time-date\">${this.getDateByTimezone(timezone.offset).toLocaleDateString()}</span>\n                </div>\n                <div class=\"time-zone\" style=\"display: flex; flex-wrap: nowrap; gap: 3px\">\n                    <span class=\"single-line\" contenteditable=\"true\" @blur=\"${(this.renameTimezone(timezone))}\" .textContent=\"${(0,lit_directives_live_js__WEBPACK_IMPORTED_MODULE_4__.live)(this.getTimezoneName(timezone))}\"></span>\n                    <div>\n                        ${this._hideSelectTimezone\n                            ? lit__WEBPACK_IMPORTED_MODULE_0__.html`<span @click=\"${(this.hideSelectTimezone(false))}\">${timezone.utc}</span>`\n                            : lit__WEBPACK_IMPORTED_MODULE_0__.html`<select @change=\"${this.onTimezoneChange(this.updateTimezoneAtIndex(index))}\" @focusout=\"${this.hideSelectTimezone(true)}\">\n                                                       ${_data_TimezoneMap__WEBPACK_IMPORTED_MODULE_1__.Timezones.map((_timezone, index)=>lit__WEBPACK_IMPORTED_MODULE_0__.html`<option value=\"${index}\" ?selected=\"${_timezone.name === timezone.name}\">${_timezone.utc}</option>`)}\n                                                    </select>`\n                        }\n                    </div>\n                </div>\n            </div>\n            \n        `;\n    }\n\n    renameTimezone(timezone) {\n        return event=>{\n            const newValue = event.target.textContent || timezone.tzCode;\n            this._renames = {\n                ...this._renames,\n                [timezone.offset] : newValue\n            };\n        }\n    }\n\n    getTimezoneName(timezone) {\n        return this._renames[timezone.offset] || timezone.tzCode;\n    }\n\n    updateTimezoneAtIndex(listIndex) {\n        return (selectedTimezoneIndex) => {\n            this._list = [...this._list.map((_timezone, _listIndex)=>{\n                if(_listIndex === listIndex){\n                    return  _data_TimezoneMap__WEBPACK_IMPORTED_MODULE_1__.Timezones[selectedTimezoneIndex];\n                }\n                return _timezone;\n            })];\n        };\n    }\n\n    onTimezoneChange(updateTimezone) {\n        return event=>updateTimezone(event.target.value);\n    }\n\n    hideSelectTimezone(value) {\n        return () => this._hideSelectTimezone = value;\n    }\n\n    /**\n     *\n     * @param {Timezone} timezone\n     * @return {*}\n     */\n    renderTimeString(timezone) {\n        return lit__WEBPACK_IMPORTED_MODULE_0__.html`${this.getFormattedTimeString(timezone)}`;\n    }\n\n    changeDate( diffInMinutes = 30) {\n        return () => {\n            this.setTime(this.getTime() + diffInMinutes * 60000);\n        }\n    }\n\n    /**\n     * Returns formatted Time String in a timezone\n     * @param {Timezone} timezone\n     * @return {string}\n     */\n    getFormattedTimeString(timezone) {\n        const date = this.getDateByTimezone(timezone.offset)\n        const HH = `0${(this.convertHrsTo12HrFormat(date.getHours()))}`.slice(-2);\n        const MM = `0${date.getMinutes()}`.slice(-2);\n        const AM_PM = date.getHours()>11?'PM':'AM';\n        return `${HH}:${MM} ${AM_PM}`;\n    }\n\n    /**\n     * Return date for this._time as per target timezone offset\n     * @param {TimezoneOffset} targetTimezoneOffset\n     * @return {Date}\n     */\n    getDateByTimezone(targetTimezoneOffset) {\n        let date;\n        if(targetTimezoneOffset === this._timezoneOffset){\n            date = new Date(this.getTime());\n        } else {\n            // Moving to UTC timezone\n            const utcTime = this.getTime() + (this._timezoneOffset * 60 * 1000);\n\n            // Moving from UTC timezone\n            const targetTimezoneTime = utcTime + (-(targetTimezoneOffset) * 60 * 1000);\n            date = new Date(targetTimezoneTime);\n        }\n\n        return date;\n    }\n\n    /**\n     *\n     * @param {Number} hours\n     * @return {number|*}\n     */\n    convertHrsTo12HrFormat(hours) {\n        return (hours > 12)  ? hours % 12 : ((hours === 0)?12: hours);\n    }\n}\n\ncustomElements.define('vertzo-app', Vertzo);\n\n\n//# sourceURL=webpack://@vertzo/app/./src/main/index.js?");

/***/ }),

/***/ "../../node_modules/@lit/reactive-element/development/css-tag.js":
/*!***********************************************************************!*\
  !*** ../../node_modules/@lit/reactive-element/development/css-tag.js ***!
  \***********************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"supportsAdoptingStyleSheets\": () => (/* binding */ supportsAdoptingStyleSheets),\n/* harmony export */   \"CSSResult\": () => (/* binding */ CSSResult),\n/* harmony export */   \"unsafeCSS\": () => (/* binding */ unsafeCSS),\n/* harmony export */   \"css\": () => (/* binding */ css),\n/* harmony export */   \"adoptStyles\": () => (/* binding */ adoptStyles),\n/* harmony export */   \"getCompatibleStyle\": () => (/* binding */ getCompatibleStyle)\n/* harmony export */ });\n/**\n * @license\n * Copyright 2019 Google LLC\n * SPDX-License-Identifier: BSD-3-Clause\n */\n/**\n * Whether the current browser supports `adoptedStyleSheets`.\n */\nconst supportsAdoptingStyleSheets = window.ShadowRoot &&\n    (window.ShadyCSS === undefined || window.ShadyCSS.nativeShadow) &&\n    'adoptedStyleSheets' in Document.prototype &&\n    'replace' in CSSStyleSheet.prototype;\nconst constructionToken = Symbol();\nconst styleSheetCache = new Map();\n/**\n * A container for a string of CSS text, that may be used to create a CSSStyleSheet.\n *\n * CSSResult is the return value of `css`-tagged template literals and\n * `unsafeCSS()`. In order to ensure that CSSResults are only created via the\n * `css` tag and `unsafeCSS()`, CSSResult cannot be constructed directly.\n */\nclass CSSResult {\n    constructor(cssText, safeToken) {\n        // This property needs to remain unminified.\n        this['_$cssResult$'] = true;\n        if (safeToken !== constructionToken) {\n            throw new Error('CSSResult is not constructable. Use `unsafeCSS` or `css` instead.');\n        }\n        this.cssText = cssText;\n    }\n    // Note, this is a getter so that it's lazy. In practice, this means\n    // stylesheets are not created until the first element instance is made.\n    get styleSheet() {\n        // Note, if `supportsAdoptingStyleSheets` is true then we assume\n        // CSSStyleSheet is constructable.\n        let styleSheet = styleSheetCache.get(this.cssText);\n        if (supportsAdoptingStyleSheets && styleSheet === undefined) {\n            styleSheetCache.set(this.cssText, (styleSheet = new CSSStyleSheet()));\n            styleSheet.replaceSync(this.cssText);\n        }\n        return styleSheet;\n    }\n    toString() {\n        return this.cssText;\n    }\n}\nconst textFromCSSResult = (value) => {\n    // This property needs to remain unminified.\n    if (value['_$cssResult$'] === true) {\n        return value.cssText;\n    }\n    else if (typeof value === 'number') {\n        return value;\n    }\n    else {\n        throw new Error(`Value passed to 'css' function must be a 'css' function result: ` +\n            `${value}. Use 'unsafeCSS' to pass non-literal values, but take care ` +\n            `to ensure page security.`);\n    }\n};\n/**\n * Wrap a value for interpolation in a [[`css`]] tagged template literal.\n *\n * This is unsafe because untrusted CSS text can be used to phone home\n * or exfiltrate data to an attacker controlled site. Take care to only use\n * this with trusted input.\n */\nconst unsafeCSS = (value) => new CSSResult(typeof value === 'string' ? value : String(value), constructionToken);\n/**\n * A template literal tag which can be used with LitElement's\n * [[LitElement.styles | `styles`]] property to set element styles.\n *\n * For security reasons, only literal string values and number may be used in\n * embedded expressions. To incorporate non-literal values [[`unsafeCSS`]] may\n * be used inside an expression.\n */\nconst css = (strings, ...values) => {\n    const cssText = strings.length === 1\n        ? strings[0]\n        : values.reduce((acc, v, idx) => acc + textFromCSSResult(v) + strings[idx + 1], strings[0]);\n    return new CSSResult(cssText, constructionToken);\n};\n/**\n * Applies the given styles to a `shadowRoot`. When Shadow DOM is\n * available but `adoptedStyleSheets` is not, styles are appended to the\n * `shadowRoot` to [mimic spec behavior](https://wicg.github.io/construct-stylesheets/#using-constructed-stylesheets).\n * Note, when shimming is used, any styles that are subsequently placed into\n * the shadowRoot should be placed *before* any shimmed adopted styles. This\n * will match spec behavior that gives adopted sheets precedence over styles in\n * shadowRoot.\n */\nconst adoptStyles = (renderRoot, styles) => {\n    if (supportsAdoptingStyleSheets) {\n        renderRoot.adoptedStyleSheets = styles.map((s) => s instanceof CSSStyleSheet ? s : s.styleSheet);\n    }\n    else {\n        styles.forEach((s) => {\n            const style = document.createElement('style');\n            style.textContent = s.cssText;\n            renderRoot.appendChild(style);\n        });\n    }\n};\nconst cssResultFromStyleSheet = (sheet) => {\n    let cssText = '';\n    for (const rule of sheet.cssRules) {\n        cssText += rule.cssText;\n    }\n    return unsafeCSS(cssText);\n};\nconst getCompatibleStyle = supportsAdoptingStyleSheets\n    ? (s) => s\n    : (s) => s instanceof CSSStyleSheet ? cssResultFromStyleSheet(s) : s;\n//# sourceMappingURL=css-tag.js.map\n\n//# sourceURL=webpack://@vertzo/app/../../node_modules/@lit/reactive-element/development/css-tag.js?");

/***/ }),

/***/ "../../node_modules/@lit/reactive-element/development/reactive-element.js":
/*!********************************************************************************!*\
  !*** ../../node_modules/@lit/reactive-element/development/reactive-element.js ***!
  \********************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"CSSResult\": () => (/* reexport safe */ _css_tag_js__WEBPACK_IMPORTED_MODULE_0__.CSSResult),\n/* harmony export */   \"adoptStyles\": () => (/* reexport safe */ _css_tag_js__WEBPACK_IMPORTED_MODULE_0__.adoptStyles),\n/* harmony export */   \"css\": () => (/* reexport safe */ _css_tag_js__WEBPACK_IMPORTED_MODULE_0__.css),\n/* harmony export */   \"getCompatibleStyle\": () => (/* reexport safe */ _css_tag_js__WEBPACK_IMPORTED_MODULE_0__.getCompatibleStyle),\n/* harmony export */   \"supportsAdoptingStyleSheets\": () => (/* reexport safe */ _css_tag_js__WEBPACK_IMPORTED_MODULE_0__.supportsAdoptingStyleSheets),\n/* harmony export */   \"unsafeCSS\": () => (/* reexport safe */ _css_tag_js__WEBPACK_IMPORTED_MODULE_0__.unsafeCSS),\n/* harmony export */   \"defaultConverter\": () => (/* binding */ defaultConverter),\n/* harmony export */   \"notEqual\": () => (/* binding */ notEqual),\n/* harmony export */   \"ReactiveElement\": () => (/* binding */ ReactiveElement)\n/* harmony export */ });\n/* harmony import */ var _css_tag_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./css-tag.js */ \"../../node_modules/@lit/reactive-element/development/css-tag.js\");\n/**\n * @license\n * Copyright 2017 Google LLC\n * SPDX-License-Identifier: BSD-3-Clause\n */\nvar _a, _b, _c, _d;\nvar _e;\nvar _f;\n/**\n * Use this module if you want to create your own base class extending\n * [[ReactiveElement]].\n * @packageDocumentation\n */\n\n\nconst DEV_MODE = true;\nlet requestUpdateThenable;\nif (DEV_MODE) {\n    // TODO(sorvell): Add a link to the docs about using dev v. production mode.\n    console.warn(`Running in dev mode. Do not use in production!`);\n    // Issue platform support warning.\n    if (((_a = window.ShadyDOM) === null || _a === void 0 ? void 0 : _a.inUse) &&\n        // eslint-disable-next-line @typescript-eslint/no-explicit-any\n        globalThis['reactiveElementPlatformSupport'] === undefined) {\n        console.warn(`Shadow DOM is being polyfilled via ShadyDOM but ` +\n            `the \\`polyfill-support\\` module has not been loaded.`);\n    }\n    requestUpdateThenable = {\n        then: (onfulfilled, _onrejected) => {\n            console.warn(`\\`requestUpdate\\` no longer returns a Promise.` +\n                `Use \\`updateComplete\\` instead.`);\n            if (onfulfilled !== undefined) {\n                onfulfilled(false);\n            }\n        },\n    };\n}\n/*\n * When using Closure Compiler, JSCompiler_renameProperty(property, object) is\n * replaced at compile time by the munged name for object[property]. We cannot\n * alias this function, so we have to use a small shim that has the same\n * behavior when not compiling.\n */\n/*@__INLINE__*/\nconst JSCompiler_renameProperty = (prop, _obj) => prop;\nconst defaultConverter = {\n    toAttribute(value, type) {\n        switch (type) {\n            case Boolean:\n                value = value ? '' : null;\n                break;\n            case Object:\n            case Array:\n                // if the value is `null` or `undefined` pass this through\n                // to allow removing/no change behavior.\n                value = value == null ? value : JSON.stringify(value);\n                break;\n        }\n        return value;\n    },\n    fromAttribute(value, type) {\n        let fromValue = value;\n        switch (type) {\n            case Boolean:\n                fromValue = value !== null;\n                break;\n            case Number:\n                fromValue = value === null ? null : Number(value);\n                break;\n            case Object:\n            case Array:\n                // Do *not* generate exception when invalid JSON is set as elements\n                // don't normally complain on being mis-configured.\n                // TODO(sorvell): Do generate exception in *dev mode*.\n                try {\n                    // Assert to adhere to Bazel's \"must type assert JSON parse\" rule.\n                    fromValue = JSON.parse(value);\n                }\n                catch (e) {\n                    fromValue = null;\n                }\n                break;\n        }\n        return fromValue;\n    },\n};\n/**\n * Change function that returns true if `value` is different from `oldValue`.\n * This method is used as the default for a property's `hasChanged` function.\n */\nconst notEqual = (value, old) => {\n    // This ensures (old==NaN, value==NaN) always returns false\n    return old !== value && (old === old || value === value);\n};\nconst defaultPropertyDeclaration = {\n    attribute: true,\n    type: String,\n    converter: defaultConverter,\n    reflect: false,\n    hasChanged: notEqual,\n};\n/**\n * The Closure JS Compiler doesn't currently have good support for static\n * property semantics where \"this\" is dynamic (e.g.\n * https://github.com/google/closure-compiler/issues/3177 and others) so we use\n * this hack to bypass any rewriting by the compiler.\n */\nconst finalized = 'finalized';\n/**\n * Base element class which manages element properties and attributes. When\n * properties change, the `update` method is asynchronously called. This method\n * should be supplied by subclassers to render updates as desired.\n * @noInheritDoc\n */\nclass ReactiveElement extends HTMLElement {\n    constructor() {\n        super();\n        this.__instanceProperties = new Map();\n        /**\n         * @category updates\n         */\n        this.isUpdatePending = false;\n        /**\n         * @category updates\n         */\n        this.hasUpdated = false;\n        /**\n         * Name of currently reflecting property\n         */\n        this.__reflectingProperty = null;\n        this._initialize();\n    }\n    /**\n     * @nocollapse\n     */\n    static addInitializer(initializer) {\n        var _a;\n        (_a = this._initializers) !== null && _a !== void 0 ? _a : (this._initializers = []);\n        this._initializers.push(initializer);\n    }\n    /**\n     * Returns a list of attributes corresponding to the registered properties.\n     * @nocollapse\n     * @category attributes\n     */\n    static get observedAttributes() {\n        // note: piggy backing on this to ensure we're finalized.\n        this.finalize();\n        const attributes = [];\n        // Use forEach so this works even if for/of loops are compiled to for loops\n        // expecting arrays\n        this.elementProperties.forEach((v, p) => {\n            const attr = this.__attributeNameForProperty(p, v);\n            if (attr !== undefined) {\n                this.__attributeToPropertyMap.set(attr, p);\n                attributes.push(attr);\n            }\n        });\n        return attributes;\n    }\n    /**\n     * Creates a property accessor on the element prototype if one does not exist\n     * and stores a PropertyDeclaration for the property with the given options.\n     * The property setter calls the property's `hasChanged` property option\n     * or uses a strict identity check to determine whether or not to request\n     * an update.\n     *\n     * This method may be overridden to customize properties; however,\n     * when doing so, it's important to call `super.createProperty` to ensure\n     * the property is setup correctly. This method calls\n     * `getPropertyDescriptor` internally to get a descriptor to install.\n     * To customize what properties do when they are get or set, override\n     * `getPropertyDescriptor`. To customize the options for a property,\n     * implement `createProperty` like this:\n     *\n     * ```ts\n     * static createProperty(name, options) {\n     *   options = Object.assign(options, {myOption: true});\n     *   super.createProperty(name, options);\n     * }\n     * ```\n     *\n     * @nocollapse\n     * @category properties\n     */\n    static createProperty(name, options = defaultPropertyDeclaration) {\n        // if this is a state property, force the attribute to false.\n        if (options.state) {\n            // Cast as any since this is readonly.\n            // eslint-disable-next-line @typescript-eslint/no-explicit-any\n            options.attribute = false;\n        }\n        // Note, since this can be called by the `@property` decorator which\n        // is called before `finalize`, we ensure finalization has been kicked off.\n        this.finalize();\n        this.elementProperties.set(name, options);\n        // Do not generate an accessor if the prototype already has one, since\n        // it would be lost otherwise and that would never be the user's intention;\n        // Instead, we expect users to call `requestUpdate` themselves from\n        // user-defined accessors. Note that if the super has an accessor we will\n        // still overwrite it\n        if (!options.noAccessor && !this.prototype.hasOwnProperty(name)) {\n            const key = typeof name === 'symbol' ? Symbol() : `__${name}`;\n            const descriptor = this.getPropertyDescriptor(name, key, options);\n            if (descriptor !== undefined) {\n                Object.defineProperty(this.prototype, name, descriptor);\n            }\n        }\n    }\n    /**\n     * Returns a property descriptor to be defined on the given named property.\n     * If no descriptor is returned, the property will not become an accessor.\n     * For example,\n     *\n     * ```ts\n     * class MyElement extends LitElement {\n     *   static getPropertyDescriptor(name, key, options) {\n     *     const defaultDescriptor =\n     *         super.getPropertyDescriptor(name, key, options);\n     *     const setter = defaultDescriptor.set;\n     *     return {\n     *       get: defaultDescriptor.get,\n     *       set(value) {\n     *         setter.call(this, value);\n     *         // custom action.\n     *       },\n     *       configurable: true,\n     *       enumerable: true\n     *     }\n     *   }\n     * }\n     * ```\n     *\n     * @nocollapse\n     * @category properties\n     */\n    static getPropertyDescriptor(name, key, options) {\n        return {\n            // eslint-disable-next-line @typescript-eslint/no-explicit-any\n            get() {\n                return this[key];\n            },\n            set(value) {\n                const oldValue = this[name];\n                this[key] = value;\n                this.requestUpdate(name, oldValue, options);\n            },\n            configurable: true,\n            enumerable: true,\n        };\n    }\n    /**\n     * Returns the property options associated with the given property.\n     * These options are defined with a PropertyDeclaration via the `properties`\n     * object or the `@property` decorator and are registered in\n     * `createProperty(...)`.\n     *\n     * Note, this method should be considered \"final\" and not overridden. To\n     * customize the options for a given property, override `createProperty`.\n     *\n     * @nocollapse\n     * @final\n     * @category properties\n     */\n    static getPropertyOptions(name) {\n        return this.elementProperties.get(name) || defaultPropertyDeclaration;\n    }\n    /**\n     * Creates property accessors for registered properties, sets up element\n     * styling, and ensures any superclasses are also finalized. Returns true if\n     * the element was finalized.\n     * @nocollapse\n     */\n    static finalize() {\n        if (this.hasOwnProperty(finalized)) {\n            return false;\n        }\n        this[finalized] = true;\n        // finalize any superclasses\n        const superCtor = Object.getPrototypeOf(this);\n        superCtor.finalize();\n        this.elementProperties = new Map(superCtor.elementProperties);\n        // initialize Map populated in observedAttributes\n        this.__attributeToPropertyMap = new Map();\n        // make any properties\n        // Note, only process \"own\" properties since this element will inherit\n        // any properties defined on the superClass, and finalization ensures\n        // the entire prototype chain is finalized.\n        if (this.hasOwnProperty(JSCompiler_renameProperty('properties', this))) {\n            const props = this.properties;\n            // support symbols in properties (IE11 does not support this)\n            const propKeys = [\n                ...Object.getOwnPropertyNames(props),\n                ...Object.getOwnPropertySymbols(props),\n            ];\n            // This for/of is ok because propKeys is an array\n            for (const p of propKeys) {\n                // note, use of `any` is due to TypeScript lack of support for symbol in\n                // index types\n                // eslint-disable-next-line @typescript-eslint/no-explicit-any\n                this.createProperty(p, props[p]);\n            }\n        }\n        this.elementStyles = this.finalizeStyles(this.styles);\n        // DEV mode warnings\n        if (DEV_MODE) {\n            // eslint-disable-next-line @typescript-eslint/no-explicit-any\n            const warnRemoved = (obj, name) => {\n                if (obj[name] !== undefined) {\n                    console.warn(`\\`${name}\\` is implemented. It ` +\n                        `has been removed from this version of ReactiveElement.` +\n                        ` See the changelog at https://github.com/lit/lit/blob/main/packages/reactive-element/CHANGELOG.md`);\n                }\n            };\n            [`initialize`, `requestUpdateInternal`, `_getUpdateComplete`].forEach((name) => \n            // eslint-disable-next-line @typescript-eslint/no-explicit-any\n            warnRemoved(this.prototype, name));\n        }\n        return true;\n    }\n    /**\n     * Takes the styles the user supplied via the `static styles` property and\n     * returns the array of styles to apply to the element.\n     * Override this method to integrate into a style management system.\n     *\n     * Styles are deduplicated preserving the _last_ instance in the list. This\n     * is a performance optimization to avoid duplicated styles that can occur\n     * especially when composing via subclassing. The last item is kept to try\n     * to preserve the cascade order with the assumption that it's most important\n     * that last added styles override previous styles.\n     *\n     * @nocollapse\n     * @category styles\n     */\n    static finalizeStyles(styles) {\n        const elementStyles = [];\n        if (Array.isArray(styles)) {\n            // Dedupe the flattened array in reverse order to preserve the last items.\n            // TODO(sorvell): casting to Array<unknown> works around TS error that\n            // appears to come from trying to flatten a type CSSResultArray.\n            const set = new Set(styles.flat(Infinity).reverse());\n            // Then preserve original order by adding the set items in reverse order.\n            for (const s of set) {\n                elementStyles.unshift((0,_css_tag_js__WEBPACK_IMPORTED_MODULE_0__.getCompatibleStyle)(s));\n            }\n        }\n        else if (styles !== undefined) {\n            elementStyles.push((0,_css_tag_js__WEBPACK_IMPORTED_MODULE_0__.getCompatibleStyle)(styles));\n        }\n        return elementStyles;\n    }\n    /**\n     * Returns the property name for the given attribute `name`.\n     * @nocollapse\n     */\n    static __attributeNameForProperty(name, options) {\n        const attribute = options.attribute;\n        return attribute === false\n            ? undefined\n            : typeof attribute === 'string'\n                ? attribute\n                : typeof name === 'string'\n                    ? name.toLowerCase()\n                    : undefined;\n    }\n    /**\n     * Internal only override point for customizing work done when elements\n     * are constructed.\n     *\n     * @internal\n     */\n    _initialize() {\n        var _a;\n        this.__updatePromise = new Promise((res) => (this.enableUpdating = res));\n        this._$changedProperties = new Map();\n        this.__saveInstanceProperties();\n        // ensures first update will be caught by an early access of\n        // `updateComplete`\n        this.requestUpdate();\n        (_a = this.constructor._initializers) === null || _a === void 0 ? void 0 : _a.forEach((i) => i(this));\n    }\n    /**\n     * @category controllers\n     */\n    addController(controller) {\n        var _a, _b;\n        ((_a = this.__controllers) !== null && _a !== void 0 ? _a : (this.__controllers = [])).push(controller);\n        // If a controller is added after the element has been connected,\n        // call hostConnected. Note, re-using existence of `renderRoot` here\n        // (which is set in connectedCallback) to avoid the need to track a\n        // first connected state.\n        if (this.renderRoot !== undefined && this.isConnected) {\n            (_b = controller.hostConnected) === null || _b === void 0 ? void 0 : _b.call(controller);\n        }\n    }\n    /**\n     * @category controllers\n     */\n    removeController(controller) {\n        var _a;\n        // Note, if the indexOf is -1, the >>> will flip the sign which makes the\n        // splice do nothing.\n        (_a = this.__controllers) === null || _a === void 0 ? void 0 : _a.splice(this.__controllers.indexOf(controller) >>> 0, 1);\n    }\n    /**\n     * Fixes any properties set on the instance before upgrade time.\n     * Otherwise these would shadow the accessor and break these properties.\n     * The properties are stored in a Map which is played back after the\n     * constructor runs. Note, on very old versions of Safari (<=9) or Chrome\n     * (<=41), properties created for native platform properties like (`id` or\n     * `name`) may not have default values set in the element constructor. On\n     * these browsers native properties appear on instances and therefore their\n     * default value will overwrite any element default (e.g. if the element sets\n     * this.id = 'id' in the constructor, the 'id' will become '' since this is\n     * the native platform default).\n     */\n    __saveInstanceProperties() {\n        // Use forEach so this works even if for/of loops are compiled to for loops\n        // expecting arrays\n        this.constructor.elementProperties.forEach((_v, p) => {\n            if (this.hasOwnProperty(p)) {\n                this.__instanceProperties.set(p, this[p]);\n                delete this[p];\n            }\n        });\n    }\n    /**\n     * Returns the node into which the element should render and by default\n     * creates and returns an open shadowRoot. Implement to customize where the\n     * element's DOM is rendered. For example, to render into the element's\n     * childNodes, return `this`.\n     *\n     * @return Returns a node into which to render.\n     * @category rendering\n     */\n    createRenderRoot() {\n        var _a;\n        const renderRoot = (_a = this.shadowRoot) !== null && _a !== void 0 ? _a : this.attachShadow(this.constructor.shadowRootOptions);\n        (0,_css_tag_js__WEBPACK_IMPORTED_MODULE_0__.adoptStyles)(renderRoot, this.constructor.elementStyles);\n        return renderRoot;\n    }\n    /**\n     * On first connection, creates the element's renderRoot, sets up\n     * element styling, and enables updating.\n     * @category lifecycle\n     */\n    connectedCallback() {\n        var _a;\n        // create renderRoot before first update.\n        if (this.renderRoot === undefined) {\n            this.renderRoot = this.createRenderRoot();\n        }\n        this.enableUpdating(true);\n        (_a = this.__controllers) === null || _a === void 0 ? void 0 : _a.forEach((c) => { var _a; return (_a = c.hostConnected) === null || _a === void 0 ? void 0 : _a.call(c); });\n    }\n    /**\n     * Note, this method should be considered final and not overridden. It is\n     * overridden on the element instance with a function that triggers the first\n     * update.\n     * @category updates\n     */\n    enableUpdating(_requestedUpdate) { }\n    /**\n     * Allows for `super.disconnectedCallback()` in extensions while\n     * reserving the possibility of making non-breaking feature additions\n     * when disconnecting at some point in the future.\n     * @category lifecycle\n     */\n    disconnectedCallback() {\n        var _a;\n        (_a = this.__controllers) === null || _a === void 0 ? void 0 : _a.forEach((c) => { var _a; return (_a = c.hostDisconnected) === null || _a === void 0 ? void 0 : _a.call(c); });\n    }\n    /**\n     * Synchronizes property values when attributes change.\n     * @category attributes\n     */\n    attributeChangedCallback(name, _old, value) {\n        this._$attributeToProperty(name, value);\n    }\n    __propertyToAttribute(name, value, options = defaultPropertyDeclaration) {\n        var _a, _b;\n        const attr = this.constructor.__attributeNameForProperty(name, options);\n        if (attr !== undefined && options.reflect === true) {\n            const toAttribute = (_b = (_a = options.converter) === null || _a === void 0 ? void 0 : _a.toAttribute) !== null && _b !== void 0 ? _b : defaultConverter.toAttribute;\n            const attrValue = toAttribute(value, options.type);\n            if (DEV_MODE &&\n                this.constructor.enabledWarnings.indexOf('migration') >= 0 &&\n                attrValue === undefined) {\n                console.warn(`The attribute value for the ` +\n                    `${name} property is undefined. The attribute will be ` +\n                    `removed, but in the previous version of ReactiveElement, the ` +\n                    `attribute would not have changed.`);\n            }\n            // Track if the property is being reflected to avoid\n            // setting the property again via `attributeChangedCallback`. Note:\n            // 1. this takes advantage of the fact that the callback is synchronous.\n            // 2. will behave incorrectly if multiple attributes are in the reaction\n            // stack at time of calling. However, since we process attributes\n            // in `update` this should not be possible (or an extreme corner case\n            // that we'd like to discover).\n            // mark state reflecting\n            this.__reflectingProperty = name;\n            if (attrValue == null) {\n                this.removeAttribute(attr);\n            }\n            else {\n                this.setAttribute(attr, attrValue);\n            }\n            // mark state not reflecting\n            this.__reflectingProperty = null;\n        }\n    }\n    /** @internal */\n    _$attributeToProperty(name, value) {\n        var _a, _b, _c;\n        const ctor = this.constructor;\n        // Note, hint this as an `AttributeMap` so closure clearly understands\n        // the type; it has issues with tracking types through statics\n        const propName = ctor.__attributeToPropertyMap.get(name);\n        // Use tracking info to avoid reflecting a property value to an attribute\n        // if it was just set because the attribute changed.\n        if (propName !== undefined && this.__reflectingProperty !== propName) {\n            const options = ctor.getPropertyOptions(propName);\n            const converter = options.converter;\n            const fromAttribute = (_c = (_b = (_a = converter) === null || _a === void 0 ? void 0 : _a.fromAttribute) !== null && _b !== void 0 ? _b : (typeof converter === 'function'\n                ? converter\n                : null)) !== null && _c !== void 0 ? _c : defaultConverter.fromAttribute;\n            // mark state reflecting\n            this.__reflectingProperty = propName;\n            // eslint-disable-next-line @typescript-eslint/no-explicit-any\n            this[propName] = fromAttribute(value, options.type);\n            // mark state not reflecting\n            this.__reflectingProperty = null;\n        }\n    }\n    /**\n     * Requests an update which is processed asynchronously. This should be called\n     * when an element should update based on some state not triggered by setting\n     * a reactive property. In this case, pass no arguments. It should also be\n     * called when manually implementing a property setter. In this case, pass the\n     * property `name` and `oldValue` to ensure that any configured property\n     * options are honored.\n     *\n     * @param name name of requesting property\n     * @param oldValue old value of requesting property\n     * @param options property options to use instead of the previously\n     *     configured options\n     * @category updates\n     */\n    requestUpdate(name, oldValue, options) {\n        let shouldRequestUpdate = true;\n        // If we have a property key, perform property update steps.\n        if (name !== undefined) {\n            options =\n                options ||\n                    this.constructor.getPropertyOptions(name);\n            const hasChanged = options.hasChanged || notEqual;\n            if (hasChanged(this[name], oldValue)) {\n                if (!this._$changedProperties.has(name)) {\n                    this._$changedProperties.set(name, oldValue);\n                }\n                // Add to reflecting properties set.\n                // Note, it's important that every change has a chance to add the\n                // property to `_reflectingProperties`. This ensures setting\n                // attribute + property reflects correctly.\n                if (options.reflect === true && this.__reflectingProperty !== name) {\n                    if (this.__reflectingProperties === undefined) {\n                        this.__reflectingProperties = new Map();\n                    }\n                    this.__reflectingProperties.set(name, options);\n                }\n            }\n            else {\n                // Abort the request if the property should not be considered changed.\n                shouldRequestUpdate = false;\n            }\n        }\n        if (!this.isUpdatePending && shouldRequestUpdate) {\n            this.__updatePromise = this.__enqueueUpdate();\n        }\n        // Note, since this no longer returns a promise, in dev mode we return a\n        // thenable which warns if it's called.\n        return DEV_MODE ? requestUpdateThenable : undefined;\n    }\n    /**\n     * Sets up the element to asynchronously update.\n     */\n    async __enqueueUpdate() {\n        this.isUpdatePending = true;\n        try {\n            // Ensure any previous update has resolved before updating.\n            // This `await` also ensures that property changes are batched.\n            await this.__updatePromise;\n        }\n        catch (e) {\n            // Refire any previous errors async so they do not disrupt the update\n            // cycle. Errors are refired so developers have a chance to observe\n            // them, and this can be done by implementing\n            // `window.onunhandledrejection`.\n            Promise.reject(e);\n        }\n        const result = this.performUpdate();\n        // If `performUpdate` returns a Promise, we await it. This is done to\n        // enable coordinating updates with a scheduler. Note, the result is\n        // checked to avoid delaying an additional microtask unless we need to.\n        if (result != null) {\n            await result;\n        }\n        return !this.isUpdatePending;\n    }\n    /**\n     * Performs an element update. Note, if an exception is thrown during the\n     * update, `firstUpdated` and `updated` will not be called.\n     *\n     * You can override this method to change the timing of updates. If this\n     * method is overridden, `super.performUpdate()` must be called.\n     *\n     * For instance, to schedule updates to occur just before the next frame:\n     *\n     * ```js\n     * protected async performUpdate(): Promise<unknown> {\n     *   await new Promise((resolve) => requestAnimationFrame(() => resolve()));\n     *   super.performUpdate();\n     * }\n     * ```\n     * @category updates\n     */\n    performUpdate() {\n        var _a;\n        // Abort any update if one is not pending when this is called.\n        // This can happen if `performUpdate` is called early to \"flush\"\n        // the update.\n        if (!this.isUpdatePending) {\n            return;\n        }\n        // create renderRoot before first update.\n        if (!this.hasUpdated) {\n            // Produce warning if any class properties are shadowed by class fields\n            if (DEV_MODE) {\n                const shadowedProperties = [];\n                this.constructor.elementProperties.forEach((_v, p) => {\n                    var _a;\n                    if (this.hasOwnProperty(p) && !((_a = this.__instanceProperties) === null || _a === void 0 ? void 0 : _a.has(p))) {\n                        shadowedProperties.push(p);\n                    }\n                });\n                if (shadowedProperties.length) {\n                    // TODO(sorvell): Link to docs explanation of this issue.\n                    console.warn(`The following properties will not trigger updates as expected ` +\n                        `because they are set using class fields: ` +\n                        `${shadowedProperties.join(', ')}. ` +\n                        `Native class fields and some compiled output will overwrite ` +\n                        `accessors used for detecting changes. To fix this issue, ` +\n                        `either initialize properties in the constructor or adjust ` +\n                        `your compiler settings; for example, for TypeScript set ` +\n                        `\\`useDefineForClassFields: false\\` in your \\`tsconfig.json\\`.`);\n                }\n            }\n        }\n        // Mixin instance properties once, if they exist.\n        if (this.__instanceProperties) {\n            // Use forEach so this works even if for/of loops are compiled to for loops\n            // expecting arrays\n            // eslint-disable-next-line @typescript-eslint/no-explicit-any\n            this.__instanceProperties.forEach((v, p) => (this[p] = v));\n            this.__instanceProperties = undefined;\n        }\n        let shouldUpdate = false;\n        const changedProperties = this._$changedProperties;\n        try {\n            shouldUpdate = this.shouldUpdate(changedProperties);\n            if (shouldUpdate) {\n                this.willUpdate(changedProperties);\n                (_a = this.__controllers) === null || _a === void 0 ? void 0 : _a.forEach((c) => { var _a; return (_a = c.hostUpdate) === null || _a === void 0 ? void 0 : _a.call(c); });\n                this.update(changedProperties);\n            }\n            else {\n                this.__markUpdated();\n            }\n        }\n        catch (e) {\n            // Prevent `firstUpdated` and `updated` from running when there's an\n            // update exception.\n            shouldUpdate = false;\n            // Ensure element can accept additional updates after an exception.\n            this.__markUpdated();\n            throw e;\n        }\n        // The update is no longer considered pending and further updates are now allowed.\n        if (shouldUpdate) {\n            this._$didUpdate(changedProperties);\n        }\n    }\n    /**\n     * @category updates\n     */\n    willUpdate(_changedProperties) { }\n    // Note, this is an override point for polyfill-support.\n    // @internal\n    _$didUpdate(changedProperties) {\n        var _a;\n        (_a = this.__controllers) === null || _a === void 0 ? void 0 : _a.forEach((c) => { var _a; return (_a = c.hostUpdated) === null || _a === void 0 ? void 0 : _a.call(c); });\n        if (!this.hasUpdated) {\n            this.hasUpdated = true;\n            this.firstUpdated(changedProperties);\n        }\n        this.updated(changedProperties);\n        if (DEV_MODE &&\n            this.isUpdatePending &&\n            this.constructor.enabledWarnings.indexOf('change-in-update') >= 0) {\n            console.warn(`An update was requested (generally because a property was set) ` +\n                `after an update completed, causing a new update to be scheduled. ` +\n                `This is inefficient and should be avoided unless the next update ` +\n                `can only be scheduled as a side effect of the previous update.`);\n        }\n    }\n    __markUpdated() {\n        this._$changedProperties = new Map();\n        this.isUpdatePending = false;\n    }\n    /**\n     * Returns a Promise that resolves when the element has completed updating.\n     * The Promise value is a boolean that is `true` if the element completed the\n     * update without triggering another update. The Promise result is `false` if\n     * a property was set inside `updated()`. If the Promise is rejected, an\n     * exception was thrown during the update.\n     *\n     * To await additional asynchronous work, override the `getUpdateComplete`\n     * method. For example, it is sometimes useful to await a rendered element\n     * before fulfilling this Promise. To do this, first await\n     * `super.getUpdateComplete()`, then any subsequent state.\n     *\n     * @return A promise of a boolean that indicates if the update resolved\n     *     without triggering another update.\n     * @category updates\n     */\n    get updateComplete() {\n        return this.getUpdateComplete();\n    }\n    /**\n     * Override point for the `updateComplete` promise.\n     *\n     * It is not safe to override the `updateComplete` getter directly due to a\n     * limitation in TypeScript which means it is not possible to call a\n     * superclass getter (e.g. `super.updateComplete.then(...)`) when the target\n     * language is ES5 (https://github.com/microsoft/TypeScript/issues/338).\n     * This method should be overridden instead. For example:\n     *\n     * ```js\n     * class MyElement extends LitElement {\n     *   async getUpdateComplete() {\n     *     await super.getUpdateComplete();\n     *     await this._myChild.updateComplete;\n     *   }\n     * }\n     * ```\n     * @category updates\n     */\n    getUpdateComplete() {\n        return this.__updatePromise;\n    }\n    /**\n     * Controls whether or not `update` should be called when the element requests\n     * an update. By default, this method always returns `true`, but this can be\n     * customized to control when to update.\n     *\n     * @param _changedProperties Map of changed properties with old values\n     * @category updates\n     */\n    shouldUpdate(_changedProperties) {\n        return true;\n    }\n    /**\n     * Updates the element. This method reflects property values to attributes.\n     * It can be overridden to render and keep updated element DOM.\n     * Setting properties inside this method will *not* trigger\n     * another update.\n     *\n     * @param _changedProperties Map of changed properties with old values\n     * @category updates\n     */\n    update(_changedProperties) {\n        if (this.__reflectingProperties !== undefined) {\n            // Use forEach so this works even if for/of loops are compiled to for\n            // loops expecting arrays\n            this.__reflectingProperties.forEach((v, k) => this.__propertyToAttribute(k, this[k], v));\n            this.__reflectingProperties = undefined;\n        }\n        this.__markUpdated();\n    }\n    /**\n     * Invoked whenever the element is updated. Implement to perform\n     * post-updating tasks via DOM APIs, for example, focusing an element.\n     *\n     * Setting properties inside this method will trigger the element to update\n     * again after this update cycle completes.\n     *\n     * @param _changedProperties Map of changed properties with old values\n     * @category updates\n     */\n    updated(_changedProperties) { }\n    /**\n     * Invoked when the element is first updated. Implement to perform one time\n     * work on the element after update.\n     *\n     * Setting properties inside this method will trigger the element to update\n     * again after this update cycle completes.\n     *\n     * @param _changedProperties Map of changed properties with old values\n     * @category updates\n     */\n    firstUpdated(_changedProperties) { }\n}\n_f = finalized;\n/**\n * Marks class as having finished creating properties.\n */\nReactiveElement[_f] = true;\n/**\n * Memoized list of all element properties, including any superclass properties.\n * Created lazily on user subclasses when finalizing the class.\n * @nocollapse\n * @category properties\n */\nReactiveElement.elementProperties = new Map();\n/**\n * Memoized list of all element styles.\n * Created lazily on user subclasses when finalizing the class.\n * @nocollapse\n * @category styles\n */\nReactiveElement.elementStyles = [];\n/**\n * Options used when calling `attachShadow`. Set this property to customize\n * the options for the shadowRoot; for example, to create a closed\n * shadowRoot: `{mode: 'closed'}`.\n *\n * Note, these options are used in `createRenderRoot`. If this method\n * is customized, options should be respected if possible.\n * @nocollapse\n * @category rendering\n */\nReactiveElement.shadowRootOptions = { mode: 'open' };\n// Apply polyfills if available\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\n(_c = (_b = globalThis)['reactiveElementPlatformSupport']) === null || _c === void 0 ? void 0 : _c.call(_b, { ReactiveElement });\n// Dev mode warnings...\nif (DEV_MODE) {\n    // Default warning set.\n    ReactiveElement.enabledWarnings = ['change-in-update'];\n    const ensureOwnWarnings = function (ctor) {\n        if (!ctor.hasOwnProperty(JSCompiler_renameProperty('enabledWarnings', ctor))) {\n            ctor.enabledWarnings = ctor.enabledWarnings.slice();\n        }\n    };\n    ReactiveElement.enableWarning = function (warning) {\n        ensureOwnWarnings(this);\n        if (this.enabledWarnings.indexOf(warning) < 0) {\n            this.enabledWarnings.push(warning);\n        }\n    };\n    ReactiveElement.disableWarning = function (warning) {\n        ensureOwnWarnings(this);\n        const i = this.enabledWarnings.indexOf(warning);\n        if (i >= 0) {\n            this.enabledWarnings.splice(i, 1);\n        }\n    };\n}\n// IMPORTANT: do not change the property name or the assignment expression.\n// This line will be used in regexes to search for ReactiveElement usage.\n// TODO(justinfagnani): inject version number at build time\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\n((_d = (_e = globalThis)['reactiveElementVersions']) !== null && _d !== void 0 ? _d : (_e['reactiveElementVersions'] = [])).push('1.0.0-rc.3');\n//# sourceMappingURL=reactive-element.js.map\n\n//# sourceURL=webpack://@vertzo/app/../../node_modules/@lit/reactive-element/development/reactive-element.js?");

/***/ }),

/***/ "../../node_modules/lit-element/development/lit-element.js":
/*!*****************************************************************!*\
  !*** ../../node_modules/lit-element/development/lit-element.js ***!
  \*****************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"CSSResult\": () => (/* reexport safe */ _lit_reactive_element__WEBPACK_IMPORTED_MODULE_0__.CSSResult),\n/* harmony export */   \"ReactiveElement\": () => (/* reexport safe */ _lit_reactive_element__WEBPACK_IMPORTED_MODULE_0__.ReactiveElement),\n/* harmony export */   \"adoptStyles\": () => (/* reexport safe */ _lit_reactive_element__WEBPACK_IMPORTED_MODULE_0__.adoptStyles),\n/* harmony export */   \"css\": () => (/* reexport safe */ _lit_reactive_element__WEBPACK_IMPORTED_MODULE_0__.css),\n/* harmony export */   \"defaultConverter\": () => (/* reexport safe */ _lit_reactive_element__WEBPACK_IMPORTED_MODULE_0__.defaultConverter),\n/* harmony export */   \"getCompatibleStyle\": () => (/* reexport safe */ _lit_reactive_element__WEBPACK_IMPORTED_MODULE_0__.getCompatibleStyle),\n/* harmony export */   \"notEqual\": () => (/* reexport safe */ _lit_reactive_element__WEBPACK_IMPORTED_MODULE_0__.notEqual),\n/* harmony export */   \"supportsAdoptingStyleSheets\": () => (/* reexport safe */ _lit_reactive_element__WEBPACK_IMPORTED_MODULE_0__.supportsAdoptingStyleSheets),\n/* harmony export */   \"unsafeCSS\": () => (/* reexport safe */ _lit_reactive_element__WEBPACK_IMPORTED_MODULE_0__.unsafeCSS),\n/* harmony export */   \"INTERNAL\": () => (/* reexport safe */ lit_html__WEBPACK_IMPORTED_MODULE_1__.INTERNAL),\n/* harmony export */   \"_$LH\": () => (/* reexport safe */ lit_html__WEBPACK_IMPORTED_MODULE_1__._$LH),\n/* harmony export */   \"html\": () => (/* reexport safe */ lit_html__WEBPACK_IMPORTED_MODULE_1__.html),\n/* harmony export */   \"noChange\": () => (/* reexport safe */ lit_html__WEBPACK_IMPORTED_MODULE_1__.noChange),\n/* harmony export */   \"nothing\": () => (/* reexport safe */ lit_html__WEBPACK_IMPORTED_MODULE_1__.nothing),\n/* harmony export */   \"render\": () => (/* reexport safe */ lit_html__WEBPACK_IMPORTED_MODULE_1__.render),\n/* harmony export */   \"svg\": () => (/* reexport safe */ lit_html__WEBPACK_IMPORTED_MODULE_1__.svg),\n/* harmony export */   \"UpdatingElement\": () => (/* binding */ UpdatingElement),\n/* harmony export */   \"LitElement\": () => (/* binding */ LitElement),\n/* harmony export */   \"_$LE\": () => (/* binding */ _$LE)\n/* harmony export */ });\n/* harmony import */ var _lit_reactive_element__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @lit/reactive-element */ \"../../node_modules/@lit/reactive-element/development/reactive-element.js\");\n/* harmony import */ var lit_html__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! lit-html */ \"../../node_modules/lit-html/development/lit-html.js\");\n/**\n * @license\n * Copyright 2017 Google LLC\n * SPDX-License-Identifier: BSD-3-Clause\n */\nvar _a, _b, _c, _d, _e;\nvar _f;\n/**\n * The main LitElement module, which defines the [[`LitElement`]] base class and\n * related APIs.\n *\n *  LitElement components can define a template and a set of observed\n * properties. Changing an observed property triggers a re-render of the\n * element.\n *\n *  Import [[`LitElement`]] and [[`html`]] from this module to create a\n * component:\n *\n *  ```js\n * import {LitElement, html} from 'lit-element';\n *\n * class MyElement extends LitElement {\n *\n *   // Declare observed properties\n *   static get properties() {\n *     return {\n *       adjective: {}\n *     }\n *   }\n *\n *   constructor() {\n *     this.adjective = 'awesome';\n *   }\n *\n *   // Define the element's template\n *   render() {\n *     return html`<p>your ${adjective} template here</p>`;\n *   }\n * }\n *\n * customElements.define('my-element', MyElement);\n * ```\n *\n * `LitElement` extends [[`ReactiveElement`]] and adds lit-html templating.\n * The `ReactiveElement` class is provided for users that want to build\n * their own custom element base classes that don't use lit-html.\n *\n * @packageDocumentation\n */\n\n\n\n\n// For backwards compatibility export ReactiveElement as UpdatingElement. Note,\n// IE transpilation requires exporting like this.\nconst UpdatingElement = _lit_reactive_element__WEBPACK_IMPORTED_MODULE_0__.ReactiveElement;\nconst DEV_MODE = true;\n/**\n * Base element class that manages element properties and attributes, and\n * renders a lit-html template.\n *\n * To define a component, subclass `LitElement` and implement a\n * `render` method to provide the component's template. Define properties\n * using the [[`properties`]] property or the [[`property`]] decorator.\n */\nclass LitElement extends _lit_reactive_element__WEBPACK_IMPORTED_MODULE_0__.ReactiveElement {\n    constructor() {\n        super(...arguments);\n        /**\n         * @category rendering\n         */\n        this.renderOptions = { host: this };\n        this.__childPart = undefined;\n    }\n    /**\n     * @category rendering\n     */\n    createRenderRoot() {\n        var _a;\n        var _b;\n        const renderRoot = super.createRenderRoot();\n        // When adoptedStyleSheets are shimmed, they are inserted into the\n        // shadowRoot by createRenderRoot. Adjust the renderBefore node so that\n        // any styles in Lit content render before adoptedStyleSheets. This is\n        // important so that adoptedStyleSheets have precedence over styles in\n        // the shadowRoot.\n        (_a = (_b = this.renderOptions).renderBefore) !== null && _a !== void 0 ? _a : (_b.renderBefore = renderRoot.firstChild);\n        return renderRoot;\n    }\n    /**\n     * Updates the element. This method reflects property values to attributes\n     * and calls `render` to render DOM via lit-html. Setting properties inside\n     * this method will *not* trigger another update.\n     * @param changedProperties Map of changed properties with old values\n     * @category updates\n     */\n    update(changedProperties) {\n        // Setting properties in `render` should not trigger an update. Since\n        // updates are allowed after super.update, it's important to call `render`\n        // before that.\n        const value = this.render();\n        super.update(changedProperties);\n        this.__childPart = (0,lit_html__WEBPACK_IMPORTED_MODULE_1__.render)(value, this.renderRoot, this.renderOptions);\n    }\n    // TODO(kschaaf): Consider debouncing directive disconnection so element moves\n    // do not thrash directive callbacks\n    // https://github.com/lit/lit/issues/1457\n    /**\n     * @category lifecycle\n     */\n    connectedCallback() {\n        var _a;\n        super.connectedCallback();\n        (_a = this.__childPart) === null || _a === void 0 ? void 0 : _a.setConnected(true);\n    }\n    /**\n     * @category lifecycle\n     */\n    disconnectedCallback() {\n        var _a;\n        super.disconnectedCallback();\n        (_a = this.__childPart) === null || _a === void 0 ? void 0 : _a.setConnected(false);\n    }\n    /**\n     * Invoked on each update to perform rendering tasks. This method may return\n     * any value renderable by lit-html's `ChildPart` - typically a\n     * `TemplateResult`. Setting properties inside this method will *not* trigger\n     * the element to update.\n     * @category rendering\n     */\n    render() {\n        return lit_html__WEBPACK_IMPORTED_MODULE_1__.noChange;\n    }\n}\n/**\n * Ensure this class is marked as `finalized` as an optimization ensuring\n * it will not needlessly try to `finalize`.\n *\n * Note this property name is a string to prevent breaking Closure JS Compiler\n * optimizations. See @lit/reactive-element for more information.\n */\nLitElement['finalized'] = true;\n// This property needs to remain unminified.\nLitElement['_$litElement$'] = true;\n// Install hydration if available\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\n(_b = (_a = globalThis)['litElementHydrateSupport']) === null || _b === void 0 ? void 0 : _b.call(_a, { LitElement });\n// Apply polyfills if available\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\n(_d = (_c = globalThis)['litElementPlatformSupport']) === null || _d === void 0 ? void 0 : _d.call(_c, { LitElement });\n// DEV mode warnings\nif (DEV_MODE) {\n    // Note, for compatibility with closure compilation, this access\n    // needs to be as a string property index.\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    LitElement['finalize'] = function () {\n        // eslint-disable-next-line @typescript-eslint/no-explicit-any\n        const finalized = _lit_reactive_element__WEBPACK_IMPORTED_MODULE_0__.ReactiveElement.finalize.call(this);\n        if (!finalized) {\n            return false;\n        }\n        // eslint-disable-next-line @typescript-eslint/no-explicit-any\n        const warnRemoved = (obj, name) => {\n            if (obj[name] !== undefined) {\n                console.warn(`\\`${name}\\` is implemented. It ` +\n                    `has been removed from this version of LitElement. `\n                // TODO(sorvell): add link to changelog when location has stabilized.\n                // + See the changelog at https://github.com/lit/lit/blob/main/packages/lit-element/CHANGELOG.md`\n                );\n            }\n        };\n        [`render`, `getStyles`].forEach((name) => \n        // eslint-disable-next-line @typescript-eslint/no-explicit-any\n        warnRemoved(this, name));\n        [`adoptStyles`].forEach((name) => \n        // eslint-disable-next-line @typescript-eslint/no-explicit-any\n        warnRemoved(this.prototype, name));\n        return true;\n    };\n}\n/**\n * END USERS SHOULD NOT RELY ON THIS OBJECT.\n *\n * Private exports for use by other Lit packages, not intended for use by\n * external users.\n *\n * We currently do not make a mangled rollup build of the lit-ssr code. In order\n * to keep a number of (otherwise private) top-level exports  mangled in the\n * client side code, we export a _$LE object containing those members (or\n * helper methods for accessing private fields of those members), and then\n * re-export them for use in lit-ssr. This keeps lit-ssr agnostic to whether the\n * client-side code is being used in `dev` mode or `prod` mode.\n *\n * This has a unique name, to disambiguate it from private exports in\n * lit-html, since this module re-exports all of lit-html.\n *\n * @private\n */\nconst _$LE = {\n    _$attributeToProperty: (el, name, value) => {\n        // eslint-disable-next-line\n        el._$attributeToProperty(name, value);\n    },\n    // eslint-disable-next-line\n    _$changedProperties: (el) => el._$changedProperties,\n};\n// IMPORTANT: do not change the property name or the assignment expression.\n// This line will be used in regexes to search for LitElement usage.\n// TODO(justinfagnani): inject version number at build time\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\n((_e = (_f = globalThis)['litElementVersions']) !== null && _e !== void 0 ? _e : (_f['litElementVersions'] = [])).push('3.0.0-rc.3');\n//# sourceMappingURL=lit-element.js.map\n\n//# sourceURL=webpack://@vertzo/app/../../node_modules/lit-element/development/lit-element.js?");

/***/ }),

/***/ "../../node_modules/lit-html/development/directive-helpers.js":
/*!********************************************************************!*\
  !*** ../../node_modules/lit-html/development/directive-helpers.js ***!
  \********************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"isPrimitive\": () => (/* binding */ isPrimitive),\n/* harmony export */   \"TemplateResultType\": () => (/* binding */ TemplateResultType),\n/* harmony export */   \"isTemplateResult\": () => (/* binding */ isTemplateResult),\n/* harmony export */   \"isDirectiveResult\": () => (/* binding */ isDirectiveResult),\n/* harmony export */   \"getDirectiveClass\": () => (/* binding */ getDirectiveClass),\n/* harmony export */   \"isSingleExpression\": () => (/* binding */ isSingleExpression),\n/* harmony export */   \"insertPart\": () => (/* binding */ insertPart),\n/* harmony export */   \"setChildPartValue\": () => (/* binding */ setChildPartValue),\n/* harmony export */   \"setCommittedValue\": () => (/* binding */ setCommittedValue),\n/* harmony export */   \"getCommittedValue\": () => (/* binding */ getCommittedValue),\n/* harmony export */   \"removePart\": () => (/* binding */ removePart),\n/* harmony export */   \"clearPart\": () => (/* binding */ clearPart)\n/* harmony export */ });\n/* harmony import */ var _lit_html_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./lit-html.js */ \"../../node_modules/lit-html/development/lit-html.js\");\n/**\n * @license\n * Copyright 2020 Google LLC\n * SPDX-License-Identifier: BSD-3-Clause\n */\nvar _a, _b;\n\nconst { _ChildPart: ChildPart } = _lit_html_js__WEBPACK_IMPORTED_MODULE_0__._$LH;\nconst ENABLE_SHADYDOM_NOPATCH = true;\nconst wrap = ENABLE_SHADYDOM_NOPATCH &&\n    ((_a = window.ShadyDOM) === null || _a === void 0 ? void 0 : _a.inUse) &&\n    ((_b = window.ShadyDOM) === null || _b === void 0 ? void 0 : _b.noPatch) === true\n    ? window.ShadyDOM.wrap\n    : (node) => node;\n/**\n * Tests if a value is a primitive value.\n *\n * See https://tc39.github.io/ecma262/#sec-typeof-operator\n */\nconst isPrimitive = (value) => value === null || (typeof value != 'object' && typeof value != 'function');\nconst TemplateResultType = {\n    HTML: 1,\n    SVG: 2,\n};\n/**\n * Tests if a value is a TemplateResult.\n */\nconst isTemplateResult = (value, type) => {\n    var _a, _b;\n    return type === undefined\n        ? // This property needs to remain unminified.\n            ((_a = value) === null || _a === void 0 ? void 0 : _a['_$litType$']) !== undefined\n        : ((_b = value) === null || _b === void 0 ? void 0 : _b['_$litType$']) === type;\n};\n/**\n * Tests if a value is a DirectiveResult.\n */\nconst isDirectiveResult = (value) => { var _a; \n// This property needs to remain unminified.\nreturn ((_a = value) === null || _a === void 0 ? void 0 : _a['_$litDirective$']) !== undefined; };\n/**\n * Retrieves the Directive class for a DirectiveResult\n */\nconst getDirectiveClass = (value) => { var _a; \n// This property needs to remain unminified.\nreturn (_a = value) === null || _a === void 0 ? void 0 : _a['_$litDirective$']; };\n/**\n * Tests whether a part has only a single-expression with no strings to\n * interpolate between.\n *\n * Only AttributePart and PropertyPart can have multiple expressions.\n * Multi-expression parts have a `strings` property and single-expression\n * parts do not.\n */\nconst isSingleExpression = (part) => part.strings === undefined;\nconst createMarker = () => document.createComment('');\n/**\n * Inserts a ChildPart into the given container ChildPart's DOM, either at the\n * end of the container ChildPart, or before the optional `refPart`.\n *\n * This does not add the part to the containerPart's committed value. That must\n * be done by callers.\n *\n * @param containerPart Part within which to add the new ChildPart\n * @param refPart Part before which to add the new ChildPart; when omitted the\n *     part added to the end of the `containerPart`\n * @param part Part to insert, or undefined to create a new part\n */\nconst insertPart = (containerPart, refPart, part) => {\n    var _a;\n    const container = wrap(containerPart._$startNode).parentNode;\n    const refNode = refPart === undefined ? containerPart._$endNode : refPart._$startNode;\n    if (part === undefined) {\n        const startNode = wrap(container).insertBefore(createMarker(), refNode);\n        const endNode = wrap(container).insertBefore(createMarker(), refNode);\n        part = new ChildPart(startNode, endNode, containerPart, containerPart.options);\n    }\n    else {\n        const endNode = wrap(part._$endNode).nextSibling;\n        const oldParent = part._$parent;\n        const parentChanged = oldParent !== containerPart;\n        if (parentChanged) {\n            (_a = part._$reparentDisconnectables) === null || _a === void 0 ? void 0 : _a.call(part, containerPart);\n            // Note that although `_$reparentDisconnectables` updates the part's\n            // `_$parent` reference after unlinking from its current parent, that\n            // method only exists if Disconnectables are present, so we need to\n            // unconditionally set it here\n            part._$parent = containerPart;\n            // Since the _$isConnected getter is somewhat costly, only\n            // read it once we know the subtree has directives that need\n            // to be notified\n            let newConnectionState;\n            if (part._$notifyConnectionChanged !== undefined &&\n                (newConnectionState = containerPart._$isConnected) !==\n                    oldParent._$isConnected) {\n                part._$notifyConnectionChanged(newConnectionState);\n            }\n        }\n        if (endNode !== refNode || parentChanged) {\n            let start = part._$startNode;\n            while (start !== endNode) {\n                const n = wrap(start).nextSibling;\n                wrap(container).insertBefore(start, refNode);\n                start = n;\n            }\n        }\n    }\n    return part;\n};\n/**\n * Sets the value of a Part.\n *\n * Note that this should only be used to set/update the value of user-created\n * parts (i.e. those created using `insertPart`); it should not be used\n * by directives to set the value of the directive's container part. Directives\n * should return a value from `update`/`render` to update their part state.\n *\n * For directives that require setting their part value asynchronously, they\n * should extend `AsyncDirective` and call `this.setValue()`.\n *\n * @param part Part to set\n * @param value Value to set\n * @param index For `AttributePart`s, the index to set\n * @param directiveParent Used internally; should not be set by user\n */\nconst setChildPartValue = (part, value, directiveParent = part) => {\n    part._$setValue(value, directiveParent);\n    return part;\n};\n// A sentinal value that can never appear as a part value except when set by\n// live(). Used to force a dirty-check to fail and cause a re-render.\nconst RESET_VALUE = {};\n/**\n * Sets the committed value of a ChildPart directly without triggering the\n * commit stage of the part.\n *\n * This is useful in cases where a directive needs to update the part such\n * that the next update detects a value change or not. When value is omitted,\n * the next update will be guaranteed to be detected as a change.\n *\n * @param part\n * @param value\n */\nconst setCommittedValue = (part, value = RESET_VALUE) => (part._$committedValue = value);\n/**\n * Returns the committed value of a ChildPart.\n *\n * The committed value is used for change detection and efficient updates of\n * the part. It can differ from the value set by the template or directive in\n * cases where the template value is transformed before being commited.\n *\n * - `TemplateResult`s are committed as a `TemplateInstance`\n * - Iterables are committed as `Array<ChildPart>`\n * - All other types are committed as the template value or value returned or\n *   set by a directive.\n *\n * @param part\n */\nconst getCommittedValue = (part) => part._$committedValue;\n/**\n * Removes a ChildPart from the DOM, including any of its content.\n *\n * @param part The Part to remove\n */\nconst removePart = (part) => {\n    var _a;\n    (_a = part._$notifyConnectionChanged) === null || _a === void 0 ? void 0 : _a.call(part, false, true);\n    let start = part._$startNode;\n    const end = wrap(part._$endNode).nextSibling;\n    while (start !== end) {\n        const n = wrap(start).nextSibling;\n        wrap(start).remove();\n        start = n;\n    }\n};\nconst clearPart = (part) => {\n    part._$clear();\n};\n//# sourceMappingURL=directive-helpers.js.map\n\n//# sourceURL=webpack://@vertzo/app/../../node_modules/lit-html/development/directive-helpers.js?");

/***/ }),

/***/ "../../node_modules/lit-html/development/directive.js":
/*!************************************************************!*\
  !*** ../../node_modules/lit-html/development/directive.js ***!
  \************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"PartType\": () => (/* binding */ PartType),\n/* harmony export */   \"directive\": () => (/* binding */ directive),\n/* harmony export */   \"Directive\": () => (/* binding */ Directive)\n/* harmony export */ });\n/**\n * @license\n * Copyright 2017 Google LLC\n * SPDX-License-Identifier: BSD-3-Clause\n */\nconst PartType = {\n    ATTRIBUTE: 1,\n    CHILD: 2,\n    PROPERTY: 3,\n    BOOLEAN_ATTRIBUTE: 4,\n    EVENT: 5,\n    ELEMENT: 6,\n};\n/**\n * Creates a user-facing directive function from a Directive class. This\n * function has the same parameters as the directive's render() method.\n */\nconst directive = (c) => (...values) => ({\n    // This property needs to remain unminified.\n    ['_$litDirective$']: c,\n    values,\n});\n/**\n * Base class for creating custom directives. Users should extend this class,\n * implement `render` and/or `update`, and then pass their subclass to\n * `directive`.\n */\nclass Directive {\n    constructor(_partInfo) { }\n    // See comment in Disconnectable interface for why this is a getter\n    get _$isConnected() {\n        return this._$parent._$isConnected;\n    }\n    /** @internal */\n    _$initialize(part, parent, attributeIndex) {\n        this.__part = part;\n        this._$parent = parent;\n        this.__attributeIndex = attributeIndex;\n    }\n    /** @internal */\n    _$resolve(part, props) {\n        return this.update(part, props);\n    }\n    update(_part, props) {\n        return this.render(...props);\n    }\n}\n//# sourceMappingURL=directive.js.map\n\n//# sourceURL=webpack://@vertzo/app/../../node_modules/lit-html/development/directive.js?");

/***/ }),

/***/ "../../node_modules/lit-html/development/directives/live.js":
/*!******************************************************************!*\
  !*** ../../node_modules/lit-html/development/directives/live.js ***!
  \******************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"live\": () => (/* binding */ live)\n/* harmony export */ });\n/* harmony import */ var _lit_html_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../lit-html.js */ \"../../node_modules/lit-html/development/lit-html.js\");\n/* harmony import */ var _directive_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../directive.js */ \"../../node_modules/lit-html/development/directive.js\");\n/* harmony import */ var _directive_helpers_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../directive-helpers.js */ \"../../node_modules/lit-html/development/directive-helpers.js\");\n/**\n * @license\n * Copyright 2020 Google LLC\n * SPDX-License-Identifier: BSD-3-Clause\n */\n\n\n\nclass LiveDirective extends _directive_js__WEBPACK_IMPORTED_MODULE_1__.Directive {\n    constructor(partInfo) {\n        super(partInfo);\n        if (!(partInfo.type === _directive_js__WEBPACK_IMPORTED_MODULE_1__.PartType.PROPERTY ||\n            partInfo.type === _directive_js__WEBPACK_IMPORTED_MODULE_1__.PartType.ATTRIBUTE ||\n            partInfo.type === _directive_js__WEBPACK_IMPORTED_MODULE_1__.PartType.BOOLEAN_ATTRIBUTE)) {\n            throw new Error('The `live` directive is not allowed on child or event bindings');\n        }\n        if (!(0,_directive_helpers_js__WEBPACK_IMPORTED_MODULE_2__.isSingleExpression)(partInfo)) {\n            throw new Error('`live` bindings can only contain a single expression');\n        }\n    }\n    render(value) {\n        return value;\n    }\n    update(part, [value]) {\n        if (value === _lit_html_js__WEBPACK_IMPORTED_MODULE_0__.noChange || value === _lit_html_js__WEBPACK_IMPORTED_MODULE_0__.nothing) {\n            return value;\n        }\n        const element = part.element;\n        const name = part.name;\n        // TODO (justinfagnani): This is essentially implementing a getLiveValue()\n        // method for each part type. Should that be moved into the AttributePart\n        // interface?\n        if (part.type === _directive_js__WEBPACK_IMPORTED_MODULE_1__.PartType.PROPERTY) {\n            // eslint-disable-next-line @typescript-eslint/no-explicit-any\n            if (value === element[name]) {\n                return _lit_html_js__WEBPACK_IMPORTED_MODULE_0__.noChange;\n            }\n        }\n        else if (part.type === _directive_js__WEBPACK_IMPORTED_MODULE_1__.PartType.BOOLEAN_ATTRIBUTE) {\n            if (!!value === element.hasAttribute(name)) {\n                return _lit_html_js__WEBPACK_IMPORTED_MODULE_0__.noChange;\n            }\n        }\n        else if (part.type === _directive_js__WEBPACK_IMPORTED_MODULE_1__.PartType.ATTRIBUTE) {\n            if (element.getAttribute(name) === String(value)) {\n                return _lit_html_js__WEBPACK_IMPORTED_MODULE_0__.noChange;\n            }\n        }\n        // Resets the part's value, causing its dirty-check to fail so that it\n        // always sets the value.\n        (0,_directive_helpers_js__WEBPACK_IMPORTED_MODULE_2__.setCommittedValue)(part);\n        return value;\n    }\n}\n/**\n * Checks binding values against live DOM values, instead of previously bound\n * values, when determining whether to update the value.\n *\n * This is useful for cases where the DOM value may change from outside of\n * lit-html, such as with a binding to an `<input>` element's `value` property,\n * a content editable elements text, or to a custom element that changes it's\n * own properties or attributes.\n *\n * In these cases if the DOM value changes, but the value set through lit-html\n * bindings hasn't, lit-html won't know to update the DOM value and will leave\n * it alone. If this is not what you want--if you want to overwrite the DOM\n * value with the bound value no matter what--use the `live()` directive:\n *\n * ```js\n *     html`<input .value=${live(x)}>`\n * ```\n *\n * `live()` performs a strict equality check agains the live DOM value, and if\n * the new value is equal to the live value, does nothing. This means that\n * `live()` should not be used when the binding will cause a type conversion. If\n * you use `live()` with an attribute binding, make sure that only strings are\n * passed in, or the binding will update every render.\n */\nconst live = (0,_directive_js__WEBPACK_IMPORTED_MODULE_1__.directive)(LiveDirective);\n//# sourceMappingURL=live.js.map\n\n//# sourceURL=webpack://@vertzo/app/../../node_modules/lit-html/development/directives/live.js?");

/***/ }),

/***/ "../../node_modules/lit-html/development/lit-html.js":
/*!***********************************************************!*\
  !*** ../../node_modules/lit-html/development/lit-html.js ***!
  \***********************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"INTERNAL\": () => (/* binding */ INTERNAL),\n/* harmony export */   \"html\": () => (/* binding */ html),\n/* harmony export */   \"svg\": () => (/* binding */ svg),\n/* harmony export */   \"noChange\": () => (/* binding */ noChange),\n/* harmony export */   \"nothing\": () => (/* binding */ nothing),\n/* harmony export */   \"render\": () => (/* binding */ render),\n/* harmony export */   \"_$LH\": () => (/* binding */ _$LH)\n/* harmony export */ });\n/**\n * @license\n * Copyright 2017 Google LLC\n * SPDX-License-Identifier: BSD-3-Clause\n */\nvar _a, _b, _c, _d, _e;\nvar _f;\nconst DEV_MODE = true;\nconst ENABLE_EXTRA_SECURITY_HOOKS = true;\nconst ENABLE_SHADYDOM_NOPATCH = true;\n/**\n * `true` if we're building for google3 with temporary back-compat helpers.\n * This export is not present in prod builds.\n * @internal\n */\nconst INTERNAL = true;\nif (DEV_MODE) {\n    console.warn('lit-html is in dev mode. Not recommended for production!');\n}\nconst wrap = ENABLE_SHADYDOM_NOPATCH &&\n    ((_a = window.ShadyDOM) === null || _a === void 0 ? void 0 : _a.inUse) &&\n    ((_b = window.ShadyDOM) === null || _b === void 0 ? void 0 : _b.noPatch) === true\n    ? window.ShadyDOM.wrap\n    : (node) => node;\nconst trustedTypes = globalThis.trustedTypes;\n/**\n * Our TrustedTypePolicy for HTML which is declared using the html template\n * tag function.\n *\n * That HTML is a developer-authored constant, and is parsed with innerHTML\n * before any untrusted expressions have been mixed in. Therefor it is\n * considered safe by construction.\n */\nconst policy = trustedTypes\n    ? trustedTypes.createPolicy('lit-html', {\n        createHTML: (s) => s,\n    })\n    : undefined;\nconst identityFunction = (value) => value;\nconst noopSanitizer = (_node, _name, _type) => identityFunction;\n/** Sets the global sanitizer factory. */\nconst setSanitizer = (newSanitizer) => {\n    if (!ENABLE_EXTRA_SECURITY_HOOKS) {\n        return;\n    }\n    if (sanitizerFactoryInternal !== noopSanitizer) {\n        throw new Error(`Attempted to overwrite existing lit-html security policy.` +\n            ` setSanitizeDOMValueFactory should be called at most once.`);\n    }\n    sanitizerFactoryInternal = newSanitizer;\n};\n/**\n * Only used in internal tests, not a part of the public API.\n */\nconst _testOnlyClearSanitizerFactoryDoNotCallOrElse = () => {\n    sanitizerFactoryInternal = noopSanitizer;\n};\nconst createSanitizer = (node, name, type) => {\n    return sanitizerFactoryInternal(node, name, type);\n};\n// Added to an attribute name to mark the attribute as bound so we can find\n// it easily.\nconst boundAttributeSuffix = '$lit$';\n// This marker is used in many syntactic positions in HTML, so it must be\n// a valid element name and attribute name. We don't support dynamic names (yet)\n// but this at least ensures that the parse tree is closer to the template\n// intention.\nconst marker = `lit$${String(Math.random()).slice(9)}$`;\n// String used to tell if a comment is a marker comment\nconst markerMatch = '?' + marker;\n// Text used to insert a comment marker node. We use processing instruction\n// syntax because it's slightly smaller, but parses as a comment node.\nconst nodeMarker = `<${markerMatch}>`;\nconst d = document;\n// Creates a dynamic marker. We never have to search for these in the DOM.\nconst createMarker = (v = '') => d.createComment(v);\nconst isPrimitive = (value) => value === null || (typeof value != 'object' && typeof value != 'function');\nconst isArray = Array.isArray;\nconst isIterable = (value) => {\n    var _a;\n    return isArray(value) ||\n        // eslint-disable-next-line @typescript-eslint/no-explicit-any\n        typeof ((_a = value) === null || _a === void 0 ? void 0 : _a[Symbol.iterator]) === 'function';\n};\nconst SPACE_CHAR = `[ \\t\\n\\f\\r]`;\nconst ATTR_VALUE_CHAR = `[^ \\t\\n\\f\\r\"'\\`<>=]`;\nconst NAME_CHAR = `[^\\\\s\"'>=/]`;\n// These regexes represent the five parsing states that we care about in the\n// Template's HTML scanner. They match the *end* of the state they're named\n// after.\n// Depending on the match, we transition to a new state. If there's no match,\n// we stay in the same state.\n// Note that the regexes are stateful. We utilize lastIndex and sync it\n// across the multiple regexes used. In addition to the five regexes below\n// we also dynamically create a regex to find the matching end tags for raw\n// text elements.\n/**\n * End of text is: `<` followed by:\n *   (comment start) or (tag) or (dynamic tag binding)\n */\nconst textEndRegex = /<(?:(!--|\\/[^a-zA-Z])|(\\/?[a-zA-Z][^>\\s]*)|(\\/?$))/g;\nconst COMMENT_START = 1;\nconst TAG_NAME = 2;\nconst DYNAMIC_TAG_NAME = 3;\nconst commentEndRegex = /-->/g;\n/**\n * Comments not started with <!--, like </{, can be ended by a single `>`\n */\nconst comment2EndRegex = />/g;\n/**\n * The tagEnd regex matches the end of the \"inside an opening\" tag syntax\n * position. It either matches a `>`, an attribute-like sequence, or the end\n * of the string after a space (attribute-name position ending).\n *\n * See attributes in the HTML spec:\n * https://www.w3.org/TR/html5/syntax.html#elements-attributes\n *\n * \" \\t\\n\\f\\r\" are HTML space characters:\n * https://infra.spec.whatwg.org/#ascii-whitespace\n *\n * So an attribute is:\n *  * The name: any character except a whitespace character, (\"), ('), \">\",\n *    \"=\", or \"/\". Note: this is different from the HTML spec which also excludes control characters.\n *  * Followed by zero or more space characters\n *  * Followed by \"=\"\n *  * Followed by zero or more space characters\n *  * Followed by:\n *    * Any character except space, ('), (\"), \"<\", \">\", \"=\", (`), or\n *    * (\") then any non-(\"), or\n *    * (') then any non-(')\n */\nconst tagEndRegex = new RegExp(`>|${SPACE_CHAR}(?:(${NAME_CHAR}+)(${SPACE_CHAR}*=${SPACE_CHAR}*(?:${ATTR_VALUE_CHAR}|(\"|')|))|$)`, 'g');\nconst ENTIRE_MATCH = 0;\nconst ATTRIBUTE_NAME = 1;\nconst SPACES_AND_EQUALS = 2;\nconst QUOTE_CHAR = 3;\nconst singleQuoteAttrEndRegex = /'/g;\nconst doubleQuoteAttrEndRegex = /\"/g;\n/**\n * Matches the raw text elements.\n *\n * Comments are not parsed within raw text elements, so we need to search their\n * text content for marker strings.\n */\nconst rawTextElement = /^(?:script|style|textarea)$/i;\n/** TemplateResult types */\nconst HTML_RESULT = 1;\nconst SVG_RESULT = 2;\n// TemplatePart types\n// IMPORTANT: these must match the values in PartType\nconst ATTRIBUTE_PART = 1;\nconst CHILD_PART = 2;\nconst PROPERTY_PART = 3;\nconst BOOLEAN_ATTRIBUTE_PART = 4;\nconst EVENT_PART = 5;\nconst ELEMENT_PART = 6;\nconst COMMENT_PART = 7;\n/**\n * Generates a template literal tag function that returns a TemplateResult with\n * the given result type.\n */\nconst tag = (type) => (strings, ...values) => {\n    // Warn against templates octal escape sequences\n    // We do this here rather than in render so that the warning is closer to the\n    // template definition.\n    if (DEV_MODE && strings.some((s) => s === undefined)) {\n        console.warn('Some template strings are undefined.\\n' +\n            'This is probably caused by illegal octal escape sequences.');\n    }\n    return {\n        // This property needs to remain unminified.\n        ['_$litType$']: type,\n        strings,\n        values,\n    };\n};\n/**\n * Interprets a template literal as an HTML template that can efficiently\n * render to and update a container.\n */\nconst html = tag(HTML_RESULT);\n/**\n * Interprets a template literal as an SVG template that can efficiently\n * render to and update a container.\n */\nconst svg = tag(SVG_RESULT);\n/**\n * A sentinel value that signals that a value was handled by a directive and\n * should not be written to the DOM.\n */\nconst noChange = Symbol.for('lit-noChange');\n/**\n * A sentinel value that signals a ChildPart to fully clear its content.\n */\nconst nothing = Symbol.for('lit-nothing');\n/**\n * The cache of prepared templates, keyed by the tagged TemplateStringsArray\n * and _not_ accounting for the specific template tag used. This means that\n * template tags cannot be dynamic - the must statically be one of html, svg,\n * or attr. This restriction simplifies the cache lookup, which is on the hot\n * path for rendering.\n */\nconst templateCache = new WeakMap();\n/**\n * Renders a value, usually a lit-html TemplateResult, to the container.\n * @param value\n * @param container\n * @param options\n */\nconst render = (value, container, options) => {\n    var _a, _b, _c;\n    const partOwnerNode = (_a = options === null || options === void 0 ? void 0 : options.renderBefore) !== null && _a !== void 0 ? _a : container;\n    // This property needs to remain unminified.\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    let part = partOwnerNode['_$litPart$'];\n    if (part === undefined) {\n        const endNode = (_b = options === null || options === void 0 ? void 0 : options.renderBefore) !== null && _b !== void 0 ? _b : null;\n        // Internal modification: don't clear container to match lit-html 2.0\n        if (INTERNAL &&\n            ((_c = options) === null || _c === void 0 ? void 0 : _c.clearContainerForLit2MigrationOnly) ===\n                true) {\n            let n = container.firstChild;\n            // Clear only up to the `endNode` aka `renderBefore` node.\n            while (n && n !== endNode) {\n                const next = n.nextSibling;\n                n.remove();\n                n = next;\n            }\n        }\n        // This property needs to remain unminified.\n        // eslint-disable-next-line @typescript-eslint/no-explicit-any\n        partOwnerNode['_$litPart$'] = part = new ChildPart(container.insertBefore(createMarker(), endNode), endNode, undefined, options !== null && options !== void 0 ? options : {});\n    }\n    part._$setValue(value);\n    return part;\n};\nif (ENABLE_EXTRA_SECURITY_HOOKS) {\n    render.setSanitizer = setSanitizer;\n    render.createSanitizer = createSanitizer;\n    if (DEV_MODE) {\n        render._testOnlyClearSanitizerFactoryDoNotCallOrElse =\n            _testOnlyClearSanitizerFactoryDoNotCallOrElse;\n    }\n}\nconst walker = d.createTreeWalker(d, 129 /* NodeFilter.SHOW_{ELEMENT|COMMENT} */, null, false);\nlet sanitizerFactoryInternal = noopSanitizer;\n/**\n * Returns an HTML string for the given TemplateStringsArray and result type\n * (HTML or SVG), along with the case-sensitive bound attribute names in\n * template order. The HTML contains comment comment markers denoting the\n * `ChildPart`s and suffixes on bound attributes denoting the `AttributeParts`.\n *\n * @param strings template strings array\n * @param type HTML or SVG\n * @return Array containing `[html, attrNames]` (array returned for terseness,\n *     to avoid object fields since this code is shared with non-minified SSR\n *     code)\n */\nconst getTemplateHtml = (strings, type) => {\n    // Insert makers into the template HTML to represent the position of\n    // bindings. The following code scans the template strings to determine the\n    // syntactic position of the bindings. They can be in text position, where\n    // we insert an HTML comment, attribute value position, where we insert a\n    // sentinel string and re-write the attribute name, or inside a tag where\n    // we insert the sentinel string.\n    const l = strings.length - 1;\n    // Stores the case-sensitive bound attribute names in the order of their\n    // parts. ElementParts are also reflected in this array as undefined\n    // rather than a string, to disambiguate from attribute bindings.\n    const attrNames = [];\n    let html = type === SVG_RESULT ? '<svg>' : '';\n    // When we're inside a raw text tag (not it's text content), the regex\n    // will still be tagRegex so we can find attributes, but will switch to\n    // this regex when the tag ends.\n    let rawTextEndRegex;\n    // The current parsing state, represented as a reference to one of the\n    // regexes\n    let regex = textEndRegex;\n    for (let i = 0; i < l; i++) {\n        const s = strings[i];\n        // The index of the end of the last attribute name. When this is\n        // positive at end of a string, it means we're in an attribute value\n        // position and need to rewrite the attribute name.\n        // We also use a special value of -2 to indicate that we encountered\n        // the end of a string in attribute name position.\n        let attrNameEndIndex = -1;\n        let attrName;\n        let lastIndex = 0;\n        let match;\n        // The conditions in this loop handle the current parse state, and the\n        // assignments to the `regex` variable are the state transitions.\n        while (lastIndex < s.length) {\n            // Make sure we start searching from where we previously left off\n            regex.lastIndex = lastIndex;\n            match = regex.exec(s);\n            if (match === null) {\n                break;\n            }\n            lastIndex = regex.lastIndex;\n            if (regex === textEndRegex) {\n                if (match[COMMENT_START] === '!--') {\n                    regex = commentEndRegex;\n                }\n                else if (match[COMMENT_START] !== undefined) {\n                    // We started a weird comment, like </{\n                    regex = comment2EndRegex;\n                }\n                else if (match[TAG_NAME] !== undefined) {\n                    if (rawTextElement.test(match[TAG_NAME])) {\n                        // Record if we encounter a raw-text element. We'll switch to\n                        // this regex at the end of the tag.\n                        rawTextEndRegex = new RegExp(`</${match[TAG_NAME]}`, 'g');\n                    }\n                    regex = tagEndRegex;\n                }\n                else if (match[DYNAMIC_TAG_NAME] !== undefined) {\n                    // dynamic tag name\n                    regex = tagEndRegex;\n                }\n            }\n            else if (regex === tagEndRegex) {\n                if (match[ENTIRE_MATCH] === '>') {\n                    // End of a tag. If we had started a raw-text element, use that\n                    // regex\n                    regex = rawTextEndRegex !== null && rawTextEndRegex !== void 0 ? rawTextEndRegex : textEndRegex;\n                    // We may be ending an unquoted attribute value, so make sure we\n                    // clear any pending attrNameEndIndex\n                    attrNameEndIndex = -1;\n                }\n                else if (match[ATTRIBUTE_NAME] === undefined) {\n                    // Attribute name position\n                    attrNameEndIndex = -2;\n                }\n                else {\n                    attrNameEndIndex = regex.lastIndex - match[SPACES_AND_EQUALS].length;\n                    attrName = match[ATTRIBUTE_NAME];\n                    regex =\n                        match[QUOTE_CHAR] === undefined\n                            ? tagEndRegex\n                            : match[QUOTE_CHAR] === '\"'\n                                ? doubleQuoteAttrEndRegex\n                                : singleQuoteAttrEndRegex;\n                }\n            }\n            else if (regex === doubleQuoteAttrEndRegex ||\n                regex === singleQuoteAttrEndRegex) {\n                regex = tagEndRegex;\n            }\n            else if (regex === commentEndRegex || regex === comment2EndRegex) {\n                regex = textEndRegex;\n            }\n            else {\n                // Not one of the five state regexes, so it must be the dynamically\n                // created raw text regex and we're at the close of that element.\n                regex = tagEndRegex;\n                rawTextEndRegex = undefined;\n            }\n        }\n        if (DEV_MODE) {\n            // If we have a attrNameEndIndex, which indicates that we should\n            // rewrite the attribute name, assert that we're in a valid attribute\n            // position - either in a tag, or a quoted attribute value.\n            console.assert(attrNameEndIndex === -1 ||\n                regex === tagEndRegex ||\n                regex === singleQuoteAttrEndRegex ||\n                regex === doubleQuoteAttrEndRegex, 'unexpected parse state B');\n        }\n        // We have four cases:\n        //  1. We're in text position, and not in a raw text element\n        //     (regex === textEndRegex): insert a comment marker.\n        //  2. We have a non-negative attrNameEndIndex which means we need to\n        //     rewrite the attribute name to add a bound attribute suffix.\n        //  3. We're at the non-first binding in a multi-binding attribute, use a\n        //     plain marker.\n        //  4. We're somewhere else inside the tag. If we're in attribute name\n        //     position (attrNameEndIndex === -2), add a sequential suffix to\n        //     generate a unique attribute name.\n        // Detect a binding next to self-closing tag end and insert a space to\n        // separate the marker from the tag end:\n        const end = regex === tagEndRegex && strings[i + 1].startsWith('/>') ? ' ' : '';\n        html +=\n            regex === textEndRegex\n                ? s + nodeMarker\n                : attrNameEndIndex >= 0\n                    ? (attrNames.push(attrName),\n                        s.slice(0, attrNameEndIndex) +\n                            boundAttributeSuffix +\n                            s.slice(attrNameEndIndex)) +\n                        marker +\n                        end\n                    : s +\n                        marker +\n                        (attrNameEndIndex === -2 ? (attrNames.push(undefined), i) : end);\n    }\n    const htmlResult = html + (strings[l] || '<?>') + (type === SVG_RESULT ? '</svg>' : '');\n    // Returned as an array for terseness\n    return [\n        policy !== undefined\n            ? policy.createHTML(htmlResult)\n            : htmlResult,\n        attrNames,\n    ];\n};\nclass Template {\n    constructor(\n    // This property needs to remain unminified.\n    { strings, ['_$litType$']: type }, options) {\n        /** @internal */\n        this.parts = [];\n        let node;\n        let nodeIndex = 0;\n        let attrNameIndex = 0;\n        const partCount = strings.length - 1;\n        const parts = this.parts;\n        // Create template element\n        const [html, attrNames] = getTemplateHtml(strings, type);\n        this.el = Template.createElement(html, options);\n        walker.currentNode = this.el.content;\n        // Reparent SVG nodes into template root\n        if (type === SVG_RESULT) {\n            const content = this.el.content;\n            const svgElement = content.firstChild;\n            svgElement.remove();\n            content.append(...svgElement.childNodes);\n        }\n        // Walk the template to find binding markers and create TemplateParts\n        while ((node = walker.nextNode()) !== null && parts.length < partCount) {\n            if (node.nodeType === 1) {\n                // TODO (justinfagnani): for attempted dynamic tag names, we don't\n                // increment the bindingIndex, and it'll be off by 1 in the element\n                // and off by two after it.\n                if (node.hasAttributes()) {\n                    // We defer removing bound attributes because on IE we might not be\n                    // iterating attributes in their template order, and would sometimes\n                    // remove an attribute that we still need to create a part for.\n                    const attrsToRemove = [];\n                    for (const name of node.getAttributeNames()) {\n                        // `name` is the name of the attribute we're iterating over, but not\n                        // _neccessarily_ the name of the attribute we will create a part\n                        // for. They can be different in browsers that don't iterate on\n                        // attributes in source order. In that case the attrNames array\n                        // contains the attribute name we'll process next. We only need the\n                        // attribute name here to know if we should process a bound attribute\n                        // on this element.\n                        if (name.endsWith(boundAttributeSuffix) ||\n                            name.startsWith(marker)) {\n                            const realName = attrNames[attrNameIndex++];\n                            attrsToRemove.push(name);\n                            if (realName !== undefined) {\n                                // Lowercase for case-sensitive SVG attributes like viewBox\n                                const value = node.getAttribute(realName.toLowerCase() + boundAttributeSuffix);\n                                const statics = value.split(marker);\n                                const m = /([.?@])?(.*)/.exec(realName);\n                                parts.push({\n                                    type: ATTRIBUTE_PART,\n                                    index: nodeIndex,\n                                    name: m[2],\n                                    strings: statics,\n                                    ctor: m[1] === '.'\n                                        ? PropertyPart\n                                        : m[1] === '?'\n                                            ? BooleanAttributePart\n                                            : m[1] === '@'\n                                                ? EventPart\n                                                : AttributePart,\n                                });\n                            }\n                            else {\n                                parts.push({\n                                    type: ELEMENT_PART,\n                                    index: nodeIndex,\n                                });\n                            }\n                        }\n                    }\n                    for (const name of attrsToRemove) {\n                        node.removeAttribute(name);\n                    }\n                }\n                // TODO (justinfagnani): benchmark the regex against testing for each\n                // of the 3 raw text element names.\n                if (rawTextElement.test(node.tagName)) {\n                    // For raw text elements we need to split the text content on\n                    // markers, create a Text node for each segment, and create\n                    // a TemplatePart for each marker.\n                    const strings = node.textContent.split(marker);\n                    const lastIndex = strings.length - 1;\n                    if (lastIndex > 0) {\n                        node.textContent = trustedTypes\n                            ? trustedTypes.emptyScript\n                            : '';\n                        // Generate a new text node for each literal section\n                        // These nodes are also used as the markers for node parts\n                        // We can't use empty text nodes as markers because they're\n                        // normalized in some browsers (TODO: check)\n                        for (let i = 0; i < lastIndex; i++) {\n                            node.append(strings[i], createMarker());\n                            // Walk past the marker node we just added\n                            walker.nextNode();\n                            parts.push({ type: CHILD_PART, index: ++nodeIndex });\n                        }\n                        // Note because this marker is added after the walker's current\n                        // node, it will be walked to in the outer loop (and ignored), so\n                        // we don't need to adjust nodeIndex here\n                        node.append(strings[lastIndex], createMarker());\n                    }\n                }\n            }\n            else if (node.nodeType === 8) {\n                const data = node.data;\n                if (data === markerMatch) {\n                    parts.push({ type: CHILD_PART, index: nodeIndex });\n                }\n                else {\n                    let i = -1;\n                    while ((i = node.data.indexOf(marker, i + 1)) !== -1) {\n                        // Comment node has a binding marker inside, make an inactive part\n                        // The binding won't work, but subsequent bindings will\n                        // TODO (justinfagnani): consider whether it's even worth it to\n                        // make bindings in comments work\n                        parts.push({ type: COMMENT_PART, index: nodeIndex });\n                        // Move to the end of the match\n                        i += marker.length - 1;\n                    }\n                }\n            }\n            nodeIndex++;\n        }\n    }\n    // Overridden via `litHtmlPlatformSupport` to provide platform support.\n    /** @nocollapse */\n    static createElement(html, _options) {\n        const el = d.createElement('template');\n        el.innerHTML = html;\n        return el;\n    }\n}\nfunction resolveDirective(part, value, parent = part, attributeIndex) {\n    var _a, _b, _c;\n    var _d;\n    // Bail early if the value is explicitly noChange. Note, this means any\n    // nested directive is still attached and is not run.\n    if (value === noChange) {\n        return value;\n    }\n    let currentDirective = attributeIndex !== undefined\n        ? (_a = parent.__directives) === null || _a === void 0 ? void 0 : _a[attributeIndex]\n        : parent.__directive;\n    const nextDirectiveConstructor = isPrimitive(value)\n        ? undefined\n        : // This property needs to remain unminified.\n            value['_$litDirective$'];\n    if ((currentDirective === null || currentDirective === void 0 ? void 0 : currentDirective.constructor) !== nextDirectiveConstructor) {\n        // This property needs to remain unminified.\n        (_b = currentDirective === null || currentDirective === void 0 ? void 0 : currentDirective['_$notifyDirectiveConnectionChanged']) === null || _b === void 0 ? void 0 : _b.call(currentDirective, false);\n        if (nextDirectiveConstructor === undefined) {\n            currentDirective = undefined;\n        }\n        else {\n            currentDirective = new nextDirectiveConstructor(part);\n            currentDirective._$initialize(part, parent, attributeIndex);\n        }\n        if (attributeIndex !== undefined) {\n            ((_c = (_d = parent).__directives) !== null && _c !== void 0 ? _c : (_d.__directives = []))[attributeIndex] =\n                currentDirective;\n        }\n        else {\n            parent.__directive = currentDirective;\n        }\n    }\n    if (currentDirective !== undefined) {\n        value = resolveDirective(part, currentDirective._$resolve(part, value.values), currentDirective, attributeIndex);\n    }\n    return value;\n}\n/**\n * An updateable instance of a Template. Holds references to the Parts used to\n * update the template instance.\n */\nclass TemplateInstance {\n    constructor(template, parent) {\n        /** @internal */\n        this._parts = [];\n        /** @internal */\n        this._$disconnectableChildren = undefined;\n        this._$template = template;\n        this._$parent = parent;\n    }\n    // See comment in Disconnectable interface for why this is a getter\n    get _$isConnected() {\n        return this._$parent._$isConnected;\n    }\n    // This method is separate from the constructor because we need to return a\n    // DocumentFragment and we don't want to hold onto it with an instance field.\n    _clone(options) {\n        var _a;\n        const { el: { content }, parts: parts, } = this._$template;\n        const fragment = ((_a = options === null || options === void 0 ? void 0 : options.creationScope) !== null && _a !== void 0 ? _a : d).importNode(content, true);\n        walker.currentNode = fragment;\n        let node = walker.nextNode();\n        let nodeIndex = 0;\n        let partIndex = 0;\n        let templatePart = parts[0];\n        while (templatePart !== undefined) {\n            if (nodeIndex === templatePart.index) {\n                let part;\n                if (templatePart.type === CHILD_PART) {\n                    part = new ChildPart(node, node.nextSibling, this, options);\n                }\n                else if (templatePart.type === ATTRIBUTE_PART) {\n                    part = new templatePart.ctor(node, templatePart.name, templatePart.strings, this, options);\n                }\n                else if (templatePart.type === ELEMENT_PART) {\n                    part = new ElementPart(node, this, options);\n                }\n                this._parts.push(part);\n                templatePart = parts[++partIndex];\n            }\n            if (nodeIndex !== (templatePart === null || templatePart === void 0 ? void 0 : templatePart.index)) {\n                node = walker.nextNode();\n                nodeIndex++;\n            }\n        }\n        return fragment;\n    }\n    _update(values) {\n        let i = 0;\n        for (const part of this._parts) {\n            if (part !== undefined) {\n                if (part.strings !== undefined) {\n                    part._$setValue(values, part, i);\n                    // The number of values the part consumes is part.strings.length - 1\n                    // since values are in between template spans. We increment i by 1\n                    // later in the loop, so increment it by part.strings.length - 2 here\n                    i += part.strings.length - 2;\n                }\n                else {\n                    part._$setValue(values[i]);\n                }\n            }\n            i++;\n        }\n    }\n}\nclass ChildPart {\n    constructor(startNode, endNode, parent, options) {\n        this.type = CHILD_PART;\n        // TODO(kschaaf): There's currently no way to have the initial render\n        // of a part be `isConnected: false`. We may want to add this via renderOptions\n        // so that if a LitElement ends up performing its initial render while\n        // disconnected, the directives aren't in the wrong state\n        // https://github.com/lit/lit/issues/2051\n        /** @internal */\n        this.__isConnected = true;\n        // The following fields will be patched onto ChildParts when required by\n        // AsyncDirective\n        /** @internal */\n        this._$disconnectableChildren = undefined;\n        this._$startNode = startNode;\n        this._$endNode = endNode;\n        this._$parent = parent;\n        this.options = options;\n        if (ENABLE_EXTRA_SECURITY_HOOKS) {\n            // Explicitly initialize for consistent class shape.\n            this._textSanitizer = undefined;\n        }\n    }\n    // See comment in Disconnectable interface for why this is a getter\n    get _$isConnected() {\n        var _a, _b;\n        // ChildParts that are not at the root should always be created with a\n        // parent; only RootChildNode's won't, so they return the local isConnected\n        // state\n        return (_b = (_a = this._$parent) === null || _a === void 0 ? void 0 : _a._$isConnected) !== null && _b !== void 0 ? _b : this.__isConnected;\n    }\n    /**\n     * The parent node into which the part renders its content.\n     *\n     * A ChildPart's content consists of a range of adjacent child nodes of\n     * `.parentNode`, possibly bordered by 'marker nodes' (`.startNode` and\n     * `.endNode`).\n     *\n     * - If both `.startNode` and `.endNode` are non-null, then the part's content\n     * consists of all siblings between `.startNode` and `.endNode`, exclusively.\n     *\n     * - If `.startNode` is non-null but `.endNode` is null, then the part's\n     * content consists of all siblings following `.startNode`, up to and\n     * including the last child of `.parentNode`. If `.endNode` is non-null, then\n     * `.startNode` will always be non-null.\n     *\n     * - If both `.endNode` and `.startNode` are null, then the part's content\n     * consists of all child nodes of `.parentNode`.\n     */\n    get parentNode() {\n        return wrap(this._$startNode).parentNode;\n    }\n    /**\n     * The part's leading marker node, if any. See `.parentNode` for more\n     * information.\n     */\n    get startNode() {\n        return this._$startNode;\n    }\n    /**\n     * The part's trailing marker node, if any. See `.parentNode` for more\n     * information.\n     */\n    get endNode() {\n        return this._$endNode;\n    }\n    _$setValue(value, directiveParent = this) {\n        value = resolveDirective(this, value, directiveParent);\n        if (isPrimitive(value)) {\n            // Non-rendering child values. It's important that these do not render\n            // empty text nodes to avoid issues with preventing default <slot>\n            // fallback content.\n            if (value === nothing || value == null || value === '') {\n                if (this._$committedValue !== nothing) {\n                    this._$clear();\n                }\n                this._$committedValue = nothing;\n            }\n            else if (value !== this._$committedValue && value !== noChange) {\n                this._commitText(value);\n            }\n            // This property needs to remain unminified.\n        }\n        else if (value['_$litType$'] !== undefined) {\n            this._commitTemplateResult(value);\n        }\n        else if (value.nodeType !== undefined) {\n            this._commitNode(value);\n        }\n        else if (isIterable(value)) {\n            this._commitIterable(value);\n        }\n        else {\n            // Fallback, will render the string representation\n            this._commitText(value);\n        }\n    }\n    _insert(node, ref = this._$endNode) {\n        return wrap(wrap(this._$startNode).parentNode).insertBefore(node, ref);\n    }\n    _commitNode(value) {\n        var _a;\n        if (this._$committedValue !== value) {\n            this._$clear();\n            if (ENABLE_EXTRA_SECURITY_HOOKS &&\n                sanitizerFactoryInternal !== noopSanitizer) {\n                const parentNodeName = (_a = this._$startNode.parentNode) === null || _a === void 0 ? void 0 : _a.nodeName;\n                if (parentNodeName === 'STYLE' || parentNodeName === 'SCRIPT') {\n                    this._insert(new Text('/* lit-html will not write ' +\n                        'TemplateResults to scripts and styles */'));\n                    return;\n                }\n            }\n            this._$committedValue = this._insert(value);\n        }\n    }\n    _commitText(value) {\n        const node = wrap(this._$startNode).nextSibling;\n        // TODO(justinfagnani): Can we just check if this._$committedValue is primitive?\n        if (node !== null &&\n            node.nodeType === 3 /* Node.TEXT_NODE */ &&\n            (this._$endNode === null\n                ? wrap(node).nextSibling === null\n                : node === wrap(this._$endNode).previousSibling)) {\n            if (ENABLE_EXTRA_SECURITY_HOOKS) {\n                if (this._textSanitizer === undefined) {\n                    this._textSanitizer = createSanitizer(node, 'data', 'property');\n                }\n                value = this._textSanitizer(value);\n            }\n            // If we only have a single text node between the markers, we can just\n            // set its value, rather than replacing it.\n            node.data = value;\n        }\n        else {\n            if (ENABLE_EXTRA_SECURITY_HOOKS) {\n                const textNode = document.createTextNode('');\n                this._commitNode(textNode);\n                // When setting text content, for security purposes it matters a lot\n                // what the parent is. For example, <style> and <script> need to be\n                // handled with care, while <span> does not. So first we need to put a\n                // text node into the document, then we can sanitize its contentx.\n                if (this._textSanitizer === undefined) {\n                    this._textSanitizer = createSanitizer(textNode, 'data', 'property');\n                }\n                value = this._textSanitizer(value);\n                textNode.data = value;\n            }\n            else {\n                this._commitNode(d.createTextNode(value));\n            }\n        }\n        this._$committedValue = value;\n    }\n    _commitTemplateResult(result) {\n        var _a;\n        // This property needs to remain unminified.\n        const { values, ['_$litType$']: type } = result;\n        // If $litType$ is a number, result is a plain TemplateResult and we get\n        // the template from the template cache. If not, result is a\n        // CompiledTemplateResult and _$litType$ is a CompiledTemplate and we need\n        // to create the <template> element the first time we see it.\n        const template = typeof type === 'number'\n            ? this._$getTemplate(result)\n            : (type.el === undefined &&\n                (type.el = Template.createElement(type.h, this.options)),\n                type);\n        if (((_a = this._$committedValue) === null || _a === void 0 ? void 0 : _a._$template) === template) {\n            this._$committedValue._update(values);\n        }\n        else {\n            const instance = new TemplateInstance(template, this);\n            const fragment = instance._clone(this.options);\n            instance._update(values);\n            this._commitNode(fragment);\n            this._$committedValue = instance;\n        }\n    }\n    // Overridden via `litHtmlPlatformSupport` to provide platform support.\n    /** @internal */\n    _$getTemplate(result) {\n        let template = templateCache.get(result.strings);\n        if (template === undefined) {\n            templateCache.set(result.strings, (template = new Template(result)));\n        }\n        return template;\n    }\n    _commitIterable(value) {\n        // For an Iterable, we create a new InstancePart per item, then set its\n        // value to the item. This is a little bit of overhead for every item in\n        // an Iterable, but it lets us recurse easily and efficiently update Arrays\n        // of TemplateResults that will be commonly returned from expressions like:\n        // array.map((i) => html`${i}`), by reusing existing TemplateInstances.\n        // If value is an array, then the previous render was of an\n        // iterable and value will contain the ChildParts from the previous\n        // render. If value is not an array, clear this part and make a new\n        // array for ChildParts.\n        if (!isArray(this._$committedValue)) {\n            this._$committedValue = [];\n            this._$clear();\n        }\n        // Lets us keep track of how many items we stamped so we can clear leftover\n        // items from a previous render\n        const itemParts = this._$committedValue;\n        let partIndex = 0;\n        let itemPart;\n        for (const item of value) {\n            if (partIndex === itemParts.length) {\n                // If no existing part, create a new one\n                // TODO (justinfagnani): test perf impact of always creating two parts\n                // instead of sharing parts between nodes\n                // https://github.com/lit/lit/issues/1266\n                itemParts.push((itemPart = new ChildPart(this._insert(createMarker()), this._insert(createMarker()), this, this.options)));\n            }\n            else {\n                // Reuse an existing part\n                itemPart = itemParts[partIndex];\n            }\n            itemPart._$setValue(item);\n            partIndex++;\n        }\n        if (partIndex < itemParts.length) {\n            // itemParts always have end nodes\n            this._$clear(itemPart && wrap(itemPart._$endNode).nextSibling, partIndex);\n            // Truncate the parts array so _value reflects the current state\n            itemParts.length = partIndex;\n        }\n    }\n    /**\n     * Removes the nodes contained within this Part from the DOM.\n     *\n     * @param start Start node to clear from, for clearing a subset of the part's\n     *     DOM (used when truncating iterables)\n     * @param from  When `start` is specified, the index within the iterable from\n     *     which ChildParts are being removed, used for disconnecting directives in\n     *     those Parts.\n     *\n     * @internal\n     */\n    _$clear(start = wrap(this._$startNode).nextSibling, from) {\n        var _a;\n        (_a = this._$notifyConnectionChanged) === null || _a === void 0 ? void 0 : _a.call(this, false, true, from);\n        while (start && start !== this._$endNode) {\n            const n = wrap(start).nextSibling;\n            wrap(start).remove();\n            start = n;\n        }\n    }\n    /**\n     * Implementation of RootPart's `isConnected`. Note that this metod\n     * should only be called on `RootPart`s (the `ChildPart` returned from a\n     * top-level `render()` call). It has no effect on non-root ChildParts.\n     * @param isConnected Whether to set\n     * @internal\n     */\n    setConnected(isConnected) {\n        var _a;\n        if (this._$parent === undefined) {\n            this.__isConnected = isConnected;\n            (_a = this._$notifyConnectionChanged) === null || _a === void 0 ? void 0 : _a.call(this, isConnected);\n        }\n        else if (DEV_MODE) {\n            throw new Error('part.setConnected() may only be called on a ' +\n                'RootPart returned from render().');\n        }\n    }\n}\nclass AttributePart {\n    constructor(element, name, strings, parent, options) {\n        this.type = ATTRIBUTE_PART;\n        /** @internal */\n        this._$committedValue = nothing;\n        /** @internal */\n        this._$disconnectableChildren = undefined;\n        this.element = element;\n        this.name = name;\n        this._$parent = parent;\n        this.options = options;\n        if (strings.length > 2 || strings[0] !== '' || strings[1] !== '') {\n            this._$committedValue = new Array(strings.length - 1).fill(nothing);\n            this.strings = strings;\n        }\n        else {\n            this._$committedValue = nothing;\n        }\n        if (ENABLE_EXTRA_SECURITY_HOOKS) {\n            this._sanitizer = undefined;\n        }\n    }\n    get tagName() {\n        return this.element.tagName;\n    }\n    // See comment in Disconnectable interface for why this is a getter\n    get _$isConnected() {\n        return this._$parent._$isConnected;\n    }\n    /**\n     * Sets the value of this part by resolving the value from possibly multiple\n     * values and static strings and committing it to the DOM.\n     * If this part is single-valued, `this._strings` will be undefined, and the\n     * method will be called with a single value argument. If this part is\n     * multi-value, `this._strings` will be defined, and the method is called\n     * with the value array of the part's owning TemplateInstance, and an offset\n     * into the value array from which the values should be read.\n     * This method is overloaded this way to eliminate short-lived array slices\n     * of the template instance values, and allow a fast-path for single-valued\n     * parts.\n     *\n     * @param value The part value, or an array of values for multi-valued parts\n     * @param valueIndex the index to start reading values from. `undefined` for\n     *   single-valued parts\n     * @param noCommit causes the part to not commit its value to the DOM. Used\n     *   in hydration to prime attribute parts with their first-rendered value,\n     *   but not set the attribute, and in SSR to no-op the DOM operation and\n     *   capture the value for serialization.\n     *\n     * @internal\n     */\n    _$setValue(value, directiveParent = this, valueIndex, noCommit) {\n        const strings = this.strings;\n        // Whether any of the values has changed, for dirty-checking\n        let change = false;\n        if (strings === undefined) {\n            // Single-value binding case\n            value = resolveDirective(this, value, directiveParent, 0);\n            change =\n                !isPrimitive(value) ||\n                    (value !== this._$committedValue && value !== noChange);\n            if (change) {\n                this._$committedValue = value;\n            }\n        }\n        else {\n            // Interpolation case\n            const values = value;\n            value = strings[0];\n            let i, v;\n            for (i = 0; i < strings.length - 1; i++) {\n                v = resolveDirective(this, values[valueIndex + i], directiveParent, i);\n                if (v === noChange) {\n                    // If the user-provided value is `noChange`, use the previous value\n                    v = this._$committedValue[i];\n                }\n                change || (change = !isPrimitive(v) || v !== this._$committedValue[i]);\n                if (v === nothing) {\n                    value = nothing;\n                }\n                else if (value !== nothing) {\n                    value += (v !== null && v !== void 0 ? v : '') + strings[i + 1];\n                }\n                // We always record each value, even if one is `nothing`, for future\n                // change detection.\n                this._$committedValue[i] = v;\n            }\n        }\n        if (change && !noCommit) {\n            this._commitValue(value);\n        }\n    }\n    /** @internal */\n    _commitValue(value) {\n        if (value === nothing) {\n            wrap(this.element).removeAttribute(this.name);\n        }\n        else {\n            if (ENABLE_EXTRA_SECURITY_HOOKS) {\n                if (this._sanitizer === undefined) {\n                    this._sanitizer = sanitizerFactoryInternal(this.element, this.name, 'attribute');\n                }\n                value = this._sanitizer(value !== null && value !== void 0 ? value : '');\n            }\n            wrap(this.element).setAttribute(this.name, (value !== null && value !== void 0 ? value : ''));\n        }\n    }\n}\nclass PropertyPart extends AttributePart {\n    constructor() {\n        super(...arguments);\n        this.type = PROPERTY_PART;\n    }\n    /** @internal */\n    _commitValue(value) {\n        if (ENABLE_EXTRA_SECURITY_HOOKS) {\n            if (this._sanitizer === undefined) {\n                this._sanitizer = sanitizerFactoryInternal(this.element, this.name, 'property');\n            }\n            value = this._sanitizer(value);\n        }\n        // eslint-disable-next-line @typescript-eslint/no-explicit-any\n        this.element[this.name] = value === nothing ? undefined : value;\n    }\n}\nclass BooleanAttributePart extends AttributePart {\n    constructor() {\n        super(...arguments);\n        this.type = BOOLEAN_ATTRIBUTE_PART;\n    }\n    /** @internal */\n    _commitValue(value) {\n        if (value && value !== nothing) {\n            wrap(this.element).setAttribute(this.name, '');\n        }\n        else {\n            wrap(this.element).removeAttribute(this.name);\n        }\n    }\n}\nclass EventPart extends AttributePart {\n    constructor() {\n        super(...arguments);\n        this.type = EVENT_PART;\n    }\n    // EventPart does not use the base _$setValue/_resolveValue implementation\n    // since the dirty checking is more complex\n    /** @internal */\n    _$setValue(newListener, directiveParent = this) {\n        var _a;\n        newListener =\n            (_a = resolveDirective(this, newListener, directiveParent, 0)) !== null && _a !== void 0 ? _a : nothing;\n        if (newListener === noChange) {\n            return;\n        }\n        const oldListener = this._$committedValue;\n        // If the new value is nothing or any options change we have to remove the\n        // part as a listener.\n        const shouldRemoveListener = (newListener === nothing && oldListener !== nothing) ||\n            newListener.capture !==\n                oldListener.capture ||\n            newListener.once !==\n                oldListener.once ||\n            newListener.passive !==\n                oldListener.passive;\n        // If the new value is not nothing and we removed the listener, we have\n        // to add the part as a listener.\n        const shouldAddListener = newListener !== nothing &&\n            (oldListener === nothing || shouldRemoveListener);\n        if (shouldRemoveListener) {\n            this.element.removeEventListener(this.name, this, oldListener);\n        }\n        if (shouldAddListener) {\n            // Beware: IE11 and Chrome 41 don't like using the listener as the\n            // options object. Figure out how to deal w/ this in IE11 - maybe\n            // patch addEventListener?\n            this.element.addEventListener(this.name, this, newListener);\n        }\n        this._$committedValue = newListener;\n    }\n    handleEvent(event) {\n        var _a, _b;\n        if (typeof this._$committedValue === 'function') {\n            // TODO (justinfagnani): do we need to default to this.element?\n            // It'll always be the same as `e.currentTarget`.\n            this._$committedValue.call((_b = (_a = this.options) === null || _a === void 0 ? void 0 : _a.host) !== null && _b !== void 0 ? _b : this.element, event);\n        }\n        else {\n            this._$committedValue.handleEvent(event);\n        }\n    }\n}\nclass ElementPart {\n    constructor(element, parent, options) {\n        this.element = element;\n        this.type = ELEMENT_PART;\n        /** @internal */\n        this._$disconnectableChildren = undefined;\n        this._$parent = parent;\n        this.options = options;\n    }\n    // See comment in Disconnectable interface for why this is a getter\n    get _$isConnected() {\n        return this._$parent._$isConnected;\n    }\n    _$setValue(value) {\n        resolveDirective(this, value);\n    }\n}\n/**\n * END USERS SHOULD NOT RELY ON THIS OBJECT.\n *\n * Private exports for use by other Lit packages, not intended for use by\n * external users.\n *\n * We currently do not make a mangled rollup build of the lit-ssr code. In order\n * to keep a number of (otherwise private) top-level exports  mangled in the\n * client side code, we export a _$LH object containing those members (or\n * helper methods for accessing private fields of those members), and then\n * re-export them for use in lit-ssr. This keeps lit-ssr agnostic to whether the\n * client-side code is being used in `dev` mode or `prod` mode.\n *\n * This has a unique name, to disambiguate it from private exports in\n * lit-element, which re-exports all of lit-html.\n *\n * @private\n */\nconst _$LH = {\n    // Used in lit-ssr\n    _boundAttributeSuffix: boundAttributeSuffix,\n    _marker: marker,\n    _markerMatch: markerMatch,\n    _HTML_RESULT: HTML_RESULT,\n    _getTemplateHtml: getTemplateHtml,\n    // Used in hydrate\n    _TemplateInstance: TemplateInstance,\n    _isIterable: isIterable,\n    _resolveDirective: resolveDirective,\n    // Used in tests and private-ssr-support\n    _ChildPart: ChildPart,\n    _AttributePart: AttributePart,\n    _BooleanAttributePart: BooleanAttributePart,\n    _EventPart: EventPart,\n    _PropertyPart: PropertyPart,\n    _ElementPart: ElementPart,\n};\n// Apply polyfills if available\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\n(_d = (_c = globalThis)['litHtmlPlatformSupport']) === null || _d === void 0 ? void 0 : _d.call(_c, Template, ChildPart);\n// IMPORTANT: do not change the property name or the assignment expression.\n// This line will be used in regexes to search for lit-html usage.\n// TODO(justinfagnani): inject version number at build time\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\n((_e = (_f = globalThis)['litHtmlVersions']) !== null && _e !== void 0 ? _e : (_f['litHtmlVersions'] = [])).push('2.0.0-rc.4');\n//# sourceMappingURL=lit-html.js.map\n\n//# sourceURL=webpack://@vertzo/app/../../node_modules/lit-html/development/lit-html.js?");

/***/ }),

/***/ "../../node_modules/lit/directives/live.js":
/*!*************************************************!*\
  !*** ../../node_modules/lit/directives/live.js ***!
  \*************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"live\": () => (/* reexport safe */ lit_html_directives_live_js__WEBPACK_IMPORTED_MODULE_0__.live)\n/* harmony export */ });\n/* harmony import */ var lit_html_directives_live_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! lit-html/directives/live.js */ \"../../node_modules/lit-html/development/directives/live.js\");\n\n//# sourceMappingURL=live.js.map\n\n\n//# sourceURL=webpack://@vertzo/app/../../node_modules/lit/directives/live.js?");

/***/ }),

/***/ "../../node_modules/lit/index.js":
/*!***************************************!*\
  !*** ../../node_modules/lit/index.js ***!
  \***************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"CSSResult\": () => (/* reexport safe */ lit_element_lit_element_js__WEBPACK_IMPORTED_MODULE_2__.CSSResult),\n/* harmony export */   \"INTERNAL\": () => (/* reexport safe */ lit_element_lit_element_js__WEBPACK_IMPORTED_MODULE_2__.INTERNAL),\n/* harmony export */   \"LitElement\": () => (/* reexport safe */ lit_element_lit_element_js__WEBPACK_IMPORTED_MODULE_2__.LitElement),\n/* harmony export */   \"ReactiveElement\": () => (/* reexport safe */ lit_element_lit_element_js__WEBPACK_IMPORTED_MODULE_2__.ReactiveElement),\n/* harmony export */   \"UpdatingElement\": () => (/* reexport safe */ lit_element_lit_element_js__WEBPACK_IMPORTED_MODULE_2__.UpdatingElement),\n/* harmony export */   \"_$LE\": () => (/* reexport safe */ lit_element_lit_element_js__WEBPACK_IMPORTED_MODULE_2__._$LE),\n/* harmony export */   \"_$LH\": () => (/* reexport safe */ lit_element_lit_element_js__WEBPACK_IMPORTED_MODULE_2__._$LH),\n/* harmony export */   \"adoptStyles\": () => (/* reexport safe */ lit_element_lit_element_js__WEBPACK_IMPORTED_MODULE_2__.adoptStyles),\n/* harmony export */   \"css\": () => (/* reexport safe */ lit_element_lit_element_js__WEBPACK_IMPORTED_MODULE_2__.css),\n/* harmony export */   \"defaultConverter\": () => (/* reexport safe */ lit_element_lit_element_js__WEBPACK_IMPORTED_MODULE_2__.defaultConverter),\n/* harmony export */   \"getCompatibleStyle\": () => (/* reexport safe */ lit_element_lit_element_js__WEBPACK_IMPORTED_MODULE_2__.getCompatibleStyle),\n/* harmony export */   \"html\": () => (/* reexport safe */ lit_element_lit_element_js__WEBPACK_IMPORTED_MODULE_2__.html),\n/* harmony export */   \"noChange\": () => (/* reexport safe */ lit_element_lit_element_js__WEBPACK_IMPORTED_MODULE_2__.noChange),\n/* harmony export */   \"notEqual\": () => (/* reexport safe */ lit_element_lit_element_js__WEBPACK_IMPORTED_MODULE_2__.notEqual),\n/* harmony export */   \"nothing\": () => (/* reexport safe */ lit_element_lit_element_js__WEBPACK_IMPORTED_MODULE_2__.nothing),\n/* harmony export */   \"render\": () => (/* reexport safe */ lit_element_lit_element_js__WEBPACK_IMPORTED_MODULE_2__.render),\n/* harmony export */   \"supportsAdoptingStyleSheets\": () => (/* reexport safe */ lit_element_lit_element_js__WEBPACK_IMPORTED_MODULE_2__.supportsAdoptingStyleSheets),\n/* harmony export */   \"svg\": () => (/* reexport safe */ lit_element_lit_element_js__WEBPACK_IMPORTED_MODULE_2__.svg),\n/* harmony export */   \"unsafeCSS\": () => (/* reexport safe */ lit_element_lit_element_js__WEBPACK_IMPORTED_MODULE_2__.unsafeCSS)\n/* harmony export */ });\n/* harmony import */ var _lit_reactive_element__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @lit/reactive-element */ \"../../node_modules/@lit/reactive-element/development/reactive-element.js\");\n/* harmony import */ var lit_html__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! lit-html */ \"../../node_modules/lit-html/development/lit-html.js\");\n/* harmony import */ var lit_element_lit_element_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! lit-element/lit-element.js */ \"../../node_modules/lit-element/development/lit-element.js\");\n\n//# sourceMappingURL=index.js.map\n\n\n//# sourceURL=webpack://@vertzo/app/../../node_modules/lit/index.js?");

/***/ }),

/***/ "../../node_modules/timezones-list/dist/timezones.json":
/*!*************************************************************!*\
  !*** ../../node_modules/timezones-list/dist/timezones.json ***!
  \*************************************************************/
/***/ ((module) => {

eval("module.exports = JSON.parse('[{\"label\":\"Pacific/Midway (GMT-11:00)\",\"tzCode\":\"Pacific/Midway\",\"name\":\"(GMT-11:00) Midway\",\"utc\":\"-11:00\"},{\"label\":\"Pacific/Niue (GMT-11:00)\",\"tzCode\":\"Pacific/Niue\",\"name\":\"(GMT-11:00) Alofi\",\"utc\":\"-11:00\"},{\"label\":\"Pacific/Pago_Pago (GMT-11:00)\",\"tzCode\":\"Pacific/Pago_Pago\",\"name\":\"(GMT-11:00) Pago Pago, Tāfuna, Ta`ū, Taulaga\",\"utc\":\"-11:00\"},{\"label\":\"America/Adak (GMT-10:00)\",\"tzCode\":\"America/Adak\",\"name\":\"(GMT-10:00) Adak\",\"utc\":\"-10:00\"},{\"label\":\"Pacific/Honolulu (GMT-10:00)\",\"tzCode\":\"Pacific/Honolulu\",\"name\":\"(GMT-10:00) Honolulu, East Honolulu, Pearl City, Hilo, Kailua\",\"utc\":\"-10:00\"},{\"label\":\"Pacific/Rarotonga (GMT-10:00)\",\"tzCode\":\"Pacific/Rarotonga\",\"name\":\"(GMT-10:00) Avarua\",\"utc\":\"-10:00\"},{\"label\":\"Pacific/Tahiti (GMT-10:00)\",\"tzCode\":\"Pacific/Tahiti\",\"name\":\"(GMT-10:00) Faaa, Papeete, Punaauia, Pirae, Mahina\",\"utc\":\"-10:00\"},{\"label\":\"Pacific/Marquesas (GMT-09:30)\",\"tzCode\":\"Pacific/Marquesas\",\"name\":\"(GMT-09:30) Taiohae\",\"utc\":\"-09:30\"},{\"label\":\"America/Anchorage (GMT-09:00)\",\"tzCode\":\"America/Anchorage\",\"name\":\"(GMT-09:00) Anchorage, Fairbanks, Eagle River, Badger, Knik-Fairview\",\"utc\":\"-09:00\"},{\"label\":\"America/Juneau (GMT-09:00)\",\"tzCode\":\"America/Juneau\",\"name\":\"(GMT-09:00) Juneau\",\"utc\":\"-09:00\"},{\"label\":\"America/Metlakatla (GMT-09:00)\",\"tzCode\":\"America/Metlakatla\",\"name\":\"(GMT-09:00) Metlakatla\",\"utc\":\"-09:00\"},{\"label\":\"America/Nome (GMT-09:00)\",\"tzCode\":\"America/Nome\",\"name\":\"(GMT-09:00) Nome\",\"utc\":\"-09:00\"},{\"label\":\"America/Sitka (GMT-09:00)\",\"tzCode\":\"America/Sitka\",\"name\":\"(GMT-09:00) Sitka, Ketchikan\",\"utc\":\"-09:00\"},{\"label\":\"America/Yakutat (GMT-09:00)\",\"tzCode\":\"America/Yakutat\",\"name\":\"(GMT-09:00) Yakutat\",\"utc\":\"-09:00\"},{\"label\":\"Pacific/Gambier (GMT-09:00)\",\"tzCode\":\"Pacific/Gambier\",\"name\":\"(GMT-09:00) Gambier\",\"utc\":\"-09:00\"},{\"label\":\"America/Los_Angeles (GMT-08:00)\",\"tzCode\":\"America/Los_Angeles\",\"name\":\"(GMT-08:00) Los Angeles, San Diego, San Jose, San Francisco, Seattle\",\"utc\":\"-08:00\"},{\"label\":\"America/Tijuana (GMT-08:00)\",\"tzCode\":\"America/Tijuana\",\"name\":\"(GMT-08:00) Tijuana, Mexicali, Ensenada, Rosarito, Tecate\",\"utc\":\"-08:00\"},{\"label\":\"America/Vancouver (GMT-08:00)\",\"tzCode\":\"America/Vancouver\",\"name\":\"(GMT-08:00) Vancouver, Surrey, Okanagan, Victoria, Burnaby\",\"utc\":\"-08:00\"},{\"label\":\"Pacific/Pitcairn (GMT-08:00)\",\"tzCode\":\"Pacific/Pitcairn\",\"name\":\"(GMT-08:00) Adamstown\",\"utc\":\"-08:00\"},{\"label\":\"America/Boise (GMT-07:00)\",\"tzCode\":\"America/Boise\",\"name\":\"(GMT-07:00) Boise, Meridian, Nampa, Idaho Falls, Pocatello\",\"utc\":\"-07:00\"},{\"label\":\"America/Cambridge_Bay (GMT-07:00)\",\"tzCode\":\"America/Cambridge_Bay\",\"name\":\"(GMT-07:00) Cambridge Bay\",\"utc\":\"-07:00\"},{\"label\":\"America/Chihuahua (GMT-07:00)\",\"tzCode\":\"America/Chihuahua\",\"name\":\"(GMT-07:00) Chihuahua, Ciudad Delicias, Cuauhtémoc, Parral, Nuevo Casas Grandes\",\"utc\":\"-07:00\"},{\"label\":\"America/Creston (GMT-07:00)\",\"tzCode\":\"America/Creston\",\"name\":\"(GMT-07:00) Creston\",\"utc\":\"-07:00\"},{\"label\":\"America/Dawson (GMT-07:00)\",\"tzCode\":\"America/Dawson\",\"name\":\"(GMT-07:00) Dawson\",\"utc\":\"-07:00\"},{\"label\":\"America/Dawson_Creek (GMT-07:00)\",\"tzCode\":\"America/Dawson_Creek\",\"name\":\"(GMT-07:00) Fort St. John, Dawson Creek\",\"utc\":\"-07:00\"},{\"label\":\"America/Denver (GMT-07:00)\",\"tzCode\":\"America/Denver\",\"name\":\"(GMT-07:00) Denver, El Paso, Albuquerque, Colorado Springs, Aurora\",\"utc\":\"-07:00\"},{\"label\":\"America/Edmonton (GMT-07:00)\",\"tzCode\":\"America/Edmonton\",\"name\":\"(GMT-07:00) Calgary, Edmonton, Fort McMurray, Red Deer, Lethbridge\",\"utc\":\"-07:00\"},{\"label\":\"America/Fort_Nelson (GMT-07:00)\",\"tzCode\":\"America/Fort_Nelson\",\"name\":\"(GMT-07:00) Fort Nelson\",\"utc\":\"-07:00\"},{\"label\":\"America/Hermosillo (GMT-07:00)\",\"tzCode\":\"America/Hermosillo\",\"name\":\"(GMT-07:00) Hermosillo, Ciudad Obregón, Nogales, San Luis Río Colorado, Navojoa\",\"utc\":\"-07:00\"},{\"label\":\"America/Inuvik (GMT-07:00)\",\"tzCode\":\"America/Inuvik\",\"name\":\"(GMT-07:00) Inuvik\",\"utc\":\"-07:00\"},{\"label\":\"America/Mazatlan (GMT-07:00)\",\"tzCode\":\"America/Mazatlan\",\"name\":\"(GMT-07:00) Culiacán, Mazatlán, Tepic, Los Mochis, La Paz\",\"utc\":\"-07:00\"},{\"label\":\"America/Ojinaga (GMT-07:00)\",\"tzCode\":\"America/Ojinaga\",\"name\":\"(GMT-07:00) Ciudad Juárez, Manuel Ojinaga, Ojinaga\",\"utc\":\"-07:00\"},{\"label\":\"America/Phoenix (GMT-07:00)\",\"tzCode\":\"America/Phoenix\",\"name\":\"(GMT-07:00) Phoenix, Tucson, Mesa, Chandler, Gilbert\",\"utc\":\"-07:00\"},{\"label\":\"America/Whitehorse (GMT-07:00)\",\"tzCode\":\"America/Whitehorse\",\"name\":\"(GMT-07:00) Whitehorse\",\"utc\":\"-07:00\"},{\"label\":\"America/Yellowknife (GMT-07:00)\",\"tzCode\":\"America/Yellowknife\",\"name\":\"(GMT-07:00) Yellowknife\",\"utc\":\"-07:00\"},{\"label\":\"America/Bahia_Banderas (GMT-06:00)\",\"tzCode\":\"America/Bahia_Banderas\",\"name\":\"(GMT-06:00) Mezcales, San Vicente, Bucerías, Valle de Banderas\",\"utc\":\"-06:00\"},{\"label\":\"America/Belize (GMT-06:00)\",\"tzCode\":\"America/Belize\",\"name\":\"(GMT-06:00) Belize City, San Ignacio, Orange Walk, Belmopan, Dangriga\",\"utc\":\"-06:00\"},{\"label\":\"America/Chicago (GMT-06:00)\",\"tzCode\":\"America/Chicago\",\"name\":\"(GMT-06:00) Chicago, Houston, San Antonio, Dallas, Austin\",\"utc\":\"-06:00\"},{\"label\":\"America/Costa_Rica (GMT-06:00)\",\"tzCode\":\"America/Costa_Rica\",\"name\":\"(GMT-06:00) San José, Limón, San Francisco, Alajuela, Liberia\",\"utc\":\"-06:00\"},{\"label\":\"America/El_Salvador (GMT-06:00)\",\"tzCode\":\"America/El_Salvador\",\"name\":\"(GMT-06:00) San Salvador, Soyapango, Santa Ana, San Miguel, Mejicanos\",\"utc\":\"-06:00\"},{\"label\":\"America/Guatemala (GMT-06:00)\",\"tzCode\":\"America/Guatemala\",\"name\":\"(GMT-06:00) Guatemala City, Mixco, Villa Nueva, Petapa, San Juan Sacatepéquez\",\"utc\":\"-06:00\"},{\"label\":\"America/Indiana/Knox (GMT-06:00)\",\"tzCode\":\"America/Indiana/Knox\",\"name\":\"(GMT-06:00) Knox\",\"utc\":\"-06:00\"},{\"label\":\"America/Indiana/Tell_City (GMT-06:00)\",\"tzCode\":\"America/Indiana/Tell_City\",\"name\":\"(GMT-06:00) Tell City\",\"utc\":\"-06:00\"},{\"label\":\"America/Managua (GMT-06:00)\",\"tzCode\":\"America/Managua\",\"name\":\"(GMT-06:00) Managua, León, Masaya, Chinandega, Matagalpa\",\"utc\":\"-06:00\"},{\"label\":\"America/Matamoros (GMT-06:00)\",\"tzCode\":\"America/Matamoros\",\"name\":\"(GMT-06:00) Reynosa, Heroica Matamoros, Nuevo Laredo, Piedras Negras, Ciudad Acuña\",\"utc\":\"-06:00\"},{\"label\":\"America/Menominee (GMT-06:00)\",\"tzCode\":\"America/Menominee\",\"name\":\"(GMT-06:00) Menominee, Iron Mountain, Kingsford, Ironwood, Iron River\",\"utc\":\"-06:00\"},{\"label\":\"America/Merida (GMT-06:00)\",\"tzCode\":\"America/Merida\",\"name\":\"(GMT-06:00) Mérida, Campeche, Ciudad del Carmen, Kanasín, Valladolid\",\"utc\":\"-06:00\"},{\"label\":\"America/Mexico_City (GMT-06:00)\",\"tzCode\":\"America/Mexico_City\",\"name\":\"(GMT-06:00) Mexico City, Iztapalapa, Ecatepec de Morelos, Guadalajara, Puebla\",\"utc\":\"-06:00\"},{\"label\":\"America/Monterrey (GMT-06:00)\",\"tzCode\":\"America/Monterrey\",\"name\":\"(GMT-06:00) Monterrey, Saltillo, Guadalupe, Torreón, Victoria de Durango\",\"utc\":\"-06:00\"},{\"label\":\"America/North_Dakota/Beulah (GMT-06:00)\",\"tzCode\":\"America/North_Dakota/Beulah\",\"name\":\"(GMT-06:00) Beulah\",\"utc\":\"-06:00\"},{\"label\":\"America/North_Dakota/Center (GMT-06:00)\",\"tzCode\":\"America/North_Dakota/Center\",\"name\":\"(GMT-06:00) Center\",\"utc\":\"-06:00\"},{\"label\":\"America/North_Dakota/New_Salem (GMT-06:00)\",\"tzCode\":\"America/North_Dakota/New_Salem\",\"name\":\"(GMT-06:00) Mandan\",\"utc\":\"-06:00\"},{\"label\":\"America/Rainy_River (GMT-06:00)\",\"tzCode\":\"America/Rainy_River\",\"name\":\"(GMT-06:00) Rainy River\",\"utc\":\"-06:00\"},{\"label\":\"America/Rankin_Inlet (GMT-06:00)\",\"tzCode\":\"America/Rankin_Inlet\",\"name\":\"(GMT-06:00) Rankin Inlet\",\"utc\":\"-06:00\"},{\"label\":\"America/Regina (GMT-06:00)\",\"tzCode\":\"America/Regina\",\"name\":\"(GMT-06:00) Saskatoon, Regina, Prince Albert, Moose Jaw, North Battleford\",\"utc\":\"-06:00\"},{\"label\":\"America/Resolute (GMT-06:00)\",\"tzCode\":\"America/Resolute\",\"name\":\"(GMT-06:00) Resolute\",\"utc\":\"-06:00\"},{\"label\":\"America/Swift_Current (GMT-06:00)\",\"tzCode\":\"America/Swift_Current\",\"name\":\"(GMT-06:00) Swift Current\",\"utc\":\"-06:00\"},{\"label\":\"America/Tegucigalpa (GMT-06:00)\",\"tzCode\":\"America/Tegucigalpa\",\"name\":\"(GMT-06:00) Tegucigalpa, San Pedro Sula, Choloma, La Ceiba, El Progreso\",\"utc\":\"-06:00\"},{\"label\":\"America/Winnipeg (GMT-06:00)\",\"tzCode\":\"America/Winnipeg\",\"name\":\"(GMT-06:00) Winnipeg, Brandon, Kenora, Portage la Prairie, Thompson\",\"utc\":\"-06:00\"},{\"label\":\"Pacific/Easter (GMT-06:00)\",\"tzCode\":\"Pacific/Easter\",\"name\":\"(GMT-06:00) Easter\",\"utc\":\"-06:00\"},{\"label\":\"Pacific/Galapagos (GMT-06:00)\",\"tzCode\":\"Pacific/Galapagos\",\"name\":\"(GMT-06:00) Puerto Ayora, Puerto Baquerizo Moreno\",\"utc\":\"-06:00\"},{\"label\":\"America/Atikokan (GMT-05:00)\",\"tzCode\":\"America/Atikokan\",\"name\":\"(GMT-05:00) Atikokan\",\"utc\":\"-05:00\"},{\"label\":\"America/Bogota (GMT-05:00)\",\"tzCode\":\"America/Bogota\",\"name\":\"(GMT-05:00) Bogotá, Cali, Medellín, Barranquilla, Cartagena\",\"utc\":\"-05:00\"},{\"label\":\"America/Cancun (GMT-05:00)\",\"tzCode\":\"America/Cancun\",\"name\":\"(GMT-05:00) Cancún, Chetumal, Playa del Carmen, Cozumel, Felipe Carrillo Puerto\",\"utc\":\"-05:00\"},{\"label\":\"America/Cayman (GMT-05:00)\",\"tzCode\":\"America/Cayman\",\"name\":\"(GMT-05:00) George Town, West Bay, Bodden Town, East End, North Side\",\"utc\":\"-05:00\"},{\"label\":\"America/Detroit (GMT-05:00)\",\"tzCode\":\"America/Detroit\",\"name\":\"(GMT-05:00) Detroit, Grand Rapids, Warren, Sterling Heights, Ann Arbor\",\"utc\":\"-05:00\"},{\"label\":\"America/Eirunepe (GMT-05:00)\",\"tzCode\":\"America/Eirunepe\",\"name\":\"(GMT-05:00) Eirunepé, Benjamin Constant, Envira\",\"utc\":\"-05:00\"},{\"label\":\"America/Grand_Turk (GMT-05:00)\",\"tzCode\":\"America/Grand_Turk\",\"name\":\"(GMT-05:00) Cockburn Town\",\"utc\":\"-05:00\"},{\"label\":\"America/Guayaquil (GMT-05:00)\",\"tzCode\":\"America/Guayaquil\",\"name\":\"(GMT-05:00) Guayaquil, Quito, Cuenca, Santo Domingo de los Colorados, Machala\",\"utc\":\"-05:00\"},{\"label\":\"America/Havana (GMT-05:00)\",\"tzCode\":\"America/Havana\",\"name\":\"(GMT-05:00) Havana, Santiago de Cuba, Camagüey, Holguín, Guantánamo\",\"utc\":\"-05:00\"},{\"label\":\"America/Indiana/Indianapolis (GMT-05:00)\",\"tzCode\":\"America/Indiana/Indianapolis\",\"name\":\"(GMT-05:00) Indianapolis, Fort Wayne, South Bend, Carmel, Bloomington\",\"utc\":\"-05:00\"},{\"label\":\"America/Indiana/Marengo (GMT-05:00)\",\"tzCode\":\"America/Indiana/Marengo\",\"name\":\"(GMT-05:00) Marengo\",\"utc\":\"-05:00\"},{\"label\":\"America/Indiana/Petersburg (GMT-05:00)\",\"tzCode\":\"America/Indiana/Petersburg\",\"name\":\"(GMT-05:00) Petersburg\",\"utc\":\"-05:00\"},{\"label\":\"America/Indiana/Vevay (GMT-05:00)\",\"tzCode\":\"America/Indiana/Vevay\",\"name\":\"(GMT-05:00) Vevay\",\"utc\":\"-05:00\"},{\"label\":\"America/Indiana/Vincennes (GMT-05:00)\",\"tzCode\":\"America/Indiana/Vincennes\",\"name\":\"(GMT-05:00) Vincennes, Jasper, Washington, Huntingburg\",\"utc\":\"-05:00\"},{\"label\":\"America/Indiana/Winamac (GMT-05:00)\",\"tzCode\":\"America/Indiana/Winamac\",\"name\":\"(GMT-05:00) Winamac\",\"utc\":\"-05:00\"},{\"label\":\"America/Iqaluit (GMT-05:00)\",\"tzCode\":\"America/Iqaluit\",\"name\":\"(GMT-05:00) Iqaluit\",\"utc\":\"-05:00\"},{\"label\":\"America/Jamaica (GMT-05:00)\",\"tzCode\":\"America/Jamaica\",\"name\":\"(GMT-05:00) Kingston, New Kingston, Spanish Town, Portmore, Montego Bay\",\"utc\":\"-05:00\"},{\"label\":\"America/Kentucky/Louisville (GMT-05:00)\",\"tzCode\":\"America/Kentucky/Louisville\",\"name\":\"(GMT-05:00) Louisville, Jeffersonville, New Albany, Jeffersontown, Pleasure Ridge Park\",\"utc\":\"-05:00\"},{\"label\":\"America/Kentucky/Monticello (GMT-05:00)\",\"tzCode\":\"America/Kentucky/Monticello\",\"name\":\"(GMT-05:00) Monticello\",\"utc\":\"-05:00\"},{\"label\":\"America/Lima (GMT-05:00)\",\"tzCode\":\"America/Lima\",\"name\":\"(GMT-05:00) Lima, Arequipa, Callao, Trujillo, Chiclayo\",\"utc\":\"-05:00\"},{\"label\":\"America/Nassau (GMT-05:00)\",\"tzCode\":\"America/Nassau\",\"name\":\"(GMT-05:00) Nassau, Lucaya, Freeport, West End, Cooper’s Town\",\"utc\":\"-05:00\"},{\"label\":\"America/New_York (GMT-05:00)\",\"tzCode\":\"America/New_York\",\"name\":\"(GMT-05:00) New York City, Brooklyn, Queens, Philadelphia, Manhattan\",\"utc\":\"-05:00\"},{\"label\":\"America/Nipigon (GMT-05:00)\",\"tzCode\":\"America/Nipigon\",\"name\":\"(GMT-05:00) Nipigon\",\"utc\":\"-05:00\"},{\"label\":\"America/Panama (GMT-05:00)\",\"tzCode\":\"America/Panama\",\"name\":\"(GMT-05:00) Panamá, San Miguelito, Juan Díaz, David, Arraiján\",\"utc\":\"-05:00\"},{\"label\":\"America/Pangnirtung (GMT-05:00)\",\"tzCode\":\"America/Pangnirtung\",\"name\":\"(GMT-05:00) Pangnirtung\",\"utc\":\"-05:00\"},{\"label\":\"America/Port-au-Prince (GMT-05:00)\",\"tzCode\":\"America/Port-au-Prince\",\"name\":\"(GMT-05:00) Port-au-Prince, Carrefour, Delmas 73, Pétionville, Port-de-Paix\",\"utc\":\"-05:00\"},{\"label\":\"America/Rio_Branco (GMT-05:00)\",\"tzCode\":\"America/Rio_Branco\",\"name\":\"(GMT-05:00) Rio Branco, Cruzeiro do Sul, Sena Madureira, Tarauacá, Feijó\",\"utc\":\"-05:00\"},{\"label\":\"America/Thunder_Bay (GMT-05:00)\",\"tzCode\":\"America/Thunder_Bay\",\"name\":\"(GMT-05:00) Thunder Bay\",\"utc\":\"-05:00\"},{\"label\":\"America/Toronto (GMT-05:00)\",\"tzCode\":\"America/Toronto\",\"name\":\"(GMT-05:00) Toronto, Montréal, Ottawa, Mississauga, Québec\",\"utc\":\"-05:00\"},{\"label\":\"America/AnguillaSandy Hill (GMT-04:00)\",\"tzCode\":\"America/AnguillaSandy Hill\",\"name\":\"(GMT-04:00) The Valley, Blowing Point Village, Sandy Ground Village, The Quarter, Sandy Hill\",\"utc\":\"-04:00\"},{\"label\":\"America/Antigua (GMT-04:00)\",\"tzCode\":\"America/Antigua\",\"name\":\"(GMT-04:00) Saint John’s, Piggotts, Bolands, Codrington, Parham\",\"utc\":\"-04:00\"},{\"label\":\"America/Aruba (GMT-04:00)\",\"tzCode\":\"America/Aruba\",\"name\":\"(GMT-04:00) Oranjestad, Tanki Leendert, San Nicolas, Santa Cruz, Paradera\",\"utc\":\"-04:00\"},{\"label\":\"America/Asuncion (GMT-04:00)\",\"tzCode\":\"America/Asuncion\",\"name\":\"(GMT-04:00) Asunción, Ciudad del Este, San Lorenzo, Capiatá, Lambaré\",\"utc\":\"-04:00\"},{\"label\":\"America/Barbados (GMT-04:00)\",\"tzCode\":\"America/Barbados\",\"name\":\"(GMT-04:00) Bridgetown, Speightstown, Oistins, Bathsheba, Holetown\",\"utc\":\"-04:00\"},{\"label\":\"America/Blanc-Sablon (GMT-04:00)\",\"tzCode\":\"America/Blanc-Sablon\",\"name\":\"(GMT-04:00) Lévis\",\"utc\":\"-04:00\"},{\"label\":\"America/Boa_Vista (GMT-04:00)\",\"tzCode\":\"America/Boa_Vista\",\"name\":\"(GMT-04:00) Boa Vista\",\"utc\":\"-04:00\"},{\"label\":\"America/Campo_Grande (GMT-04:00)\",\"tzCode\":\"America/Campo_Grande\",\"name\":\"(GMT-04:00) Campo Grande, Dourados, Corumbá, Três Lagoas, Ponta Porã\",\"utc\":\"-04:00\"},{\"label\":\"America/Caracas (GMT-04:00)\",\"tzCode\":\"America/Caracas\",\"name\":\"(GMT-04:00) Caracas, Maracaibo, Maracay, Valencia, Barquisimeto\",\"utc\":\"-04:00\"},{\"label\":\"America/Cuiaba (GMT-04:00)\",\"tzCode\":\"America/Cuiaba\",\"name\":\"(GMT-04:00) Cuiabá, Várzea Grande, Rondonópolis, Sinop, Barra do Garças\",\"utc\":\"-04:00\"},{\"label\":\"America/Curacao (GMT-04:00)\",\"tzCode\":\"America/Curacao\",\"name\":\"(GMT-04:00) Willemstad, Sint Michiel Liber\",\"utc\":\"-04:00\"},{\"label\":\"America/Dominica (GMT-04:00)\",\"tzCode\":\"America/Dominica\",\"name\":\"(GMT-04:00) Roseau, Portsmouth, Berekua, Saint Joseph, Wesley\",\"utc\":\"-04:00\"},{\"label\":\"America/Glace_Bay (GMT-04:00)\",\"tzCode\":\"America/Glace_Bay\",\"name\":\"(GMT-04:00) Sydney, Glace Bay, Sydney Mines\",\"utc\":\"-04:00\"},{\"label\":\"America/Goose_Bay (GMT-04:00)\",\"tzCode\":\"America/Goose_Bay\",\"name\":\"(GMT-04:00) Labrador City, Happy Valley-Goose Bay\",\"utc\":\"-04:00\"},{\"label\":\"America/Grenada (GMT-04:00)\",\"tzCode\":\"America/Grenada\",\"name\":\"(GMT-04:00) Saint George\\'s, Gouyave, Grenville, Victoria, Saint David’s\",\"utc\":\"-04:00\"},{\"label\":\"America/Guadeloupe (GMT-04:00)\",\"tzCode\":\"America/Guadeloupe\",\"name\":\"(GMT-04:00) Les Abymes, Baie-Mahault, Le Gosier, Petit-Bourg, Sainte-Anne\",\"utc\":\"-04:00\"},{\"label\":\"America/Guyana (GMT-04:00)\",\"tzCode\":\"America/Guyana\",\"name\":\"(GMT-04:00) Georgetown, Linden, New Amsterdam, Anna Regina, Bartica\",\"utc\":\"-04:00\"},{\"label\":\"America/Halifax (GMT-04:00)\",\"tzCode\":\"America/Halifax\",\"name\":\"(GMT-04:00) Halifax, Dartmouth, Charlottetown, Lower Sackville, Truro\",\"utc\":\"-04:00\"},{\"label\":\"America/Kralendijk (GMT-04:00)\",\"tzCode\":\"America/Kralendijk\",\"name\":\"(GMT-04:00) Kralendijk, Oranjestad, The Bottom\",\"utc\":\"-04:00\"},{\"label\":\"America/La_Paz (GMT-04:00)\",\"tzCode\":\"America/La_Paz\",\"name\":\"(GMT-04:00) Santa Cruz de la Sierra, Cochabamba, La Paz, Sucre, Oruro\",\"utc\":\"-04:00\"},{\"label\":\"America/Lower_Princes (GMT-04:00)\",\"tzCode\":\"America/Lower_Princes\",\"name\":\"(GMT-04:00) Cul de Sac, Lower Prince’s Quarter, Koolbaai, Philipsburg\",\"utc\":\"-04:00\"},{\"label\":\"America/Manaus (GMT-04:00)\",\"tzCode\":\"America/Manaus\",\"name\":\"(GMT-04:00) Manaus, Itacoatiara, Parintins, Manacapuru, Coari\",\"utc\":\"-04:00\"},{\"label\":\"America/Marigot (GMT-04:00)\",\"tzCode\":\"America/Marigot\",\"name\":\"(GMT-04:00) Marigot\",\"utc\":\"-04:00\"},{\"label\":\"America/Martinique (GMT-04:00)\",\"tzCode\":\"America/Martinique\",\"name\":\"(GMT-04:00) Fort-de-France, Le Lamentin, Le Robert, Sainte-Marie, Le François\",\"utc\":\"-04:00\"},{\"label\":\"America/Moncton (GMT-04:00)\",\"tzCode\":\"America/Moncton\",\"name\":\"(GMT-04:00) Moncton, Saint John, Fredericton, Dieppe, Miramichi\",\"utc\":\"-04:00\"},{\"label\":\"America/Montserrat (GMT-04:00)\",\"tzCode\":\"America/Montserrat\",\"name\":\"(GMT-04:00) Brades, Saint Peters, Plymouth\",\"utc\":\"-04:00\"},{\"label\":\"America/Porto_Velho (GMT-04:00)\",\"tzCode\":\"America/Porto_Velho\",\"name\":\"(GMT-04:00) Porto Velho, Ji Paraná, Vilhena, Ariquemes, Cacoal\",\"utc\":\"-04:00\"},{\"label\":\"America/Port_of_Spain (GMT-04:00)\",\"tzCode\":\"America/Port_of_Spain\",\"name\":\"(GMT-04:00) Chaguanas, Mon Repos, San Fernando, Port of Spain, Rio Claro\",\"utc\":\"-04:00\"},{\"label\":\"America/Puerto_Rico (GMT-04:00)\",\"tzCode\":\"America/Puerto_Rico\",\"name\":\"(GMT-04:00) San Juan, Bayamón, Carolina, Ponce, Caguas\",\"utc\":\"-04:00\"},{\"label\":\"America/Santiago (GMT-04:00)\",\"tzCode\":\"America/Santiago\",\"name\":\"(GMT-04:00) Santiago, Puente Alto, Antofagasta, Viña del Mar, Valparaíso\",\"utc\":\"-04:00\"},{\"label\":\"America/Santo_Domingo (GMT-04:00)\",\"tzCode\":\"America/Santo_Domingo\",\"name\":\"(GMT-04:00) Santo Domingo, Santiago de los Caballeros, Santo Domingo Oeste, Santo Domingo Este, San Pedro de Macorís\",\"utc\":\"-04:00\"},{\"label\":\"America/St_Barthelemy (GMT-04:00)\",\"tzCode\":\"America/St_Barthelemy\",\"name\":\"(GMT-04:00) Gustavia\",\"utc\":\"-04:00\"},{\"label\":\"America/St_Kitts (GMT-04:00)\",\"tzCode\":\"America/St_Kitts\",\"name\":\"(GMT-04:00) Basseterre, Fig Tree, Market Shop, Saint Paul’s, Middle Island\",\"utc\":\"-04:00\"},{\"label\":\"America/St_Lucia (GMT-04:00)\",\"tzCode\":\"America/St_Lucia\",\"name\":\"(GMT-04:00) Castries, Bisee, Vieux Fort, Micoud, Soufrière\",\"utc\":\"-04:00\"},{\"label\":\"America/St_Thomas (GMT-04:00)\",\"tzCode\":\"America/St_Thomas\",\"name\":\"(GMT-04:00) Saint Croix, Charlotte Amalie, Cruz Bay\",\"utc\":\"-04:00\"},{\"label\":\"America/St_Vincent (GMT-04:00)\",\"tzCode\":\"America/St_Vincent\",\"name\":\"(GMT-04:00) Kingstown, Kingstown Park, Georgetown, Barrouallie, Port Elizabeth\",\"utc\":\"-04:00\"},{\"label\":\"America/Thule (GMT-04:00)\",\"tzCode\":\"America/Thule\",\"name\":\"(GMT-04:00) Thule\",\"utc\":\"-04:00\"},{\"label\":\"America/Tortola (GMT-04:00)\",\"tzCode\":\"America/Tortola\",\"name\":\"(GMT-04:00) Road Town\",\"utc\":\"-04:00\"},{\"label\":\"Atlantic/Bermuda (GMT-04:00)\",\"tzCode\":\"Atlantic/Bermuda\",\"name\":\"(GMT-04:00) Hamilton\",\"utc\":\"-04:00\"},{\"label\":\"America/St_Johns (GMT-03:30)\",\"tzCode\":\"America/St_Johns\",\"name\":\"(GMT-03:30) St. John\\'s, Mount Pearl, Corner Brook, Conception Bay South, Bay Roberts\",\"utc\":\"-03:30\"},{\"label\":\"America/Araguaina (GMT-03:00)\",\"tzCode\":\"America/Araguaina\",\"name\":\"(GMT-03:00) Palmas, Araguaína, Gurupi, Miracema do Tocantins, Porto Franco\",\"utc\":\"-03:00\"},{\"label\":\"America/Argentina/Buenos_Aires (GMT-03:00)\",\"tzCode\":\"America/Argentina/Buenos_Aires\",\"name\":\"(GMT-03:00) Buenos Aires, La Plata, Mar del Plata, Morón, Bahía Blanca\",\"utc\":\"-03:00\"},{\"label\":\"America/Argentina/Catamarca (GMT-03:00)\",\"tzCode\":\"America/Argentina/Catamarca\",\"name\":\"(GMT-03:00) San Fernando del Valle de Catamarca, Trelew, Puerto Madryn, Esquel, Rawson\",\"utc\":\"-03:00\"},{\"label\":\"America/Argentina/Cordoba (GMT-03:00)\",\"tzCode\":\"America/Argentina/Cordoba\",\"name\":\"(GMT-03:00) Córdoba, Rosario, Santa Fe, Resistencia, Santiago del Estero\",\"utc\":\"-03:00\"},{\"label\":\"America/Argentina/Jujuy (GMT-03:00)\",\"tzCode\":\"America/Argentina/Jujuy\",\"name\":\"(GMT-03:00) San Salvador de Jujuy, San Pedro de Jujuy, Libertador General San Martín, Palpalá, La Quiaca\",\"utc\":\"-03:00\"},{\"label\":\"America/Argentina/La_Rioja (GMT-03:00)\",\"tzCode\":\"America/Argentina/La_Rioja\",\"name\":\"(GMT-03:00) La Rioja, Chilecito, Arauco, Chamical\",\"utc\":\"-03:00\"},{\"label\":\"America/Argentina/Mendoza (GMT-03:00)\",\"tzCode\":\"America/Argentina/Mendoza\",\"name\":\"(GMT-03:00) Mendoza, San Rafael, San Martín\",\"utc\":\"-03:00\"},{\"label\":\"America/Argentina/Rio_Gallegos (GMT-03:00)\",\"tzCode\":\"America/Argentina/Rio_Gallegos\",\"name\":\"(GMT-03:00) Comodoro Rivadavia, Río Gallegos, Caleta Olivia, Pico Truncado, Puerto Deseado\",\"utc\":\"-03:00\"},{\"label\":\"America/Argentina/Salta (GMT-03:00)\",\"tzCode\":\"America/Argentina/Salta\",\"name\":\"(GMT-03:00) Salta, Neuquén, Santa Rosa, San Carlos de Bariloche, Cipolletti\",\"utc\":\"-03:00\"},{\"label\":\"America/Argentina/San_Juan (GMT-03:00)\",\"tzCode\":\"America/Argentina/San_Juan\",\"name\":\"(GMT-03:00) San Juan, Chimbas, Santa Lucía, Pocito, Caucete\",\"utc\":\"-03:00\"},{\"label\":\"America/Argentina/San_Luis (GMT-03:00)\",\"tzCode\":\"America/Argentina/San_Luis\",\"name\":\"(GMT-03:00) San Luis, Villa Mercedes, La Punta, Merlo, Justo Daract\",\"utc\":\"-03:00\"},{\"label\":\"America/Argentina/Tucuman (GMT-03:00)\",\"tzCode\":\"America/Argentina/Tucuman\",\"name\":\"(GMT-03:00) San Miguel de Tucumán, Yerba Buena, Tafí Viejo, Alderetes, Aguilares\",\"utc\":\"-03:00\"},{\"label\":\"America/Argentina/Ushuaia (GMT-03:00)\",\"tzCode\":\"America/Argentina/Ushuaia\",\"name\":\"(GMT-03:00) Ushuaia, Río Grande\",\"utc\":\"-03:00\"},{\"label\":\"America/Bahia (GMT-03:00)\",\"tzCode\":\"America/Bahia\",\"name\":\"(GMT-03:00) Salvador, Feira de Santana, Vitória da Conquista, Itabuna, Camaçari\",\"utc\":\"-03:00\"},{\"label\":\"America/Belem (GMT-03:00)\",\"tzCode\":\"America/Belem\",\"name\":\"(GMT-03:00) Belém, Ananindeua, Macapá, Parauapebas, Marabá\",\"utc\":\"-03:00\"},{\"label\":\"America/Cayenne (GMT-03:00)\",\"tzCode\":\"America/Cayenne\",\"name\":\"(GMT-03:00) Cayenne, Matoury, Saint-Laurent-du-Maroni, Kourou, Rémire-Montjoly\",\"utc\":\"-03:00\"},{\"label\":\"America/Fortaleza (GMT-03:00)\",\"tzCode\":\"America/Fortaleza\",\"name\":\"(GMT-03:00) Fortaleza, São Luís, Natal, Teresina, João Pessoa\",\"utc\":\"-03:00\"},{\"label\":\"America/Godthab (GMT-03:00)\",\"tzCode\":\"America/Godthab\",\"name\":\"(GMT-03:00) Nuuk, Sisimiut, Ilulissat, Qaqortoq, Aasiaat\",\"utc\":\"-03:00\"},{\"label\":\"America/Maceio (GMT-03:00)\",\"tzCode\":\"America/Maceio\",\"name\":\"(GMT-03:00) Maceió, Aracaju, Arapiraca, Nossa Senhora do Socorro, São Cristóvão\",\"utc\":\"-03:00\"},{\"label\":\"America/Miquelon (GMT-03:00)\",\"tzCode\":\"America/Miquelon\",\"name\":\"(GMT-03:00) Saint-Pierre, Miquelon\",\"utc\":\"-03:00\"},{\"label\":\"America/Montevideo (GMT-03:00)\",\"tzCode\":\"America/Montevideo\",\"name\":\"(GMT-03:00) Montevideo, Salto, Paysandú, Las Piedras, Rivera\",\"utc\":\"-03:00\"},{\"label\":\"America/Paramaribo (GMT-03:00)\",\"tzCode\":\"America/Paramaribo\",\"name\":\"(GMT-03:00) Paramaribo, Lelydorp, Brokopondo, Nieuw Nickerie, Moengo\",\"utc\":\"-03:00\"},{\"label\":\"America/Punta_Arenas (GMT-03:00)\",\"tzCode\":\"America/Punta_Arenas\",\"name\":\"(GMT-03:00) Punta Arenas, Puerto Natales\",\"utc\":\"-03:00\"},{\"label\":\"America/Recife (GMT-03:00)\",\"tzCode\":\"America/Recife\",\"name\":\"(GMT-03:00) Recife, Jaboatão, Jaboatão dos Guararapes, Olinda, Paulista\",\"utc\":\"-03:00\"},{\"label\":\"America/Santarem (GMT-03:00)\",\"tzCode\":\"America/Santarem\",\"name\":\"(GMT-03:00) Santarém, Altamira, Itaituba, Oriximiná, Alenquer\",\"utc\":\"-03:00\"},{\"label\":\"America/Sao_Paulo (GMT-03:00)\",\"tzCode\":\"America/Sao_Paulo\",\"name\":\"(GMT-03:00) São Paulo, Rio de Janeiro, Belo Horizonte, Brasília, Curitiba\",\"utc\":\"-03:00\"},{\"label\":\"Antarctica/Palmer (GMT-03:00)\",\"tzCode\":\"Antarctica/Palmer\",\"name\":\"(GMT-03:00) Palmer\",\"utc\":\"-03:00\"},{\"label\":\"Antarctica/Rothera (GMT-03:00)\",\"tzCode\":\"Antarctica/Rothera\",\"name\":\"(GMT-03:00) Rothera\",\"utc\":\"-03:00\"},{\"label\":\"Atlantic/Stanley (GMT-03:00)\",\"tzCode\":\"Atlantic/Stanley\",\"name\":\"(GMT-03:00) Stanley\",\"utc\":\"-03:00\"},{\"label\":\"America/Noronha (GMT-02:00)\",\"tzCode\":\"America/Noronha\",\"name\":\"(GMT-02:00) Itamaracá\",\"utc\":\"-02:00\"},{\"label\":\"Atlantic/South_Georgia (GMT-02:00)\",\"tzCode\":\"Atlantic/South_Georgia\",\"name\":\"(GMT-02:00) Grytviken\",\"utc\":\"-02:00\"},{\"label\":\"America/Scoresbysund (GMT-01:00)\",\"tzCode\":\"America/Scoresbysund\",\"name\":\"(GMT-01:00) Scoresbysund\",\"utc\":\"-01:00\"},{\"label\":\"Atlantic/Azores (GMT-01:00)\",\"tzCode\":\"Atlantic/Azores\",\"name\":\"(GMT-01:00) Ponta Delgada, Lagoa, Angra do Heroísmo, Rosto de Cão, Rabo de Peixe\",\"utc\":\"-01:00\"},{\"label\":\"Atlantic/Cape_Verde (GMT-01:00)\",\"tzCode\":\"Atlantic/Cape_Verde\",\"name\":\"(GMT-01:00) Praia, Mindelo, Santa Maria, Cova Figueira, Santa Cruz\",\"utc\":\"-01:00\"},{\"label\":\"Africa/Abidjan (GMT+00:00)\",\"tzCode\":\"Africa/Abidjan\",\"name\":\"(GMT+00:00) Abidjan, Abobo, Bouaké, Daloa, San-Pédro\",\"utc\":\"+00:00\"},{\"label\":\"Africa/Accra (GMT+00:00)\",\"tzCode\":\"Africa/Accra\",\"name\":\"(GMT+00:00) Accra, Kumasi, Tamale, Takoradi, Atsiaman\",\"utc\":\"+00:00\"},{\"label\":\"Africa/Bamako (GMT+00:00)\",\"tzCode\":\"Africa/Bamako\",\"name\":\"(GMT+00:00) Bamako, Sikasso, Mopti, Koutiala, Ségou\",\"utc\":\"+00:00\"},{\"label\":\"Africa/Banjul (GMT+00:00)\",\"tzCode\":\"Africa/Banjul\",\"name\":\"(GMT+00:00) Serekunda, Brikama, Bakau, Banjul, Farafenni\",\"utc\":\"+00:00\"},{\"label\":\"Africa/Bissau (GMT+00:00)\",\"tzCode\":\"Africa/Bissau\",\"name\":\"(GMT+00:00) Bissau, Bafatá, Gabú, Bissorã, Bolama\",\"utc\":\"+00:00\"},{\"label\":\"Africa/Casablanca (GMT+00:00)\",\"tzCode\":\"Africa/Casablanca\",\"name\":\"(GMT+00:00) Casablanca, Rabat, Fès, Sale, Marrakesh\",\"utc\":\"+00:00\"},{\"label\":\"Africa/Conakry (GMT+00:00)\",\"tzCode\":\"Africa/Conakry\",\"name\":\"(GMT+00:00) Camayenne, Conakry, Nzérékoré, Kindia, Kankan\",\"utc\":\"+00:00\"},{\"label\":\"Africa/Dakar (GMT+00:00)\",\"tzCode\":\"Africa/Dakar\",\"name\":\"(GMT+00:00) Dakar, Pikine, Touba, Thiès, Thiès Nones\",\"utc\":\"+00:00\"},{\"label\":\"Africa/El_Aaiun (GMT+00:00)\",\"tzCode\":\"Africa/El_Aaiun\",\"name\":\"(GMT+00:00) Laayoune, Dakhla, Laayoune Plage\",\"utc\":\"+00:00\"},{\"label\":\"Africa/Freetown (GMT+00:00)\",\"tzCode\":\"Africa/Freetown\",\"name\":\"(GMT+00:00) Freetown, Bo, Kenema, Koidu, Makeni\",\"utc\":\"+00:00\"},{\"label\":\"Africa/Lome (GMT+00:00)\",\"tzCode\":\"Africa/Lome\",\"name\":\"(GMT+00:00) Lomé, Sokodé, Kara, Atakpamé, Kpalimé\",\"utc\":\"+00:00\"},{\"label\":\"Africa/Monrovia (GMT+00:00)\",\"tzCode\":\"Africa/Monrovia\",\"name\":\"(GMT+00:00) Monrovia, Gbarnga, Kakata, Bensonville, Harper\",\"utc\":\"+00:00\"},{\"label\":\"Africa/Nouakchott (GMT+00:00)\",\"tzCode\":\"Africa/Nouakchott\",\"name\":\"(GMT+00:00) Nouakchott, Nouadhibou, Néma, Kaédi, Rosso\",\"utc\":\"+00:00\"},{\"label\":\"Africa/Ouagadougou (GMT+00:00)\",\"tzCode\":\"Africa/Ouagadougou\",\"name\":\"(GMT+00:00) Ouagadougou, Bobo-Dioulasso, Koudougou, Ouahigouya, Banfora\",\"utc\":\"+00:00\"},{\"label\":\"Africa/Sao_Tome (GMT+00:00)\",\"tzCode\":\"Africa/Sao_Tome\",\"name\":\"(GMT+00:00) São Tomé, Santo António\",\"utc\":\"+00:00\"},{\"label\":\"America/Danmarkshavn (GMT+00:00)\",\"tzCode\":\"America/Danmarkshavn\",\"name\":\"(GMT+00:00) Danmarkshavn\",\"utc\":\"+00:00\"},{\"label\":\"Antarctica/Troll (GMT+00:00)\",\"tzCode\":\"Antarctica/Troll\",\"name\":\"(GMT+00:00) Troll\",\"utc\":\"+00:00\"},{\"label\":\"Atlantic/Canary (GMT+00:00)\",\"tzCode\":\"Atlantic/Canary\",\"name\":\"(GMT+00:00) Las Palmas de Gran Canaria, Santa Cruz de Tenerife, La Laguna, Telde, Arona\",\"utc\":\"+00:00\"},{\"label\":\"Atlantic/Faroe (GMT+00:00)\",\"tzCode\":\"Atlantic/Faroe\",\"name\":\"(GMT+00:00) Tórshavn, Klaksvík, Fuglafjørður, Tvøroyri, Miðvágur\",\"utc\":\"+00:00\"},{\"label\":\"Atlantic/Madeira (GMT+00:00)\",\"tzCode\":\"Atlantic/Madeira\",\"name\":\"(GMT+00:00) Funchal, Câmara de Lobos, São Martinho, Caniço, Machico\",\"utc\":\"+00:00\"},{\"label\":\"Atlantic/Reykjavik (GMT+00:00)\",\"tzCode\":\"Atlantic/Reykjavik\",\"name\":\"(GMT+00:00) Reykjavík, Kópavogur, Hafnarfjörður, Akureyri, Garðabær\",\"utc\":\"+00:00\"},{\"label\":\"Atlantic/St_Helena (GMT+00:00)\",\"tzCode\":\"Atlantic/St_Helena\",\"name\":\"(GMT+00:00) Jamestown, Georgetown, Edinburgh of the Seven Seas\",\"utc\":\"+00:00\"},{\"label\":\"Europe/Dublin (GMT+00:00)\",\"tzCode\":\"Europe/Dublin\",\"name\":\"(GMT+00:00) Dublin, Cork, Luimneach, Gaillimh, Tallaght\",\"utc\":\"+00:00\"},{\"label\":\"Europe/Guernsey (GMT+00:00)\",\"tzCode\":\"Europe/Guernsey\",\"name\":\"(GMT+00:00) Saint Peter Port, St Martin, Saint Sampson, St Anne, Saint Saviour\",\"utc\":\"+00:00\"},{\"label\":\"Europe/Isle_of_Man (GMT+00:00)\",\"tzCode\":\"Europe/Isle_of_Man\",\"name\":\"(GMT+00:00) Douglas, Ramsey, Peel, Port Erin, Castletown\",\"utc\":\"+00:00\"},{\"label\":\"Europe/Jersey (GMT+00:00)\",\"tzCode\":\"Europe/Jersey\",\"name\":\"(GMT+00:00) Saint Helier, Le Hocq\",\"utc\":\"+00:00\"},{\"label\":\"Europe/Lisbon (GMT+00:00)\",\"tzCode\":\"Europe/Lisbon\",\"name\":\"(GMT+00:00) Lisbon, Porto, Amadora, Braga, Setúbal\",\"utc\":\"+00:00\"},{\"label\":\"Europe/London (GMT+00:00)\",\"tzCode\":\"Europe/London\",\"name\":\"(GMT+00:00) London, Birmingham, Liverpool, Sheffield, Bristol\",\"utc\":\"+00:00\"},{\"label\":\"Africa/Algiers (GMT+01:00)\",\"tzCode\":\"Africa/Algiers\",\"name\":\"(GMT+01:00) Algiers, Boumerdas, Oran, Tébessa, Constantine\",\"utc\":\"+01:00\"},{\"label\":\"Africa/Bangui (GMT+01:00)\",\"tzCode\":\"Africa/Bangui\",\"name\":\"(GMT+01:00) Bangui, Bimbo, Mbaïki, Berbérati, Kaga Bandoro\",\"utc\":\"+01:00\"},{\"label\":\"Africa/Brazzaville (GMT+01:00)\",\"tzCode\":\"Africa/Brazzaville\",\"name\":\"(GMT+01:00) Brazzaville, Pointe-Noire, Dolisie, Kayes, Owando\",\"utc\":\"+01:00\"},{\"label\":\"Africa/Ceuta (GMT+01:00)\",\"tzCode\":\"Africa/Ceuta\",\"name\":\"(GMT+01:00) Ceuta, Melilla\",\"utc\":\"+01:00\"},{\"label\":\"Africa/Douala (GMT+01:00)\",\"tzCode\":\"Africa/Douala\",\"name\":\"(GMT+01:00) Douala, Yaoundé, Garoua, Kousséri, Bamenda\",\"utc\":\"+01:00\"},{\"label\":\"Africa/Kinshasa (GMT+01:00)\",\"tzCode\":\"Africa/Kinshasa\",\"name\":\"(GMT+01:00) Kinshasa, Masina, Kikwit, Mbandaka, Matadi\",\"utc\":\"+01:00\"},{\"label\":\"Africa/Lagos (GMT+01:00)\",\"tzCode\":\"Africa/Lagos\",\"name\":\"(GMT+01:00) Lagos, Kano, Ibadan, Kaduna, Port Harcourt\",\"utc\":\"+01:00\"},{\"label\":\"Africa/Libreville (GMT+01:00)\",\"tzCode\":\"Africa/Libreville\",\"name\":\"(GMT+01:00) Libreville, Port-Gentil, Franceville, Oyem, Moanda\",\"utc\":\"+01:00\"},{\"label\":\"Africa/Luanda (GMT+01:00)\",\"tzCode\":\"Africa/Luanda\",\"name\":\"(GMT+01:00) Luanda, N’dalatando, Huambo, Lobito, Benguela\",\"utc\":\"+01:00\"},{\"label\":\"Africa/Malabo (GMT+01:00)\",\"tzCode\":\"Africa/Malabo\",\"name\":\"(GMT+01:00) Bata, Malabo, Ebebiyin, Aconibe, Añisoc\",\"utc\":\"+01:00\"},{\"label\":\"Africa/Ndjamena (GMT+01:00)\",\"tzCode\":\"Africa/Ndjamena\",\"name\":\"(GMT+01:00) N\\'Djamena, Moundou, Sarh, Abéché, Kelo\",\"utc\":\"+01:00\"},{\"label\":\"Africa/Niamey (GMT+01:00)\",\"tzCode\":\"Africa/Niamey\",\"name\":\"(GMT+01:00) Niamey, Zinder, Maradi, Agadez, Alaghsas\",\"utc\":\"+01:00\"},{\"label\":\"Africa/Porto-Novo (GMT+01:00)\",\"tzCode\":\"Africa/Porto-Novo\",\"name\":\"(GMT+01:00) Cotonou, Abomey-Calavi, Djougou, Porto-Novo, Parakou\",\"utc\":\"+01:00\"},{\"label\":\"Africa/Tunis (GMT+01:00)\",\"tzCode\":\"Africa/Tunis\",\"name\":\"(GMT+01:00) Tunis, Sfax, Sousse, Kairouan, Bizerte\",\"utc\":\"+01:00\"},{\"label\":\"Africa/Windhoek (GMT+01:00)\",\"tzCode\":\"Africa/Windhoek\",\"name\":\"(GMT+01:00) Windhoek, Rundu, Walvis Bay, Oshakati, Swakopmund\",\"utc\":\"+01:00\"},{\"label\":\"Arctic/Longyearbyen (GMT+01:00)\",\"tzCode\":\"Arctic/Longyearbyen\",\"name\":\"(GMT+01:00) Longyearbyen, Olonkinbyen\",\"utc\":\"+01:00\"},{\"label\":\"Europe/Amsterdam (GMT+01:00)\",\"tzCode\":\"Europe/Amsterdam\",\"name\":\"(GMT+01:00) Amsterdam, Rotterdam, The Hague, Utrecht, Eindhoven\",\"utc\":\"+01:00\"},{\"label\":\"Europe/Andorra (GMT+01:00)\",\"tzCode\":\"Europe/Andorra\",\"name\":\"(GMT+01:00) Andorra la Vella, les Escaldes, Encamp, Sant Julià de Lòria, la Massana\",\"utc\":\"+01:00\"},{\"label\":\"Europe/Belgrade (GMT+01:00)\",\"tzCode\":\"Europe/Belgrade\",\"name\":\"(GMT+01:00) Belgrade, Pristina, Niš, Novi Sad, Prizren\",\"utc\":\"+01:00\"},{\"label\":\"Europe/Berlin (GMT+01:00)\",\"tzCode\":\"Europe/Berlin\",\"name\":\"(GMT+01:00) Berlin, Hamburg, Munich, Köln, Frankfurt am Main\",\"utc\":\"+01:00\"},{\"label\":\"Europe/Bratislava (GMT+01:00)\",\"tzCode\":\"Europe/Bratislava\",\"name\":\"(GMT+01:00) Bratislava, Košice, Prešov, Nitra, Žilina\",\"utc\":\"+01:00\"},{\"label\":\"Europe/Brussels (GMT+01:00)\",\"tzCode\":\"Europe/Brussels\",\"name\":\"(GMT+01:00) Brussels, Antwerpen, Gent, Charleroi, Liège\",\"utc\":\"+01:00\"},{\"label\":\"Europe/Budapest (GMT+01:00)\",\"tzCode\":\"Europe/Budapest\",\"name\":\"(GMT+01:00) Budapest, Debrecen, Miskolc, Szeged, Pécs\",\"utc\":\"+01:00\"},{\"label\":\"Europe/Copenhagen (GMT+01:00)\",\"tzCode\":\"Europe/Copenhagen\",\"name\":\"(GMT+01:00) Copenhagen, Århus, Odense, Aalborg, Frederiksberg\",\"utc\":\"+01:00\"},{\"label\":\"Europe/Gibraltar (GMT+01:00)\",\"tzCode\":\"Europe/Gibraltar\",\"name\":\"(GMT+01:00) Gibraltar\",\"utc\":\"+01:00\"},{\"label\":\"Europe/Ljubljana (GMT+01:00)\",\"tzCode\":\"Europe/Ljubljana\",\"name\":\"(GMT+01:00) Ljubljana, Maribor, Celje, Kranj, Velenje\",\"utc\":\"+01:00\"},{\"label\":\"Europe/Luxembourg (GMT+01:00)\",\"tzCode\":\"Europe/Luxembourg\",\"name\":\"(GMT+01:00) Luxembourg, Esch-sur-Alzette, Dudelange, Schifflange, Bettembourg\",\"utc\":\"+01:00\"},{\"label\":\"Europe/Madrid (GMT+01:00)\",\"tzCode\":\"Europe/Madrid\",\"name\":\"(GMT+01:00) Madrid, Barcelona, Valencia, Sevilla, Zaragoza\",\"utc\":\"+01:00\"},{\"label\":\"Europe/Malta (GMT+01:00)\",\"tzCode\":\"Europe/Malta\",\"name\":\"(GMT+01:00) Birkirkara, Qormi, Mosta, Żabbar, San Pawl il-Baħar\",\"utc\":\"+01:00\"},{\"label\":\"Europe/Monaco (GMT+01:00)\",\"tzCode\":\"Europe/Monaco\",\"name\":\"(GMT+01:00) Monaco, Monte-Carlo, La Condamine\",\"utc\":\"+01:00\"},{\"label\":\"Europe/Oslo (GMT+01:00)\",\"tzCode\":\"Europe/Oslo\",\"name\":\"(GMT+01:00) Oslo, Bergen, Trondheim, Stavanger, Drammen\",\"utc\":\"+01:00\"},{\"label\":\"Europe/Paris (GMT+01:00)\",\"tzCode\":\"Europe/Paris\",\"name\":\"(GMT+01:00) Paris, Marseille, Lyon, Toulouse, Nice\",\"utc\":\"+01:00\"},{\"label\":\"Europe/Podgorica (GMT+01:00)\",\"tzCode\":\"Europe/Podgorica\",\"name\":\"(GMT+01:00) Podgorica, Nikšić, Herceg Novi, Pljevlja, Budva\",\"utc\":\"+01:00\"},{\"label\":\"Europe/Prague (GMT+01:00)\",\"tzCode\":\"Europe/Prague\",\"name\":\"(GMT+01:00) Prague, Brno, Ostrava, Pilsen, Olomouc\",\"utc\":\"+01:00\"},{\"label\":\"Europe/Rome (GMT+01:00)\",\"tzCode\":\"Europe/Rome\",\"name\":\"(GMT+01:00) Rome, Milan, Naples, Turin, Palermo\",\"utc\":\"+01:00\"},{\"label\":\"Europe/San_Marino (GMT+01:00)\",\"tzCode\":\"Europe/San_Marino\",\"name\":\"(GMT+01:00) Serravalle, Borgo Maggiore, San Marino, Domagnano, Fiorentino\",\"utc\":\"+01:00\"},{\"label\":\"Europe/Sarajevo (GMT+01:00)\",\"tzCode\":\"Europe/Sarajevo\",\"name\":\"(GMT+01:00) Sarajevo, Banja Luka, Zenica, Tuzla, Mostar\",\"utc\":\"+01:00\"},{\"label\":\"Europe/Skopje (GMT+01:00)\",\"tzCode\":\"Europe/Skopje\",\"name\":\"(GMT+01:00) Skopje, Bitola, Kumanovo, Prilep, Tetovo\",\"utc\":\"+01:00\"},{\"label\":\"Europe/Stockholm (GMT+01:00)\",\"tzCode\":\"Europe/Stockholm\",\"name\":\"(GMT+01:00) Stockholm, Göteborg, Malmö, Uppsala, Sollentuna\",\"utc\":\"+01:00\"},{\"label\":\"Europe/Tirane (GMT+01:00)\",\"tzCode\":\"Europe/Tirane\",\"name\":\"(GMT+01:00) Tirana, Durrës, Elbasan, Vlorë, Shkodër\",\"utc\":\"+01:00\"},{\"label\":\"Europe/Vaduz (GMT+01:00)\",\"tzCode\":\"Europe/Vaduz\",\"name\":\"(GMT+01:00) Schaan, Vaduz, Triesen, Balzers, Eschen\",\"utc\":\"+01:00\"},{\"label\":\"Europe/Vatican (GMT+01:00)\",\"tzCode\":\"Europe/Vatican\",\"name\":\"(GMT+01:00) Vatican City\",\"utc\":\"+01:00\"},{\"label\":\"Europe/Vienna (GMT+01:00)\",\"tzCode\":\"Europe/Vienna\",\"name\":\"(GMT+01:00) Vienna, Graz, Linz, Favoriten, Donaustadt\",\"utc\":\"+01:00\"},{\"label\":\"Europe/Warsaw (GMT+01:00)\",\"tzCode\":\"Europe/Warsaw\",\"name\":\"(GMT+01:00) Warsaw, Łódź, Kraków, Wrocław, Poznań\",\"utc\":\"+01:00\"},{\"label\":\"Europe/Zagreb (GMT+01:00)\",\"tzCode\":\"Europe/Zagreb\",\"name\":\"(GMT+01:00) Zagreb, Split, Rijeka, Osijek, Zadar\",\"utc\":\"+01:00\"},{\"label\":\"Europe/Zurich (GMT+01:00)\",\"tzCode\":\"Europe/Zurich\",\"name\":\"(GMT+01:00) Zürich, Genève, Basel, Lausanne, Bern\",\"utc\":\"+01:00\"},{\"label\":\"Africa/Blantyre (GMT+02:00)\",\"tzCode\":\"Africa/Blantyre\",\"name\":\"(GMT+02:00) Lilongwe, Blantyre, Mzuzu, Zomba, Kasungu\",\"utc\":\"+02:00\"},{\"label\":\"Africa/Bujumbura (GMT+02:00)\",\"tzCode\":\"Africa/Bujumbura\",\"name\":\"(GMT+02:00) Bujumbura, Muyinga, Gitega, Ruyigi, Ngozi\",\"utc\":\"+02:00\"},{\"label\":\"Africa/Cairo (GMT+02:00)\",\"tzCode\":\"Africa/Cairo\",\"name\":\"(GMT+02:00) Cairo, Alexandria, Giza, Port Said, Suez\",\"utc\":\"+02:00\"},{\"label\":\"Africa/Gaborone (GMT+02:00)\",\"tzCode\":\"Africa/Gaborone\",\"name\":\"(GMT+02:00) Gaborone, Francistown, Molepolole, Selebi-Phikwe, Maun\",\"utc\":\"+02:00\"},{\"label\":\"Africa/Harare (GMT+02:00)\",\"tzCode\":\"Africa/Harare\",\"name\":\"(GMT+02:00) Harare, Bulawayo, Chitungwiza, Mutare, Gweru\",\"utc\":\"+02:00\"},{\"label\":\"Africa/Johannesburg (GMT+02:00)\",\"tzCode\":\"Africa/Johannesburg\",\"name\":\"(GMT+02:00) Cape Town, Durban, Johannesburg, Soweto, Pretoria\",\"utc\":\"+02:00\"},{\"label\":\"Africa/Juba (GMT+02:00)\",\"tzCode\":\"Africa/Juba\",\"name\":\"(GMT+02:00) Juba, Winejok, Malakal, Wau, Kuacjok\",\"utc\":\"+02:00\"},{\"label\":\"Africa/Khartoum (GMT+02:00)\",\"tzCode\":\"Africa/Khartoum\",\"name\":\"(GMT+02:00) Khartoum, Omdurman, Nyala, Port Sudan, Kassala\",\"utc\":\"+02:00\"},{\"label\":\"Africa/Kigali (GMT+02:00)\",\"tzCode\":\"Africa/Kigali\",\"name\":\"(GMT+02:00) Kigali, Butare, Gitarama, Musanze, Gisenyi\",\"utc\":\"+02:00\"},{\"label\":\"Africa/Lubumbashi (GMT+02:00)\",\"tzCode\":\"Africa/Lubumbashi\",\"name\":\"(GMT+02:00) Lubumbashi, Mbuji-Mayi, Kisangani, Kananga, Likasi\",\"utc\":\"+02:00\"},{\"label\":\"Africa/Lusaka (GMT+02:00)\",\"tzCode\":\"Africa/Lusaka\",\"name\":\"(GMT+02:00) Lusaka, Kitwe, Ndola, Kabwe, Chingola\",\"utc\":\"+02:00\"},{\"label\":\"Africa/Maputo (GMT+02:00)\",\"tzCode\":\"Africa/Maputo\",\"name\":\"(GMT+02:00) Maputo, Matola, Beira, Nampula, Chimoio\",\"utc\":\"+02:00\"},{\"label\":\"Africa/Maseru (GMT+02:00)\",\"tzCode\":\"Africa/Maseru\",\"name\":\"(GMT+02:00) Maseru, Mafeteng, Leribe, Maputsoe, Mohale’s Hoek\",\"utc\":\"+02:00\"},{\"label\":\"Africa/Mbabane (GMT+02:00)\",\"tzCode\":\"Africa/Mbabane\",\"name\":\"(GMT+02:00) Manzini, Mbabane, Big Bend, Malkerns, Nhlangano\",\"utc\":\"+02:00\"},{\"label\":\"Africa/Tripoli (GMT+02:00)\",\"tzCode\":\"Africa/Tripoli\",\"name\":\"(GMT+02:00) Tripoli, Benghazi, Mişrātah, Tarhuna, Al Khums\",\"utc\":\"+02:00\"},{\"label\":\"Asia/Amman (GMT+02:00)\",\"tzCode\":\"Asia/Amman\",\"name\":\"(GMT+02:00) Amman, Zarqa, Irbid, Russeifa, Wādī as Sīr\",\"utc\":\"+02:00\"},{\"label\":\"Asia/Beirut (GMT+02:00)\",\"tzCode\":\"Asia/Beirut\",\"name\":\"(GMT+02:00) Beirut, Ra’s Bayrūt, Tripoli, Sidon, Tyre\",\"utc\":\"+02:00\"},{\"label\":\"Asia/Damascus (GMT+02:00)\",\"tzCode\":\"Asia/Damascus\",\"name\":\"(GMT+02:00) Aleppo, Damascus, Homs, Ḩamāh, Latakia\",\"utc\":\"+02:00\"},{\"label\":\"Asia/Famagusta (GMT+02:00)\",\"tzCode\":\"Asia/Famagusta\",\"name\":\"(GMT+02:00) Famagusta, Kyrenia, Protaras, Paralímni, Lápithos\",\"utc\":\"+02:00\"},{\"label\":\"Asia/Gaza (GMT+02:00)\",\"tzCode\":\"Asia/Gaza\",\"name\":\"(GMT+02:00) Gaza, Khān Yūnis, Jabālyā, Rafaḩ, Dayr al Balaḩ\",\"utc\":\"+02:00\"},{\"label\":\"Asia/Hebron (GMT+02:00)\",\"tzCode\":\"Asia/Hebron\",\"name\":\"(GMT+02:00) East Jerusalem, Hebron, Nablus, Battir, Ţūlkarm\",\"utc\":\"+02:00\"},{\"label\":\"Asia/Jerusalem (GMT+02:00)\",\"tzCode\":\"Asia/Jerusalem\",\"name\":\"(GMT+02:00) Jerusalem, Tel Aviv, West Jerusalem, Haifa, Ashdod\",\"utc\":\"+02:00\"},{\"label\":\"Asia/Nicosia (GMT+02:00)\",\"tzCode\":\"Asia/Nicosia\",\"name\":\"(GMT+02:00) Nicosia, Limassol, Larnaca, Stróvolos, Paphos\",\"utc\":\"+02:00\"},{\"label\":\"Europe/Athens (GMT+02:00)\",\"tzCode\":\"Europe/Athens\",\"name\":\"(GMT+02:00) Athens, Thessaloníki, Pátra, Piraeus, Lárisa\",\"utc\":\"+02:00\"},{\"label\":\"Europe/Bucharest (GMT+02:00)\",\"tzCode\":\"Europe/Bucharest\",\"name\":\"(GMT+02:00) Bucharest, Sector 3, Sector 6, Sector 2, Iaşi\",\"utc\":\"+02:00\"},{\"label\":\"Europe/Chisinau (GMT+02:00)\",\"tzCode\":\"Europe/Chisinau\",\"name\":\"(GMT+02:00) Chisinau, Tiraspol, Bălţi, Bender, Rîbniţa\",\"utc\":\"+02:00\"},{\"label\":\"Europe/Helsinki (GMT+02:00)\",\"tzCode\":\"Europe/Helsinki\",\"name\":\"(GMT+02:00) Helsinki, Espoo, Tampere, Vantaa, Turku\",\"utc\":\"+02:00\"},{\"label\":\"Europe/Kaliningrad (GMT+02:00)\",\"tzCode\":\"Europe/Kaliningrad\",\"name\":\"(GMT+02:00) Kaliningrad, Chernyakhovsk, Sovetsk, Baltiysk, Gusev\",\"utc\":\"+02:00\"},{\"label\":\"Europe/Kiev (GMT+02:00)\",\"tzCode\":\"Europe/Kiev\",\"name\":\"(GMT+02:00) Kyiv, Kharkiv, Donetsk, Odessa, Dnipro\",\"utc\":\"+02:00\"},{\"label\":\"Europe/Mariehamn (GMT+02:00)\",\"tzCode\":\"Europe/Mariehamn\",\"name\":\"(GMT+02:00) Mariehamn\",\"utc\":\"+02:00\"},{\"label\":\"Europe/Riga (GMT+02:00)\",\"tzCode\":\"Europe/Riga\",\"name\":\"(GMT+02:00) Riga, Daugavpils, Liepāja, Jelgava, Jūrmala\",\"utc\":\"+02:00\"},{\"label\":\"Europe/Sofia (GMT+02:00)\",\"tzCode\":\"Europe/Sofia\",\"name\":\"(GMT+02:00) Sofia, Plovdiv, Varna, Burgas, Ruse\",\"utc\":\"+02:00\"},{\"label\":\"Europe/Tallinn (GMT+02:00)\",\"tzCode\":\"Europe/Tallinn\",\"name\":\"(GMT+02:00) Tallinn, Tartu, Narva, Kohtla-Järve, Pärnu\",\"utc\":\"+02:00\"},{\"label\":\"Europe/Uzhgorod (GMT+02:00)\",\"tzCode\":\"Europe/Uzhgorod\",\"name\":\"(GMT+02:00) Uzhgorod, Mukachevo, Khust, Berehove, Tyachiv\",\"utc\":\"+02:00\"},{\"label\":\"Europe/Vilnius (GMT+02:00)\",\"tzCode\":\"Europe/Vilnius\",\"name\":\"(GMT+02:00) Vilnius, Kaunas, Klaipėda, Šiauliai, Panevėžys\",\"utc\":\"+02:00\"},{\"label\":\"Europe/Zaporozhye (GMT+02:00)\",\"tzCode\":\"Europe/Zaporozhye\",\"name\":\"(GMT+02:00) Luhansk, Sevastopol, Sievierodonetsk, Alchevsk, Lysychansk\",\"utc\":\"+02:00\"},{\"label\":\"Africa/Addis_Ababa (GMT+03:00)\",\"tzCode\":\"Africa/Addis_Ababa\",\"name\":\"(GMT+03:00) Addis Ababa, Dire Dawa, Mek\\'ele, Nazrēt, Bahir Dar\",\"utc\":\"+03:00\"},{\"label\":\"Africa/Asmara (GMT+03:00)\",\"tzCode\":\"Africa/Asmara\",\"name\":\"(GMT+03:00) Asmara, Keren, Massawa, Assab, Mendefera\",\"utc\":\"+03:00\"},{\"label\":\"Africa/Dar_es_Salaam (GMT+03:00)\",\"tzCode\":\"Africa/Dar_es_Salaam\",\"name\":\"(GMT+03:00) Dar es Salaam, Mwanza, Zanzibar, Arusha, Mbeya\",\"utc\":\"+03:00\"},{\"label\":\"Africa/Djibouti (GMT+03:00)\",\"tzCode\":\"Africa/Djibouti\",\"name\":\"(GMT+03:00) Djibouti, \\'Ali Sabieh, Tadjourah, Obock, Dikhil\",\"utc\":\"+03:00\"},{\"label\":\"Africa/Kampala (GMT+03:00)\",\"tzCode\":\"Africa/Kampala\",\"name\":\"(GMT+03:00) Kampala, Gulu, Lira, Mbarara, Jinja\",\"utc\":\"+03:00\"},{\"label\":\"Africa/Mogadishu (GMT+03:00)\",\"tzCode\":\"Africa/Mogadishu\",\"name\":\"(GMT+03:00) Mogadishu, Hargeysa, Berbera, Kismayo, Marka\",\"utc\":\"+03:00\"},{\"label\":\"Africa/Nairobi (GMT+03:00)\",\"tzCode\":\"Africa/Nairobi\",\"name\":\"(GMT+03:00) Nairobi, Mombasa, Nakuru, Eldoret, Kisumu\",\"utc\":\"+03:00\"},{\"label\":\"Antarctica/Syowa (GMT+03:00)\",\"tzCode\":\"Antarctica/Syowa\",\"name\":\"(GMT+03:00) Syowa\",\"utc\":\"+03:00\"},{\"label\":\"Asia/Aden (GMT+03:00)\",\"tzCode\":\"Asia/Aden\",\"name\":\"(GMT+03:00) Sanaa, Al Ḩudaydah, Taiz, Aden, Mukalla\",\"utc\":\"+03:00\"},{\"label\":\"Asia/Baghdad (GMT+03:00)\",\"tzCode\":\"Asia/Baghdad\",\"name\":\"(GMT+03:00) Baghdad, Basrah, Al Mawşil al Jadīdah, Al Başrah al Qadīmah, Mosul\",\"utc\":\"+03:00\"},{\"label\":\"Asia/Bahrain (GMT+03:00)\",\"tzCode\":\"Asia/Bahrain\",\"name\":\"(GMT+03:00) Manama, Al Muharraq, Ar Rifā‘, Dār Kulayb, Madīnat Ḩamad\",\"utc\":\"+03:00\"},{\"label\":\"Asia/Kuwait (GMT+03:00)\",\"tzCode\":\"Asia/Kuwait\",\"name\":\"(GMT+03:00) Al Aḩmadī, Ḩawallī, As Sālimīyah, Şabāḩ as Sālim, Al Farwānīyah\",\"utc\":\"+03:00\"},{\"label\":\"Asia/Qatar (GMT+03:00)\",\"tzCode\":\"Asia/Qatar\",\"name\":\"(GMT+03:00) Doha, Ar Rayyān, Umm Şalāl Muḩammad, Al Wakrah, Al Khawr\",\"utc\":\"+03:00\"},{\"label\":\"Asia/Riyadh (GMT+03:00)\",\"tzCode\":\"Asia/Riyadh\",\"name\":\"(GMT+03:00) Riyadh, Jeddah, Mecca, Medina, Sulţānah\",\"utc\":\"+03:00\"},{\"label\":\"Europe/Istanbul (GMT+03:00)\",\"tzCode\":\"Europe/Istanbul\",\"name\":\"(GMT+03:00) Istanbul, Ankara, İzmir, Bursa, Adana\",\"utc\":\"+03:00\"},{\"label\":\"Europe/Kirov (GMT+03:00)\",\"tzCode\":\"Europe/Kirov\",\"name\":\"(GMT+03:00) Kirov, Kirovo-Chepetsk, Vyatskiye Polyany, Slobodskoy, Kotel’nich\",\"utc\":\"+03:00\"},{\"label\":\"Europe/Minsk (GMT+03:00)\",\"tzCode\":\"Europe/Minsk\",\"name\":\"(GMT+03:00) Minsk, Homyel\\', Mahilyow, Vitebsk, Hrodna\",\"utc\":\"+03:00\"},{\"label\":\"Europe/Moscow (GMT+03:00)\",\"tzCode\":\"Europe/Moscow\",\"name\":\"(GMT+03:00) Moscow, Saint Petersburg, Nizhniy Novgorod, Kazan, Rostov-na-Donu\",\"utc\":\"+03:00\"},{\"label\":\"Europe/Simferopol (GMT+03:00)\",\"tzCode\":\"Europe/Simferopol\",\"name\":\"(GMT+03:00) Simferopol, Kerch, Yevpatoriya, Yalta, Feodosiya\",\"utc\":\"+03:00\"},{\"label\":\"Europe/Volgograd (GMT+03:00)\",\"tzCode\":\"Europe/Volgograd\",\"name\":\"(GMT+03:00) Volgograd, Volzhskiy, Kamyshin, Mikhaylovka, Uryupinsk\",\"utc\":\"+03:00\"},{\"label\":\"Indian/Antananarivo (GMT+03:00)\",\"tzCode\":\"Indian/Antananarivo\",\"name\":\"(GMT+03:00) Antananarivo, Toamasina, Antsirabe, Fianarantsoa, Mahajanga\",\"utc\":\"+03:00\"},{\"label\":\"Indian/Comoro (GMT+03:00)\",\"tzCode\":\"Indian/Comoro\",\"name\":\"(GMT+03:00) Moroni, Moutsamoudou, Fomboni, Domoni, Tsimbeo\",\"utc\":\"+03:00\"},{\"label\":\"Indian/Mayotte (GMT+03:00)\",\"tzCode\":\"Indian/Mayotte\",\"name\":\"(GMT+03:00) Mamoudzou, Koungou, Dzaoudzi, Dembeni, Sada\",\"utc\":\"+03:00\"},{\"label\":\"Asia/Tehran (GMT+03:30)\",\"tzCode\":\"Asia/Tehran\",\"name\":\"(GMT+03:30) Tehran, Mashhad, Isfahan, Karaj, Tabriz\",\"utc\":\"+03:30\"},{\"label\":\"Asia/Baku (GMT+04:00)\",\"tzCode\":\"Asia/Baku\",\"name\":\"(GMT+04:00) Baku, Ganja, Sumqayıt, Lankaran, Yevlakh\",\"utc\":\"+04:00\"},{\"label\":\"Asia/Dubai (GMT+04:00)\",\"tzCode\":\"Asia/Dubai\",\"name\":\"(GMT+04:00) Dubai, Sharjah, Abu Dhabi, Ajman City, Ras Al Khaimah City\",\"utc\":\"+04:00\"},{\"label\":\"Asia/Muscat (GMT+04:00)\",\"tzCode\":\"Asia/Muscat\",\"name\":\"(GMT+04:00) Muscat, Seeb, Şalālah, Bawshar, Sohar\",\"utc\":\"+04:00\"},{\"label\":\"Asia/Tbilisi (GMT+04:00)\",\"tzCode\":\"Asia/Tbilisi\",\"name\":\"(GMT+04:00) Tbilisi, Kutaisi, Batumi, Sokhumi, Zugdidi\",\"utc\":\"+04:00\"},{\"label\":\"Asia/Yerevan (GMT+04:00)\",\"tzCode\":\"Asia/Yerevan\",\"name\":\"(GMT+04:00) Yerevan, Gyumri, Vanadzor, Vagharshapat, Hrazdan\",\"utc\":\"+04:00\"},{\"label\":\"Europe/Astrakhan (GMT+04:00)\",\"tzCode\":\"Europe/Astrakhan\",\"name\":\"(GMT+04:00) Astrakhan, Akhtubinsk, Znamensk, Kharabali, Kamyzyak\",\"utc\":\"+04:00\"},{\"label\":\"Europe/Samara (GMT+04:00)\",\"tzCode\":\"Europe/Samara\",\"name\":\"(GMT+04:00) Samara, Togliatti-on-the-Volga, Izhevsk, Syzran’, Novokuybyshevsk\",\"utc\":\"+04:00\"},{\"label\":\"Europe/Saratov (GMT+04:00)\",\"tzCode\":\"Europe/Saratov\",\"name\":\"(GMT+04:00) Saratov, Balakovo, Engel’s, Balashov, Vol’sk\",\"utc\":\"+04:00\"},{\"label\":\"Europe/Ulyanovsk (GMT+04:00)\",\"tzCode\":\"Europe/Ulyanovsk\",\"name\":\"(GMT+04:00) Ulyanovsk, Dimitrovgrad, Inza, Barysh, Novoul’yanovsk\",\"utc\":\"+04:00\"},{\"label\":\"Indian/Mahe (GMT+04:00)\",\"tzCode\":\"Indian/Mahe\",\"name\":\"(GMT+04:00) Victoria, Anse Boileau, Bel Ombre, Beau Vallon, Cascade\",\"utc\":\"+04:00\"},{\"label\":\"Indian/Mauritius (GMT+04:00)\",\"tzCode\":\"Indian/Mauritius\",\"name\":\"(GMT+04:00) Port Louis, Beau Bassin-Rose Hill, Vacoas, Curepipe, Quatre Bornes\",\"utc\":\"+04:00\"},{\"label\":\"Indian/Reunion (GMT+04:00)\",\"tzCode\":\"Indian/Reunion\",\"name\":\"(GMT+04:00) Saint-Denis, Saint-Paul, Saint-Pierre, Le Tampon, Saint-André\",\"utc\":\"+04:00\"},{\"label\":\"Asia/Kabul (GMT+04:30)\",\"tzCode\":\"Asia/Kabul\",\"name\":\"(GMT+04:30) Kabul, Kandahār, Mazār-e Sharīf, Herāt, Jalālābād\",\"utc\":\"+04:30\"},{\"label\":\"Antarctica/Mawson (GMT+05:00)\",\"tzCode\":\"Antarctica/Mawson\",\"name\":\"(GMT+05:00) Mawson\",\"utc\":\"+05:00\"},{\"label\":\"Asia/Aqtau (GMT+05:00)\",\"tzCode\":\"Asia/Aqtau\",\"name\":\"(GMT+05:00) Shevchenko, Zhanaozen, Beyneu, Shetpe, Yeraliyev\",\"utc\":\"+05:00\"},{\"label\":\"Asia/Aqtobe (GMT+05:00)\",\"tzCode\":\"Asia/Aqtobe\",\"name\":\"(GMT+05:00) Aktobe, Kandyagash, Shalqar, Khromtau, Embi\",\"utc\":\"+05:00\"},{\"label\":\"Asia/Ashgabat (GMT+05:00)\",\"tzCode\":\"Asia/Ashgabat\",\"name\":\"(GMT+05:00) Ashgabat, Türkmenabat, Daşoguz, Mary, Balkanabat\",\"utc\":\"+05:00\"},{\"label\":\"Asia/Atyrau (GMT+05:00)\",\"tzCode\":\"Asia/Atyrau\",\"name\":\"(GMT+05:00) Atyrau, Qulsary, Shalkar, Balykshi, Maqat\",\"utc\":\"+05:00\"},{\"label\":\"Asia/Dushanbe (GMT+05:00)\",\"tzCode\":\"Asia/Dushanbe\",\"name\":\"(GMT+05:00) Dushanbe, Khujand, Kŭlob, Bokhtar, Istaravshan\",\"utc\":\"+05:00\"},{\"label\":\"Asia/Karachi (GMT+05:00)\",\"tzCode\":\"Asia/Karachi\",\"name\":\"(GMT+05:00) Karachi, Lahore, Faisalabad, Rawalpindi, Multan\",\"utc\":\"+05:00\"},{\"label\":\"Asia/Oral (GMT+05:00)\",\"tzCode\":\"Asia/Oral\",\"name\":\"(GMT+05:00) Oral, Aqsay, Zhänibek, Tasqala, Zhumysker\",\"utc\":\"+05:00\"},{\"label\":\"Asia/Qyzylorda (GMT+05:00)\",\"tzCode\":\"Asia/Qyzylorda\",\"name\":\"(GMT+05:00) Kyzylorda, Baikonur, Novokazalinsk, Aral, Chiili\",\"utc\":\"+05:00\"},{\"label\":\"Asia/Samarkand (GMT+05:00)\",\"tzCode\":\"Asia/Samarkand\",\"name\":\"(GMT+05:00) Samarkand, Bukhara, Nukus, Qarshi, Jizzax\",\"utc\":\"+05:00\"},{\"label\":\"Asia/Tashkent (GMT+05:00)\",\"tzCode\":\"Asia/Tashkent\",\"name\":\"(GMT+05:00) Tashkent, Namangan, Andijon, Qo‘qon, Chirchiq\",\"utc\":\"+05:00\"},{\"label\":\"Asia/Yekaterinburg (GMT+05:00)\",\"tzCode\":\"Asia/Yekaterinburg\",\"name\":\"(GMT+05:00) Yekaterinburg, Chelyabinsk, Ufa, Perm, Orenburg\",\"utc\":\"+05:00\"},{\"label\":\"Indian/Kerguelen (GMT+05:00)\",\"tzCode\":\"Indian/Kerguelen\",\"name\":\"(GMT+05:00) Port-aux-Français\",\"utc\":\"+05:00\"},{\"label\":\"Indian/Maldives (GMT+05:00)\",\"tzCode\":\"Indian/Maldives\",\"name\":\"(GMT+05:00) Male, Fuvahmulah, Hithadhoo, Kulhudhuffushi, Thinadhoo\",\"utc\":\"+05:00\"},{\"label\":\"Asia/Colombo (GMT+05:30)\",\"tzCode\":\"Asia/Colombo\",\"name\":\"(GMT+05:30) Colombo, Dehiwala-Mount Lavinia, Moratuwa, Jaffna, Negombo\",\"utc\":\"+05:30\"},{\"label\":\"Asia/Kolkata (GMT+05:30)\",\"tzCode\":\"Asia/Kolkata\",\"name\":\"(GMT+05:30) Mumbai, Delhi, Bengaluru, Kolkata, Chennai\",\"utc\":\"+05:30\"},{\"label\":\"Asia/Kathmandu (GMT+05:45)\",\"tzCode\":\"Asia/Kathmandu\",\"name\":\"(GMT+05:45) Kathmandu, Pokhara, Pātan, Biratnagar, Birgañj\",\"utc\":\"+05:45\"},{\"label\":\"Antarctica/Vostok (GMT+06:00)\",\"tzCode\":\"Antarctica/Vostok\",\"name\":\"(GMT+06:00) Vostok\",\"utc\":\"+06:00\"},{\"label\":\"Asia/Almaty (GMT+06:00)\",\"tzCode\":\"Asia/Almaty\",\"name\":\"(GMT+06:00) Almaty, Karagandy, Shymkent, Taraz, Nur-Sultan\",\"utc\":\"+06:00\"},{\"label\":\"Asia/Bishkek (GMT+06:00)\",\"tzCode\":\"Asia/Bishkek\",\"name\":\"(GMT+06:00) Bishkek, Osh, Jalal-Abad, Karakol, Tokmok\",\"utc\":\"+06:00\"},{\"label\":\"Asia/Dhaka (GMT+06:00)\",\"tzCode\":\"Asia/Dhaka\",\"name\":\"(GMT+06:00) Dhaka, Chattogram, Khulna, Rājshāhi, Comilla\",\"utc\":\"+06:00\"},{\"label\":\"Asia/Omsk (GMT+06:00)\",\"tzCode\":\"Asia/Omsk\",\"name\":\"(GMT+06:00) Omsk, Tara, Kalachinsk, Znamenskoye, Tavricheskoye\",\"utc\":\"+06:00\"},{\"label\":\"Asia/Qostanay (GMT+06:00)\",\"tzCode\":\"Asia/Qostanay\",\"name\":\"(GMT+06:00) Kostanay, Rudnyy, Dzhetygara, Arkalyk, Lisakovsk\",\"utc\":\"+06:00\"},{\"label\":\"Asia/Thimphu (GMT+06:00)\",\"tzCode\":\"Asia/Thimphu\",\"name\":\"(GMT+06:00) himphu, Punākha, Tsirang, Phuntsholing, Pemagatshel\",\"utc\":\"+06:00\"},{\"label\":\"Asia/Urumqi (GMT+06:00)\",\"tzCode\":\"Asia/Urumqi\",\"name\":\"(GMT+06:00) Zhongshan, Ürümqi, Zhanjiang, Shihezi, Huocheng\",\"utc\":\"+06:00\"},{\"label\":\"Indian/Chagos (GMT+06:00)\",\"tzCode\":\"Indian/Chagos\",\"name\":\"(GMT+06:00) British Indian Ocean Territory\",\"utc\":\"+06:00\"},{\"label\":\"Asia/Yangon (GMT+06:30)\",\"tzCode\":\"Asia/Yangon\",\"name\":\"(GMT+06:30) Yangon, Mandalay, Nay Pyi Taw, Mawlamyine, Kyain Seikgyi Township\",\"utc\":\"+06:30\"},{\"label\":\"Indian/Cocos (GMT+06:30)\",\"tzCode\":\"Indian/Cocos\",\"name\":\"(GMT+06:30) West Island\",\"utc\":\"+06:30\"},{\"label\":\"Antarctica/Davis (GMT+07:00)\",\"tzCode\":\"Antarctica/Davis\",\"name\":\"(GMT+07:00) Davis\",\"utc\":\"+07:00\"},{\"label\":\"Asia/Bangkok (GMT+07:00)\",\"tzCode\":\"Asia/Bangkok\",\"name\":\"(GMT+07:00) Bangkok, Hanoi, Haiphong, Samut Prakan, Mueang Nonthaburi\",\"utc\":\"+07:00\"},{\"label\":\"Asia/Barnaul (GMT+07:00)\",\"tzCode\":\"Asia/Barnaul\",\"name\":\"(GMT+07:00) Barnaul, Biysk, Rubtsovsk, Novoaltaysk, Gorno-Altaysk\",\"utc\":\"+07:00\"},{\"label\":\"Asia/Hovd (GMT+07:00)\",\"tzCode\":\"Asia/Hovd\",\"name\":\"(GMT+07:00) Khovd, Ölgii, Ulaangom, Uliastay, Altai\",\"utc\":\"+07:00\"},{\"label\":\"Asia/Ho_Chi_Minh (GMT+07:00)\",\"tzCode\":\"Asia/Ho_Chi_Minh\",\"name\":\"(GMT+07:00) Ho Chi Minh City, Da Nang, Biên Hòa, Nha Trang, Cần Thơ\",\"utc\":\"+07:00\"},{\"label\":\"Asia/Jakarta (GMT+07:00)\",\"tzCode\":\"Asia/Jakarta\",\"name\":\"(GMT+07:00) Jakarta, Surabaya, Medan, Bandung, Bekasi\",\"utc\":\"+07:00\"},{\"label\":\"Asia/Krasnoyarsk (GMT+07:00)\",\"tzCode\":\"Asia/Krasnoyarsk\",\"name\":\"(GMT+07:00) Krasnoyarsk, Abakan, Norilsk, Achinsk, Kyzyl\",\"utc\":\"+07:00\"},{\"label\":\"Asia/Novokuznetsk (GMT+07:00)\",\"tzCode\":\"Asia/Novokuznetsk\",\"name\":\"(GMT+07:00) Novokuznetsk, Kemerovo, Prokop’yevsk, Leninsk-Kuznetsky, Kiselëvsk\",\"utc\":\"+07:00\"},{\"label\":\"Asia/Novosibirsk (GMT+07:00)\",\"tzCode\":\"Asia/Novosibirsk\",\"name\":\"(GMT+07:00) Novosibirsk, Berdsk, Iskitim, Akademgorodok, Kuybyshev\",\"utc\":\"+07:00\"},{\"label\":\"Asia/Phnom_Penh (GMT+07:00)\",\"tzCode\":\"Asia/Phnom_Penh\",\"name\":\"(GMT+07:00) Phnom Penh, Takeo, Sihanoukville, Battambang, Siem Reap\",\"utc\":\"+07:00\"},{\"label\":\"Asia/Pontianak (GMT+07:00)\",\"tzCode\":\"Asia/Pontianak\",\"name\":\"(GMT+07:00) Pontianak, Tanjung Pinang, Palangkaraya, Singkawang, Sampit\",\"utc\":\"+07:00\"},{\"label\":\"Asia/Tomsk (GMT+07:00)\",\"tzCode\":\"Asia/Tomsk\",\"name\":\"(GMT+07:00) Tomsk, Seversk, Strezhevoy, Kolpashevo, Asino\",\"utc\":\"+07:00\"},{\"label\":\"Asia/Vientiane (GMT+07:00)\",\"tzCode\":\"Asia/Vientiane\",\"name\":\"(GMT+07:00) Vientiane, Pakse, Thakhèk, Savannakhet, Luang Prabang\",\"utc\":\"+07:00\"},{\"label\":\"Indian/Christmas (GMT+07:00)\",\"tzCode\":\"Indian/Christmas\",\"name\":\"(GMT+07:00) Flying Fish Cove\",\"utc\":\"+07:00\"},{\"label\":\"Asia/Brunei (GMT+08:00)\",\"tzCode\":\"Asia/Brunei\",\"name\":\"(GMT+08:00) Bandar Seri Begawan, Kuala Belait, Seria, Tutong, Bangar\",\"utc\":\"+08:00\"},{\"label\":\"Asia/Choibalsan (GMT+08:00)\",\"tzCode\":\"Asia/Choibalsan\",\"name\":\"(GMT+08:00) Baruun-Urt, Choibalsan\",\"utc\":\"+08:00\"},{\"label\":\"Asia/Hong_Kong (GMT+08:00)\",\"tzCode\":\"Asia/Hong_Kong\",\"name\":\"(GMT+08:00) Hong Kong, Kowloon, Tsuen Wan, Yuen Long Kau Hui, Tung Chung\",\"utc\":\"+08:00\"},{\"label\":\"Asia/Irkutsk (GMT+08:00)\",\"tzCode\":\"Asia/Irkutsk\",\"name\":\"(GMT+08:00) Irkutsk, Ulan-Ude, Bratsk, Angarsk, Ust’-Ilimsk\",\"utc\":\"+08:00\"},{\"label\":\"Asia/Kuala_Lumpur (GMT+08:00)\",\"tzCode\":\"Asia/Kuala_Lumpur\",\"name\":\"(GMT+08:00) Kota Bharu, Kuala Lumpur, Klang, Kampung Baru Subang, Johor Bahru\",\"utc\":\"+08:00\"},{\"label\":\"Asia/Kuching (GMT+08:00)\",\"tzCode\":\"Asia/Kuching\",\"name\":\"(GMT+08:00) Kuching, Kota Kinabalu, Sandakan, Tawau, Miri\",\"utc\":\"+08:00\"},{\"label\":\"Asia/Macau (GMT+08:00)\",\"tzCode\":\"Asia/Macau\",\"name\":\"(GMT+08:00) Macau\",\"utc\":\"+08:00\"},{\"label\":\"Asia/Makassar (GMT+08:00)\",\"tzCode\":\"Asia/Makassar\",\"name\":\"(GMT+08:00) Makassar, Denpasar, City of Balikpapan, Banjarmasin, Manado\",\"utc\":\"+08:00\"},{\"label\":\"Asia/Manila (GMT+08:00)\",\"tzCode\":\"Asia/Manila\",\"name\":\"(GMT+08:00) Quezon City, Manila, Caloocan City, Budta, Davao\",\"utc\":\"+08:00\"},{\"label\":\"Asia/Shanghai (GMT+08:00)\",\"tzCode\":\"Asia/Shanghai\",\"name\":\"(GMT+08:00) Shanghai, Beijing, Tianjin, Guangzhou, Shenzhen\",\"utc\":\"+08:00\"},{\"label\":\"Asia/Singapore (GMT+08:00)\",\"tzCode\":\"Asia/Singapore\",\"name\":\"(GMT+08:00) Singapore, Woodlands\",\"utc\":\"+08:00\"},{\"label\":\"Asia/Taipei (GMT+08:00)\",\"tzCode\":\"Asia/Taipei\",\"name\":\"(GMT+08:00) Taipei, Kaohsiung, Taichung, Tainan, Banqiao\",\"utc\":\"+08:00\"},{\"label\":\"Asia/Ulaanbaatar (GMT+08:00)\",\"tzCode\":\"Asia/Ulaanbaatar\",\"name\":\"(GMT+08:00) Ulan Bator, Erdenet, Darhan, Hovd, Mörön\",\"utc\":\"+08:00\"},{\"label\":\"Australia/Perth (GMT+08:00)\",\"tzCode\":\"Australia/Perth\",\"name\":\"(GMT+08:00) Perth, Rockingham, Mandurah, Bunbury, Albany\",\"utc\":\"+08:00\"},{\"label\":\"Australia/Eucla (GMT+08:45)\",\"tzCode\":\"Australia/Eucla\",\"name\":\"(GMT+08:45) Eucla\",\"utc\":\"+08:45\"},{\"label\":\"Asia/Chita (GMT+09:00)\",\"tzCode\":\"Asia/Chita\",\"name\":\"(GMT+09:00) Chita, Krasnokamensk, Borzya, Petrovsk-Zabaykal’skiy, Aginskoye\",\"utc\":\"+09:00\"},{\"label\":\"Asia/Dili (GMT+09:00)\",\"tzCode\":\"Asia/Dili\",\"name\":\"(GMT+09:00) Dili, Maliana, Suai, Likisá, Aileu\",\"utc\":\"+09:00\"},{\"label\":\"Asia/Jayapura (GMT+09:00)\",\"tzCode\":\"Asia/Jayapura\",\"name\":\"(GMT+09:00) Ambon, Jayapura, Sorong, Ternate, Abepura\",\"utc\":\"+09:00\"},{\"label\":\"Asia/Khandyga (GMT+09:00)\",\"tzCode\":\"Asia/Khandyga\",\"name\":\"(GMT+09:00) Khandyga\",\"utc\":\"+09:00\"},{\"label\":\"Asia/Pyongyang (GMT+09:00)\",\"tzCode\":\"Asia/Pyongyang\",\"name\":\"(GMT+09:00) Pyongyang, Hamhŭng, Namp’o, Sunch’ŏn, Hŭngnam\",\"utc\":\"+09:00\"},{\"label\":\"Asia/Seoul (GMT+09:00)\",\"tzCode\":\"Asia/Seoul\",\"name\":\"(GMT+09:00) Seoul, Busan, Incheon, Daegu, Daejeon\",\"utc\":\"+09:00\"},{\"label\":\"Asia/Tokyo (GMT+09:00)\",\"tzCode\":\"Asia/Tokyo\",\"name\":\"(GMT+09:00) Tokyo, Yokohama, Osaka, Nagoya, Sapporo\",\"utc\":\"+09:00\"},{\"label\":\"Asia/Yakutsk (GMT+09:00)\",\"tzCode\":\"Asia/Yakutsk\",\"name\":\"(GMT+09:00) Yakutsk, Blagoveshchensk, Belogorsk, Neryungri, Svobodnyy\",\"utc\":\"+09:00\"},{\"label\":\"Pacific/Palau (GMT+09:00)\",\"tzCode\":\"Pacific/Palau\",\"name\":\"(GMT+09:00) Koror, Koror Town, Kloulklubed, Ulimang, Mengellang\",\"utc\":\"+09:00\"},{\"label\":\"Australia/Adelaide (GMT+09:30)\",\"tzCode\":\"Australia/Adelaide\",\"name\":\"(GMT+09:30) Adelaide, Adelaide Hills, Mount Gambier, Morphett Vale, Gawler\",\"utc\":\"+09:30\"},{\"label\":\"Australia/Broken_Hill (GMT+09:30)\",\"tzCode\":\"Australia/Broken_Hill\",\"name\":\"(GMT+09:30) Broken Hill\",\"utc\":\"+09:30\"},{\"label\":\"Australia/Darwin (GMT+09:30)\",\"tzCode\":\"Australia/Darwin\",\"name\":\"(GMT+09:30) Darwin, Alice Springs, Palmerston, Howard Springs\",\"utc\":\"+09:30\"},{\"label\":\"Antarctica/DumontDUrville (GMT+10:00)\",\"tzCode\":\"Antarctica/DumontDUrville\",\"name\":\"(GMT+10:00) DumontDUrville\",\"utc\":\"+10:00\"},{\"label\":\"Antarctica/Macquarie (GMT+10:00)\",\"tzCode\":\"Antarctica/Macquarie\",\"name\":\"(GMT+10:00) Macquarie\",\"utc\":\"+10:00\"},{\"label\":\"Asia/Ust-Nera (GMT+10:00)\",\"tzCode\":\"Asia/Ust-Nera\",\"name\":\"(GMT+10:00) Ust-Nera\",\"utc\":\"+10:00\"},{\"label\":\"Asia/Vladivostok (GMT+10:00)\",\"tzCode\":\"Asia/Vladivostok\",\"name\":\"(GMT+10:00) Vladivostok, Khabarovsk, Khabarovsk Vtoroy, Komsomolsk-on-Amur, Ussuriysk\",\"utc\":\"+10:00\"},{\"label\":\"Australia/Brisbane (GMT+10:00)\",\"tzCode\":\"Australia/Brisbane\",\"name\":\"(GMT+10:00) Brisbane, Gold Coast, Logan City, Townsville, Cairns\",\"utc\":\"+10:00\"},{\"label\":\"Australia/Currie (GMT+10:00)\",\"tzCode\":\"Australia/Currie\",\"name\":\"(GMT+10:00) Currie\",\"utc\":\"+10:00\"},{\"label\":\"Australia/Hobart (GMT+10:00)\",\"tzCode\":\"Australia/Hobart\",\"name\":\"(GMT+10:00) Hobart, Launceston, Burnie, Devonport, Sandy Bay\",\"utc\":\"+10:00\"},{\"label\":\"Australia/Lindeman (GMT+10:00)\",\"tzCode\":\"Australia/Lindeman\",\"name\":\"(GMT+10:00) Lindeman\",\"utc\":\"+10:00\"},{\"label\":\"Australia/Melbourne (GMT+10:00)\",\"tzCode\":\"Australia/Melbourne\",\"name\":\"(GMT+10:00) Melbourne, Geelong, Bendigo, Ballarat, Melbourne City Centre\",\"utc\":\"+10:00\"},{\"label\":\"Australia/Sydney (GMT+10:00)\",\"tzCode\":\"Australia/Sydney\",\"name\":\"(GMT+10:00) Sydney, Canberra, Newcastle, Wollongong, Maitland\",\"utc\":\"+10:00\"},{\"label\":\"Pacific/Chuuk (GMT+10:00)\",\"tzCode\":\"Pacific/Chuuk\",\"name\":\"(GMT+10:00) Weno, Colonia\",\"utc\":\"+10:00\"},{\"label\":\"Pacific/GuamVillage (GMT+10:00)\",\"tzCode\":\"Pacific/GuamVillage\",\"name\":\"(GMT+10:00) Dededo Village, Yigo Village, Tamuning, Tamuning-Tumon-Harmon Village, Mangilao Village\",\"utc\":\"+10:00\"},{\"label\":\"Pacific/Port_Moresby (GMT+10:00)\",\"tzCode\":\"Pacific/Port_Moresby\",\"name\":\"(GMT+10:00) Port Moresby, Lae, Mount Hagen, Popondetta, Madang\",\"utc\":\"+10:00\"},{\"label\":\"Pacific/Saipan (GMT+10:00)\",\"tzCode\":\"Pacific/Saipan\",\"name\":\"(GMT+10:00) Saipan, San Jose Village\",\"utc\":\"+10:00\"},{\"label\":\"Australia/Lord_Howe (GMT+10:30)\",\"tzCode\":\"Australia/Lord_Howe\",\"name\":\"(GMT+10:30) Lord Howe\",\"utc\":\"+10:30\"},{\"label\":\"Antarctica/Casey (GMT+11:00)\",\"tzCode\":\"Antarctica/Casey\",\"name\":\"(GMT+11:00) Casey\",\"utc\":\"+11:00\"},{\"label\":\"Asia/Magadan (GMT+11:00)\",\"tzCode\":\"Asia/Magadan\",\"name\":\"(GMT+11:00) Magadan, Ust-Nera, Susuman, Ola\",\"utc\":\"+11:00\"},{\"label\":\"Asia/Sakhalin (GMT+11:00)\",\"tzCode\":\"Asia/Sakhalin\",\"name\":\"(GMT+11:00) Yuzhno-Sakhalinsk, Korsakov, Kholmsk, Okha, Nevel’sk\",\"utc\":\"+11:00\"},{\"label\":\"Asia/Srednekolymsk (GMT+11:00)\",\"tzCode\":\"Asia/Srednekolymsk\",\"name\":\"(GMT+11:00) Srednekolymsk\",\"utc\":\"+11:00\"},{\"label\":\"Pacific/Bougainville (GMT+11:00)\",\"tzCode\":\"Pacific/Bougainville\",\"name\":\"(GMT+11:00) Arawa, Buka\",\"utc\":\"+11:00\"},{\"label\":\"Pacific/Efate (GMT+11:00)\",\"tzCode\":\"Pacific/Efate\",\"name\":\"(GMT+11:00) Port-Vila, Luganville, Isangel, Sola, Lakatoro\",\"utc\":\"+11:00\"},{\"label\":\"Pacific/Guadalcanal (GMT+11:00)\",\"tzCode\":\"Pacific/Guadalcanal\",\"name\":\"(GMT+11:00) Honiara, Malango, Auki, Gizo, Buala\",\"utc\":\"+11:00\"},{\"label\":\"Pacific/Kosrae (GMT+11:00)\",\"tzCode\":\"Pacific/Kosrae\",\"name\":\"(GMT+11:00) Tofol\",\"utc\":\"+11:00\"},{\"label\":\"Pacific/Norfolk (GMT+11:00)\",\"tzCode\":\"Pacific/Norfolk\",\"name\":\"(GMT+11:00) Kingston\",\"utc\":\"+11:00\"},{\"label\":\"Pacific/Noumea (GMT+11:00)\",\"tzCode\":\"Pacific/Noumea\",\"name\":\"(GMT+11:00) Nouméa, Mont-Dore, Dumbéa, Païta, Wé\",\"utc\":\"+11:00\"},{\"label\":\"Pacific/Pohnpei (GMT+11:00)\",\"tzCode\":\"Pacific/Pohnpei\",\"name\":\"(GMT+11:00) Kolonia, Kolonia Town, Palikir - National Government Center\",\"utc\":\"+11:00\"},{\"label\":\"Antarctica/McMurdo (GMT+12:00)\",\"tzCode\":\"Antarctica/McMurdo\",\"name\":\"(GMT+12:00) McMurdo\",\"utc\":\"+12:00\"},{\"label\":\"Asia/Anadyr (GMT+12:00)\",\"tzCode\":\"Asia/Anadyr\",\"name\":\"(GMT+12:00) Anadyr, Bilibino\",\"utc\":\"+12:00\"},{\"label\":\"Asia/Kamchatka (GMT+12:00)\",\"tzCode\":\"Asia/Kamchatka\",\"name\":\"(GMT+12:00) Petropavlovsk-Kamchatsky, Yelizovo, Vilyuchinsk, Klyuchi, Mil’kovo\",\"utc\":\"+12:00\"},{\"label\":\"Pacific/Auckland (GMT+12:00)\",\"tzCode\":\"Pacific/Auckland\",\"name\":\"(GMT+12:00) Auckland, Wellington, Christchurch, Manukau City, North Shore\",\"utc\":\"+12:00\"},{\"label\":\"Pacific/Fiji (GMT+12:00)\",\"tzCode\":\"Pacific/Fiji\",\"name\":\"(GMT+12:00) Suva, Lautoka, Nadi, Labasa, Ba\",\"utc\":\"+12:00\"},{\"label\":\"Pacific/Funafuti (GMT+12:00)\",\"tzCode\":\"Pacific/Funafuti\",\"name\":\"(GMT+12:00) Funafuti, Savave Village, Tanrake Village, Toga Village, Asau Village\",\"utc\":\"+12:00\"},{\"label\":\"Pacific/Kwajalein (GMT+12:00)\",\"tzCode\":\"Pacific/Kwajalein\",\"name\":\"(GMT+12:00) Ebaye, Jabat\",\"utc\":\"+12:00\"},{\"label\":\"Pacific/Majuro (GMT+12:00)\",\"tzCode\":\"Pacific/Majuro\",\"name\":\"(GMT+12:00) Majuro, Arno, Jabor, Wotje, Mili\",\"utc\":\"+12:00\"},{\"label\":\"Pacific/Nauru (GMT+12:00)\",\"tzCode\":\"Pacific/Nauru\",\"name\":\"(GMT+12:00) Yaren, Baiti, Anabar, Uaboe, Ijuw\",\"utc\":\"+12:00\"},{\"label\":\"Pacific/Tarawa (GMT+12:00)\",\"tzCode\":\"Pacific/Tarawa\",\"name\":\"(GMT+12:00) Tarawa, Betio Village, Bikenibeu Village\",\"utc\":\"+12:00\"},{\"label\":\"Pacific/Wake (GMT+12:00)\",\"tzCode\":\"Pacific/Wake\",\"name\":\"(GMT+12:00) Wake\",\"utc\":\"+12:00\"},{\"label\":\"Pacific/Wallis (GMT+12:00)\",\"tzCode\":\"Pacific/Wallis\",\"name\":\"(GMT+12:00) Mata-Utu, Leava, Alo\",\"utc\":\"+12:00\"},{\"label\":\"Pacific/Chatham (GMT+12:45)\",\"tzCode\":\"Pacific/Chatham\",\"name\":\"(GMT+12:45) Waitangi\",\"utc\":\"+12:45\"},{\"label\":\"Pacific/Apia (GMT+13:00)\",\"tzCode\":\"Pacific/Apia\",\"name\":\"(GMT+13:00) Apia, Asau, Mulifanua, Afega, Leulumoega\",\"utc\":\"+13:00\"},{\"label\":\"Pacific/Enderbury (GMT+13:00)\",\"tzCode\":\"Pacific/Enderbury\",\"name\":\"(GMT+13:00) Enderbury\",\"utc\":\"+13:00\"},{\"label\":\"Pacific/Fakaofo (GMT+13:00)\",\"tzCode\":\"Pacific/Fakaofo\",\"name\":\"(GMT+13:00) Atafu Village, Nukunonu, Fale old settlement\",\"utc\":\"+13:00\"},{\"label\":\"Pacific/Tongatapu (GMT+13:00)\",\"tzCode\":\"Pacific/Tongatapu\",\"name\":\"(GMT+13:00) Nuku‘alofa, Lapaha, Neiafu, Pangai, ‘Ohonua\",\"utc\":\"+13:00\"},{\"label\":\"Pacific/Kiritimati (GMT+14:00)\",\"tzCode\":\"Pacific/Kiritimati\",\"name\":\"(GMT+14:00) Kiritimati\",\"utc\":\"+14:00\"}]');\n\n//# sourceURL=webpack://@vertzo/app/../../node_modules/timezones-list/dist/timezones.json?");

/***/ })

/******/ 	});
/************************************************************************/
/******/ 	// The module cache
/******/ 	var __webpack_module_cache__ = {};
/******/ 	
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/ 		// Check if module is in cache
/******/ 		var cachedModule = __webpack_module_cache__[moduleId];
/******/ 		if (cachedModule !== undefined) {
/******/ 			return cachedModule.exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = __webpack_module_cache__[moduleId] = {
/******/ 			id: moduleId,
/******/ 			// no module.loaded needed
/******/ 			exports: {}
/******/ 		};
/******/ 	
/******/ 		// Execute the module function
/******/ 		__webpack_modules__[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/ 	
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/ 	
/************************************************************************/
/******/ 	/* webpack/runtime/compat get default export */
/******/ 	(() => {
/******/ 		// getDefaultExport function for compatibility with non-harmony modules
/******/ 		__webpack_require__.n = (module) => {
/******/ 			var getter = module && module.__esModule ?
/******/ 				() => (module['default']) :
/******/ 				() => (module);
/******/ 			__webpack_require__.d(getter, { a: getter });
/******/ 			return getter;
/******/ 		};
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/define property getters */
/******/ 	(() => {
/******/ 		// define getter functions for harmony exports
/******/ 		__webpack_require__.d = (exports, definition) => {
/******/ 			for(var key in definition) {
/******/ 				if(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {
/******/ 					Object.defineProperty(exports, key, { enumerable: true, get: definition[key] });
/******/ 				}
/******/ 			}
/******/ 		};
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/hasOwnProperty shorthand */
/******/ 	(() => {
/******/ 		__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/make namespace object */
/******/ 	(() => {
/******/ 		// define __esModule on exports
/******/ 		__webpack_require__.r = (exports) => {
/******/ 			if(typeof Symbol !== 'undefined' && Symbol.toStringTag) {
/******/ 				Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });
/******/ 			}
/******/ 			Object.defineProperty(exports, '__esModule', { value: true });
/******/ 		};
/******/ 	})();
/******/ 	
/************************************************************************/
/******/ 	
/******/ 	// startup
/******/ 	// Load entry module and return exports
/******/ 	// This entry module can't be inlined because the eval devtool is used.
/******/ 	var __webpack_exports__ = __webpack_require__("./src/main/index.js");
/******/ 	
/******/ })()
;